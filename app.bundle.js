var AudioGen=function(F){"use strict";class P{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],gains:[],lfos:[],filter:null,mixer:null},this.isPlaying=!1,this.voiceId="drone"}start(e){if(this.isPlaying)return;const{frequency:t,detune:s,voices:i,filterFreq:a}=e;this.stop(),this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=a,this.nodes.filter.Q.value=5,this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.3;for(let n=0;n<i;n++){let o,l,c,h;this.poolManager?(o=this.poolManager.pools.oscillator.acquireOscillator(`${this.voiceId}_osc_${n}`,{type:"sawtooth",frequency:t*(1+(Math.random()-.5)*s/100)}),l=this.poolManager.pools.gain.acquireGain(`${this.voiceId}_gain_${n}`,1/i),c=this.poolManager.pools.oscillator.acquireOscillator(`${this.voiceId}_lfo_${n}`,{type:"sine",frequency:.1+Math.random()*.2}),h=this.poolManager.pools.gain.acquireGain(`${this.voiceId}_lfoGain_${n}`,5)):(o=this.audioContext.createOscillator(),l=this.audioContext.createGain(),c=this.audioContext.createOscillator(),h=this.audioContext.createGain(),o.type="sawtooth",o.frequency.value=t*(1+(Math.random()-.5)*s/100),l.gain.value=1/i,c.frequency.value=.1+Math.random()*.2,h.gain.value=5),c.connect(h),h.connect(o.frequency),o.connect(l),l.connect(this.nodes.filter),this.poolManager||(c.start(),o.start()),this.nodes.oscillators.push(o),this.nodes.gains.push(l),this.nodes.lfos.push({lfo:c,lfoGain:h})}this.nodes.filter.connect(this.nodes.mixer),this.isPlaying=!0}stop(){if(this.poolManager?(this.nodes.oscillators.forEach((e,t)=>{this.poolManager.pools.oscillator.release(e)}),this.nodes.gains.forEach((e,t)=>{this.poolManager.pools.gain.release(e)}),this.nodes.lfos.forEach(({lfo:e,lfoGain:t},s)=>{this.poolManager.pools.oscillator.release(e),this.poolManager.pools.gain.release(t)})):(this.nodes.oscillators.forEach(e=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.lfos.forEach(({lfo:e})=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.gains.forEach(e=>{if(e)try{e.disconnect()}catch{}})),this.nodes.filter)try{this.nodes.filter.disconnect()}catch{}if(this.nodes.mixer)try{this.nodes.mixer.disconnect()}catch{}this.nodes.oscillators=[],this.nodes.gains=[],this.nodes.lfos=[],this.nodes.filter=null,this.nodes.mixer=null,this.isPlaying=!1}updateParameter(e,t){switch(e){case"frequency":this.nodes.oscillators.forEach((s,i)=>{const a=parseFloat(document.getElementById("droneDetune").value);s.frequency.value=t*(1+(Math.random()-.5)*a/100)});break;case"filterFreq":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break;case"volume":this.nodes.mixer&&(this.nodes.mixer.gain.value=t);break}}getOutputNode(){return this.nodes.mixer}}class k{constructor(e,t){this.audioContext=e,this.scheduler=null,this.drumVoices=0,this.maxDrumVoices=20,this.activeVoices=0,this.maxVoices=100,this.performanceThrottle=1,this.isPlaying=!1}start(e,t){if(this.isPlaying)return;const{pattern:s,tempo:i,density:a,variation:n,swing:o,snareRush:l,ghostNotes:c,hihatSpeed:h}=e;this.masterNodes=t;const r=6e4/(i*8);let d=0;const m=this.getDrumPatterns()[s];this.scheduler=setInterval(()=>{const f=d%m.length,p=d%2*o*r*.2,u=(Math.random()-.5)*n*10+p;if(m.kick[f]&&Math.random()<a){const v=m.kick[f]*.9;setTimeout(()=>this.playKick(this.audioContext.currentTime,n,v),u)}if(m.snare[f]&&Math.random()<a*.9){const v=m.snare[f]*.8;setTimeout(()=>{this.playSnare(this.audioContext.currentTime,n,v),Math.random()<l&&f%4===0&&this.triggerSnareRush(n)},u)}if(d%(16/h)===0&&m.hihat[f%16]&&Math.random()<a*.8){const v=m.hihat[f%16]*.5,M=f%4===2&&Math.random()<.3;setTimeout(()=>this.playHiHat(this.audioContext.currentTime,n,v,M),u)}if(m.perc&&m.perc[f]&&Math.random()<a*.7&&(Math.random()<.5?setTimeout(()=>this.playRimshot(this.audioContext.currentTime,n),u):setTimeout(()=>this.playClap(this.audioContext.currentTime,n),u)),Math.random()<c){const v=u+Math.random()*r;setTimeout(()=>{const M=Math.random();M<.4?this.playKick(this.audioContext.currentTime,n*2,.3):M<.7?this.playSnare(this.audioContext.currentTime,n*2,.25):this.playHiHat(this.audioContext.currentTime,n*2,.2)},v)}d++},r),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.isPlaying=!1}connectToMaster(e){this.masterNodes&&(e.connect(this.masterNodes.dryGain),e.connect(this.masterNodes.convolver),e.connect(this.masterNodes.delay))}getDrumPatterns(){return{techno:{length:16,kick:[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],snare:[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],hihat:[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],perc:[0,0,0,.5,0,0,0,0,0,.3,0,0,0,0,.4,0]},breakbeat:{length:32,kick:[1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],snare:[0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],hihat:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],perc:[0,0,.3,0,0,0,0,.5,0,0,0,0,.4,0,0,0,0,.3,0,0,0,0,0,0,.6,0,0,0,0,0,0,0]},jungle:{length:32,kick:[1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0],snare:[0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0],hihat:[1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0],perc:[0,.5,0,0,.3,0,0,0,0,0,.4,0,0,.6,0,0,.3,0,0,0,0,.5,0,0,0,0,0,.4,0,0,0,0]},idm:{length:32,kick:[1,0,0,.5,0,0,1,0,0,.3,0,0,.7,0,0,0,.8,0,0,0,.4,0,0,0,1,0,.2,0,0,0,.6,0],snare:[0,0,0,0,.8,0,0,.3,0,0,.5,0,1,0,0,.2,0,0,.6,0,.9,0,0,0,.4,0,0,.7,0,0,1,0],hihat:[.5,.3,.8,.2,.6,.4,.9,.1,.7,.3,.5,.8,.4,.6,.2,.9],perc:[.7,0,0,.4,0,.6,0,0,.5,0,0,.3,0,0,.8,0,0,.4,0,0,.7,0,.3,0,0,.5,0,0,.6,0,0,.4]},gabber:{length:16,kick:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],snare:[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],hihat:[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],perc:[0,0,0,.8,0,0,0,.6,0,0,0,.7,0,0,0,.5]},trap:{length:32,kick:[1,0,0,0,0,0,0,0,0,0,0,0,.8,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,.6,0],snare:[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],hihat:[1,.3,.5,.3,1,.3,.5,.3,1,.3,.5,.3,1,.3,.5,.3],perc:[0,0,0,0,0,.6,0,0,0,0,0,0,0,0,.7,0,0,0,0,0,.5,0,0,0,0,0,0,0,0,0,0,.8]}}}triggerSnareRush(e){const t=4+Math.floor(Math.random()*12),s=20+Math.random()*40,i=Math.min(t,8);for(let a=0;a<i;a++)setTimeout(()=>{const n=.3*(1-a/i);this.playSnare(this.audioContext.currentTime,e*2,n)},a*s)}playKick(e,t,s=.7){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++,this.performanceThrottle<.5&&(s*=.7);const i=this.audioContext.createGain();i.gain.value=s;const a=this.audioContext.createOscillator();a.type="sine",a.frequency.setValueAtTime(55,e),a.frequency.exponentialRampToValueAtTime(25,e+.3);const n=this.audioContext.createGain();n.gain.setValueAtTime(.7,e),n.gain.exponentialRampToValueAtTime(.01,e+.25);const o=this.audioContext.createOscillator();o.type="triangle",o.frequency.setValueAtTime(85,e),o.frequency.exponentialRampToValueAtTime(45,e+.08);const l=this.audioContext.createGain();l.gain.setValueAtTime(.5,e),l.gain.exponentialRampToValueAtTime(.01,e+.1);const c=this.audioContext.createOscillator();c.type="square",c.frequency.value=1500+Math.random()*500;const h=this.audioContext.createGain();h.gain.setValueAtTime(.3,e),h.gain.exponentialRampToValueAtTime(.01,e+.005);const r=this.audioContext.createBiquadFilter();r.type="highpass",r.frequency.value=1e3;const d=this.audioContext.createBuffer(1,512,this.audioContext.sampleRate),g=d.getChannelData(0);for(let u=0;u<512;u++)g[u]=(Math.random()*2-1)*Math.pow(1-u/512,2);const m=this.audioContext.createBufferSource();m.buffer=d;const f=this.audioContext.createGain();f.gain.value=.2;const p=this.audioContext.createBiquadFilter();p.type="peaking",p.frequency.value=80,p.Q.value=.7,p.gain.value=6,a.connect(n),n.connect(p),o.connect(l),l.connect(p),c.connect(r),r.connect(h),h.connect(p),m.connect(f),f.connect(p),p.connect(i),this.connectToMaster(i),a.start(e),o.start(e),c.start(e),m.start(e),a.stop(e+.3),o.stop(e+.15),c.stop(e+.01),setTimeout(()=>{this.activeVoices--,this.drumVoices--},300)}playSnare(e,t,s=.5){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++,this.performanceThrottle<.7&&(s*=.8);const i=this.audioContext.createGain();i.gain.value=s;const a=.15,n=this.audioContext.createBuffer(2,this.audioContext.sampleRate*a,this.audioContext.sampleRate);for(let m=0;m<2;m++){const f=n.getChannelData(m);for(let p=0;p<f.length;p++){const u=Math.random()*2-1,v=Math.pow(1-p/f.length,.5);f[p]=u*v}}const o=this.audioContext.createBufferSource();o.buffer=n;const l=this.audioContext.createBiquadFilter();l.type="highpass",l.frequency.value=200+t*100;const c=this.audioContext.createBiquadFilter();c.type="bandpass",c.frequency.value=5e3+Math.random()*2e3,c.Q.value=2;const h=this.audioContext.createGain();h.gain.setValueAtTime(.7,e),h.gain.exponentialRampToValueAtTime(.01,e+a);const r=[200,250,300];r.forEach((m,f)=>{const p=this.audioContext.createOscillator();p.type="sine",p.frequency.value=m*(1+t*.1);const u=this.audioContext.createGain();u.gain.setValueAtTime(.3/r.length,e),u.gain.exponentialRampToValueAtTime(.01,e+.03+f*.01),p.connect(u),u.connect(i),p.start(e),p.stop(e+.1)});const d=this.audioContext.createOscillator();d.type="triangle",d.frequency.value=1e3;const g=this.audioContext.createGain();g.gain.setValueAtTime(.5,e),g.gain.exponentialRampToValueAtTime(.01,e+.002),o.connect(l),l.connect(c),c.connect(h),h.connect(i),d.connect(g),g.connect(i),this.connectToMaster(i),o.start(e),d.start(e),d.stop(e+.005),setTimeout(()=>{this.activeVoices--,this.drumVoices--},150)}playHiHat(e,t,s=.3,i=!1){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++,this.performanceThrottle<.5&&(s*=.7);const a=i?.3:.05,n=this.audioContext.createGain();n.gain.value=s;const o=this.performanceThrottle<.5?[8e3,12e3]:[6e3,8e3,1e4,12e3,14e3];o.forEach(h=>{const r=this.audioContext.createBufferSource(),d=Math.min(a+.05,.1),g=this.audioContext.createBuffer(1,this.audioContext.sampleRate*d,this.audioContext.sampleRate),m=g.getChannelData(0);for(let v=0;v<m.length;v++){const M=Math.sin(v*h/this.audioContext.sampleRate*2*Math.PI);m[v]=(Math.random()*2-1)*M}r.buffer=g,r.loop=!0;const f=this.audioContext.createBiquadFilter();f.type="bandpass",f.frequency.value=h*(1+(Math.random()-.5)*t*.1),f.Q.value=30;const p=this.audioContext.createGain(),u=i?[.8/o.length,a*.8,.01,a]:[1/o.length,.001,.01,a];p.gain.setValueAtTime(0,e),p.gain.linearRampToValueAtTime(u[0],e+u[1]),p.gain.exponentialRampToValueAtTime(u[2],e+u[3]),r.connect(f),f.connect(p),p.connect(n),r.start(e),r.stop(e+a+.05)});const l=this.audioContext.createOscillator();l.type="square",l.frequency.value=15e3+Math.random()*2e3;const c=this.audioContext.createGain();c.gain.setValueAtTime(.1,e),c.gain.exponentialRampToValueAtTime(.01,e+a*.3),l.connect(c),c.connect(n),this.connectToMaster(n),l.start(e),l.stop(e+a),setTimeout(()=>{this.activeVoices--,this.drumVoices--},a*1e3+50)}playRimshot(e,t){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++;const s=.6,i=this.audioContext.createOscillator();i.frequency.value=800+Math.random()*200,i.type="square";const a=this.audioContext.createGain();a.gain.setValueAtTime(.4*s,e),a.gain.exponentialRampToValueAtTime(.01,e+.01);const n=this.audioContext.createOscillator();n.frequency.value=400,n.type="sine";const o=this.audioContext.createGain();o.gain.setValueAtTime(.3*s,e),o.gain.exponentialRampToValueAtTime(.01,e+.04);const l=this.audioContext.createBiquadFilter();l.type="bandpass",l.frequency.value=1200,l.Q.value=10;const c=this.audioContext.createBuffer(1,1024,this.audioContext.sampleRate),h=c.getChannelData(0);for(let m=0;m<1024;m++)h[m]=(Math.random()*2-1)*Math.pow(1-m/1024,2);const r=this.audioContext.createBufferSource();r.buffer=c;const d=this.audioContext.createGain();d.gain.value=.3*s;const g=this.audioContext.createGain();i.connect(a),a.connect(g),n.connect(l),l.connect(o),o.connect(g),r.connect(d),d.connect(g),this.connectToMaster(g),i.start(e),n.start(e),r.start(e),i.stop(e+.01),n.stop(e+.05),setTimeout(()=>{this.activeVoices--,this.drumVoices--},50)}playClap(e,t){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++;const s=.5,i=this.audioContext.createGain(),a=this.performanceThrottle<.7?2:3+Math.floor(Math.random()*2),n=.01;for(let c=0;c<a;c++){const h=e+c*n,r=this.audioContext.createBuffer(1,512,this.audioContext.sampleRate),d=r.getChannelData(0);for(let u=0;u<512;u++)d[u]=Math.random()*2-1;const g=this.audioContext.createBufferSource();g.buffer=r;const m=this.audioContext.createBiquadFilter();m.type="bandpass",m.frequency.value=1500+Math.random()*1e3,m.Q.value=5;const f=this.audioContext.createGain(),p=s*(c===a-1?1:.3+Math.random()*.3);f.gain.setValueAtTime(p,h),f.gain.exponentialRampToValueAtTime(.01,h+.02),g.connect(m),m.connect(f),f.connect(i),g.start(h)}const o=this.audioContext.createOscillator();o.frequency.value=200;const l=this.audioContext.createGain();l.gain.setValueAtTime(.2*s,e),l.gain.exponentialRampToValueAtTime(.01,e+.03),o.connect(l),l.connect(i),this.connectToMaster(i),o.start(e),o.stop(e+.05),setTimeout(()=>{this.activeVoices--,this.drumVoices--},100)}updateParameter(e,t){}setPerformanceThrottle(e){this.performanceThrottle=e}}function S(x,e,t,s=!1){const i=x.sampleRate*e,a=x.createBuffer(2,i,x.sampleRate);for(let n=0;n<2;n++){const o=a.getChannelData(n);for(let l=0;l<i;l++){const c=s?i-l:l;o[l]=(Math.random()*2-1)*Math.pow(1-c/i,t)}}return a}class V{constructor(e,t){this.audioContext=e,this.nodes={source:null,gain:null,waveshaper:null},this.scheduler=null,this.isPlaying=!1}start(e){if(this.isPlaying)return;const{intensity:t,rate:s,bitCrush:i}=e;if(t===0)return;this.nodes.source=this.audioContext.createBufferSource(),this.nodes.gain=this.audioContext.createGain(),this.nodes.gain.gain.value=t*.5;const a=this.audioContext.sampleRate*.1,n=this.audioContext.createBuffer(1,a,this.audioContext.sampleRate),o=n.getChannelData(0);for(let l=0;l<a;l++)o[l]=Math.random()*2-1;this.nodes.source.buffer=n,this.nodes.source.loop=!0,this.nodes.waveshaper=this.audioContext.createWaveShaper(),this.updateBitCrusher(i),this.nodes.source.connect(this.nodes.waveshaper),this.nodes.waveshaper.connect(this.nodes.gain),this.nodes.source.start(),this.scheduler=setInterval(()=>{Math.random()<t&&this.triggerGlitch()},1e3/s),this.isPlaying=!0}stop(){if(this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.nodes.source)try{this.nodes.source.stop(),this.nodes.source.disconnect()}catch{}if(this.nodes.waveshaper)try{this.nodes.waveshaper.disconnect()}catch{}if(this.nodes.gain)try{this.nodes.gain.disconnect()}catch{}this.nodes.source=null,this.nodes.waveshaper=null,this.nodes.gain=null,this.isPlaying=!1}triggerGlitch(){if(!this.nodes.gain)return;const e=this.nodes.gain.gain,t=this.audioContext.currentTime;e.cancelScheduledValues(t),e.setValueAtTime(e.value,t),e.linearRampToValueAtTime(Math.random()*.8,t+.01),e.linearRampToValueAtTime(0,t+.05),e.linearRampToValueAtTime(e.value,t+.1)}updateBitCrusher(e){if(!this.nodes.waveshaper)return;const t=new Float32Array(256),s=Math.pow(2,16-e);for(let i=0;i<256;i++){const a=(i-128)/128;t[i]=Math.round(a*s)/s}this.nodes.waveshaper.curve=t}updateParameter(e,t){switch(e){case"bitcrush":this.updateBitCrusher(t);break;case"intensity":this.nodes.gain&&(this.nodes.gain.gain.value=t/100*.5);break}}getOutputNode(){return this.nodes.gain}}class q{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.masterConnection=null,this.activeNodes=new Set}start(e,t){if(this.isPlaying)return;const{density:s,range:i,duration:a}=e;this.masterConnection=t,s!==0&&(this.scheduler=setInterval(()=>{Math.random()<s&&this.triggerBleep(i,a)},100),this.isPlaying=!0)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager&&this.activeNodes.forEach(({osc:e,gain:t,nodeId:s})=>{this.poolManager.pools.oscillator.release(e),this.poolManager.pools.gain.release(t)}),this.activeNodes.clear(),this.isPlaying=!1}triggerBleep(e,t){const s=this.audioContext.currentTime,i=100+Math.random()*e;let a,n;const o=`bleep_${Date.now()}_${Math.random()}`;this.poolManager?(a=this.poolManager.pools.oscillator.acquireOscillator(o,{type:"sine",frequency:i}),n=this.poolManager.pools.gain.acquireGain(o,0)):(a=this.audioContext.createOscillator(),n=this.audioContext.createGain(),a.type="sine",a.frequency.value=i,n.gain.value=0),n.gain.setValueAtTime(0,s),n.gain.linearRampToValueAtTime(.5,s+.001),n.gain.setValueAtTime(.5,s+t-.001),n.gain.linearRampToValueAtTime(0,s+t),a.connect(n),this.masterConnection&&this.masterConnection(n),this.activeNodes.add({osc:a,gain:n,nodeId:o}),this.poolManager?setTimeout(()=>{this.poolManager.pools.oscillator.release(a),this.poolManager.pools.gain.release(n),this.activeNodes.forEach(l=>{l.nodeId===o&&this.activeNodes.delete(l)})},(t+.1)*1e3):(a.start(s),a.stop(s+t+.001))}updateParameter(e,t){}}class A{constructor(e,t){this.audioContext=e,this.scheduler=null,this.isPlaying=!1,this.masterConnection=null}start(e,t){if(this.isPlaying)return;const{activity:s,complexity:i,speed:a}=e;this.masterConnection=t,s!==0&&(this.scheduler=setInterval(()=>{Math.random()<s&&this.triggerDataBurst(i,a)},200/a),this.isPlaying=!0)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.isPlaying=!1}triggerDataBurst(e,t){const s=this.audioContext.currentTime,i=.05+Math.random()*.2;for(let a=0;a<e;a++){const n=200+Math.random()*8e3,o=s+a*i/e,l=this.audioContext.createOscillator(),c=this.audioContext.createGain(),h=this.audioContext.createBiquadFilter();l.type=Math.random()<.5?"square":"sawtooth",l.frequency.value=n,h.type="bandpass",h.frequency.value=n,h.Q.value=10+Math.random()*20,c.gain.setValueAtTime(0,o),c.gain.linearRampToValueAtTime(.3/e,o+.001),c.gain.linearRampToValueAtTime(0,o+i/e),l.connect(h),h.connect(c),this.masterConnection&&this.masterConnection(c),l.start(o),l.stop(o+i/e+.001)}}updateParameter(e,t){}}class D{constructor(e,t){this.audioContext=e,this.nodes={carrier:null,modulator:null,modGain:null,gain:null,lfo:null,lfoGain:null},this.isPlaying=!1}start(e){if(this.isPlaying)return;const{carrierFreq:t,modIndex:s,ratio:i,lfoSpeed:a}=e;s!==0&&(this.nodes.carrier=this.audioContext.createOscillator(),this.nodes.carrier.type="sine",this.nodes.carrier.frequency.value=t,this.nodes.modulator=this.audioContext.createOscillator(),this.nodes.modulator.type="sine",this.nodes.modulator.frequency.value=t*i,this.nodes.modGain=this.audioContext.createGain(),this.nodes.modGain.gain.value=s*1e3,this.nodes.gain=this.audioContext.createGain(),this.nodes.gain.gain.value=.2,this.nodes.modulator.connect(this.nodes.modGain),this.nodes.modGain.connect(this.nodes.carrier.frequency),this.nodes.carrier.connect(this.nodes.gain),a>0&&(this.nodes.lfo=this.audioContext.createOscillator(),this.nodes.lfoGain=this.audioContext.createGain(),this.nodes.lfo.frequency.value=a,this.nodes.lfoGain.gain.value=s*500,this.nodes.lfo.connect(this.nodes.lfoGain),this.nodes.lfoGain.connect(this.nodes.modGain.gain),this.nodes.lfo.start()),this.nodes.carrier.start(),this.nodes.modulator.start(),this.isPlaying=!0)}stop(){["carrier","modulator","lfo"].forEach(e=>{if(this.nodes[e])try{this.nodes[e].stop(),this.nodes[e].disconnect()}catch{}}),["modGain","gain","lfoGain"].forEach(e=>{if(this.nodes[e])try{this.nodes[e].disconnect()}catch{}}),Object.keys(this.nodes).forEach(e=>{this.nodes[e]=null}),this.isPlaying=!1}updateParameter(e,t){switch(e){case"carrier":if(this.nodes.carrier&&(this.nodes.carrier.frequency.value=t,this.nodes.modulator)){const s=parseFloat(document.getElementById("fmRatio").value);this.nodes.modulator.frequency.value=t*s}break;case"index":this.nodes.modGain&&(this.nodes.modGain.gain.value=t/100*1e3),this.nodes.lfoGain&&(this.nodes.lfoGain.gain.value=t/100*500);break;case"ratio":this.nodes.modulator&&this.nodes.carrier&&(this.nodes.modulator.frequency.value=this.nodes.carrier.frequency.value*t);break;case"lfo":this.nodes.lfo&&(this.nodes.lfo.frequency.value=t);break}}getOutputNode(){return this.nodes.gain}}class R{constructor(e,t){this.audioContext=e,this.nodes={source:null,gain:null,filter:null},this.isPlaying=!1}start(e){if(this.isPlaying)return;const{type:t,level:s,filterFreq:i}=e;if(s===0)return;this.nodes.source=this.audioContext.createBufferSource(),this.nodes.gain=this.audioContext.createGain(),this.nodes.filter=this.audioContext.createBiquadFilter();const a=this.audioContext.sampleRate*2,n=this.audioContext.createBuffer(1,a,this.audioContext.sampleRate),o=n.getChannelData(0);this.generateNoiseData(o,t),this.nodes.source.buffer=n,this.nodes.source.loop=!0,this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=i,this.nodes.gain.gain.value=s*.3,this.nodes.source.connect(this.nodes.filter),this.nodes.filter.connect(this.nodes.gain),this.nodes.source.start(),this.isPlaying=!0}stop(){if(this.nodes.source)try{this.nodes.source.stop(),this.nodes.source.disconnect()}catch{}if(this.nodes.filter)try{this.nodes.filter.disconnect()}catch{}if(this.nodes.gain)try{this.nodes.gain.disconnect()}catch{}this.nodes.source=null,this.nodes.filter=null,this.nodes.gain=null,this.isPlaying=!1}generateNoiseData(e,t){switch(t){case"white":for(let r=0;r<e.length;r++)e[r]=Math.random()*2-1;break;case"pink":let s=0,i=0,a=0,n=0,o=0,l=0,c=0;for(let r=0;r<e.length;r++){const d=Math.random()*2-1;s=.99886*s+d*.0555179,i=.99332*i+d*.0750759,a=.969*a+d*.153852,n=.8665*n+d*.3104856,o=.55*o+d*.5329522,l=-.7616*l-d*.016898,e[r]=(s+i+a+n+o+l+c+d*.5362)*.11,c=d*.115926}break;case"brown":let h=0;for(let r=0;r<e.length;r++){const d=Math.random()*2-1;e[r]=(h+.02*d)/1.02,h=e[r],e[r]*=3.5}break;case"crackle":for(let r=0;r<e.length;r++)e[r]=Math.random()<.01?(Math.random()*2-1)*.5:0;break}}updateParameter(e,t){switch(e){case"level":this.nodes.gain&&(this.nodes.gain.gain.value=t*.3);break;case"filter":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break}}getOutputNode(){return this.nodes.gain}}class O{constructor(e,t){this.audioContext=e,this.scheduler=null,this.isPlaying=!1,this.masterConnection=null,this.step=0}start(e,t){if(this.isPlaying)return;const{level:s,baseFreq:i,resonance:a,decay:n,speed:o,tempo:l}=e;if(this.masterConnection=t,s===0)return;const c=[1,0,.5,0,1,0,.3,.8,0,.6,0,1,0,.4,0,.7],h=[0,0,12,0,0,7,3,5,0,10,0,0,15,3,0,7],r=6e4/(l*4*o);this.scheduler=setInterval(()=>{const d=this.step%c.length;if(c[d]>0){const g=c[d]*s,m=h[d],f=i*Math.pow(2,m/12);this.triggerAcidNote(f,g,n,a)}this.step++},r),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.step=0,this.isPlaying=!1}triggerAcidNote(e,t,s,i){const a=this.audioContext.currentTime,n=this.audioContext.createOscillator();n.type="sawtooth",n.frequency.value=e;const o=this.audioContext.createBiquadFilter();o.type="lowpass",o.Q.value=i*30;const l=Math.min(e*8,15e3);o.frequency.setValueAtTime(l,a),o.frequency.exponentialRampToValueAtTime(e,a+s);const c=this.audioContext.createGain();c.gain.setValueAtTime(0,a),c.gain.linearRampToValueAtTime(t*.5,a+.01),c.gain.exponentialRampToValueAtTime(.01,a+s);const h=this.audioContext.createWaveShaper(),r=new Float32Array(256);for(let d=0;d<256;d++){const g=(d-128)/128;r[d]=Math.tanh(g*(1+i*4))}h.curve=r,h.oversample="2x",n.connect(o),o.connect(h),h.connect(c),this.masterConnection&&this.masterConnection(c),n.start(a),n.stop(a+s+.1)}updateParameter(e,t){}}class L{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.sourceBuffer=null,this.isPlaying=!1,this.performanceThrottle=1,this.activeGrains=new Set,this.voiceId="granular"}start(e,t){if(this.isPlaying)return;const{density:s,grainSize:i,pitchSpread:a,panSpread:n}=e;if(this.masterNodes=t,s===0)return;const o=this.audioContext.sampleRate*2;this.sourceBuffer=this.audioContext.createBuffer(1,o,this.audioContext.sampleRate);const l=this.sourceBuffer.getChannelData(0);for(let h=0;h<o;h++){const r=h/this.audioContext.sampleRate;l[h]=Math.sin(2*Math.PI*100*r)*.3+Math.sin(2*Math.PI*237*r)*.2+Math.sin(2*Math.PI*523*r)*.1+(Math.random()*2-1)*.1}const c=this.performanceThrottle<.7?100:50;this.scheduler=setInterval(()=>{Math.random()<s*this.performanceThrottle&&this.triggerGrain(i,a,n)},c),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager&&this.activeGrains.forEach(({source:e,gain:t,panner:s})=>{this.poolManager.pools.bufferSource.release(e),this.poolManager.pools.gain.release(t),s.disconnect()}),this.activeGrains.clear(),this.sourceBuffer=null,this.isPlaying=!1}triggerGrain(e,t,s){const i=this.audioContext.currentTime,a=`${this.voiceId}_grain_${Date.now()}_${Math.random()}`;let n,o,l;const c=Math.random()*(this.sourceBuffer.duration-e/1e3),h=Math.pow(2,(Math.random()-.5)*t*2),r=e/1e3;this.poolManager?(n=this.poolManager.pools.bufferSource.acquireBufferSource(a,this.sourceBuffer,{playbackRate:h}),o=this.poolManager.pools.gain.acquireGain(a,0),l=this.audioContext.createStereoPanner()):(n=this.audioContext.createBufferSource(),n.buffer=this.sourceBuffer,n.playbackRate.value=h,o=this.audioContext.createGain(),l=this.audioContext.createStereoPanner()),o.gain.setValueAtTime(0,i),o.gain.linearRampToValueAtTime(.3,i+r*.1),o.gain.setValueAtTime(.3,i+r*.9),o.gain.linearRampToValueAtTime(0,i+r),l.pan.value=(Math.random()-.5)*2*s,n.connect(o),o.connect(l),this.masterNodes&&(l.connect(this.masterNodes.dryGain),l.connect(this.masterNodes.convolver),l.connect(this.masterNodes.delay)),this.activeGrains.add({source:n,gain:o,panner:l,grainId:a}),n.start(i,c,r),setTimeout(()=>{this.poolManager&&(this.poolManager.pools.bufferSource.release(n),this.poolManager.pools.gain.release(o)),l.disconnect(),this.activeGrains.forEach(d=>{d.grainId===a&&this.activeGrains.delete(d)})},r*1e3+100)}updateParameter(e,t){}setPerformanceThrottle(e){this.performanceThrottle=e}}class N{constructor(e,t){this.audioContext=e,this.scheduler=null,this.nodes={delay:null,delayGain:null,filter:null,lastFreq:null},this.isPlaying=!1,this.masterNodes=null}start(e,t){if(this.isPlaying)return;const{density:s,range:i,speed:a,echo:n,portamento:o}=e;if(this.masterNodes=t,s===0)return;this.nodes.delay=this.audioContext.createDelay(2),this.nodes.delay.delayTime.value=.375,this.nodes.delayGain=this.audioContext.createGain(),this.nodes.delayGain.gain.value=n*.7,this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="highpass",this.nodes.filter.frequency.value=200,this.nodes.delay.connect(this.nodes.delayGain),this.nodes.delayGain.connect(this.nodes.delay);const l=[0,2,4,7,9,12,14,16,19,21],c=220,h=6e4/(120*a*2);this.scheduler=setInterval(()=>{if(Math.random()<s){const r=Math.floor(Math.random()*l.length),d=Math.floor(Math.random()*i),g=c*Math.pow(2,(l[r]+d*12)/12);this.triggerNote(g,o)}},h),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),["delay","delayGain","filter"].forEach(e=>{if(this.nodes[e]){try{this.nodes[e].disconnect()}catch{}this.nodes[e]=null}}),this.nodes.lastFreq=null,this.isPlaying=!1}triggerNote(e,t){const s=this.audioContext.currentTime,i=this.audioContext.createOscillator();i.type="sine";const a=this.audioContext.createGain();a.gain.setValueAtTime(0,s),a.gain.linearRampToValueAtTime(.3,s+.05),a.gain.exponentialRampToValueAtTime(.001,s+1.5),this.nodes.lastFreq?(i.frequency.setValueAtTime(this.nodes.lastFreq,s),i.frequency.exponentialRampToValueAtTime(e,s+t/1e3)):i.frequency.value=e,this.nodes.lastFreq=e;const n=this.audioContext.createOscillator(),o=this.audioContext.createGain();n.frequency.value=5,o.gain.value=3,n.connect(o),o.connect(i.frequency),i.connect(a),a.connect(this.nodes.filter),this.masterNodes&&(this.nodes.filter.connect(this.nodes.delay),this.nodes.filter.connect(this.masterNodes.dryGain),this.nodes.delay.connect(this.masterNodes.dryGain)),i.start(s),n.start(s),i.stop(s+2),n.stop(s+2)}updateParameter(e,t){switch(e){case"echo":this.nodes.delayGain&&(this.nodes.delayGain.gain.value=t*.7);break}}}class z{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.masterNodes=null,this.chordIndex=0,this.voiceId="ambientPad",this.activeVoices=new Set}start(e,t){if(this.isPlaying)return;const{density:s,attack:i,release:a,filterSweep:n,shimmer:o}=e;if(this.masterNodes=t,s===0)return;const l=[[0,4,7,11],[2,5,9,12],[4,7,11,14],[5,9,12,16],[7,11,14,17],[9,12,16,19]],c=8e3/s;this.scheduler=setInterval(()=>{const h=l[this.chordIndex%l.length];this.triggerPadChord(h,i,a,n,o),this.chordIndex++},c),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager?this.activeVoices.forEach(({oscillators:e,gains:t,filters:s,shimmerOscs:i,shimmerGains:a})=>{e.forEach(n=>{this.poolManager.pools.oscillator.release(n)}),t.forEach(n=>{this.poolManager.pools.gain.release(n)}),s.forEach(n=>{n.disconnect()}),i.forEach(n=>{this.poolManager.pools.oscillator.release(n)}),a.forEach(n=>{this.poolManager.pools.gain.release(n)})}):this.activeVoices.forEach(({oscillators:e,gains:t,filters:s,shimmerOscs:i,shimmerGains:a})=>{e.forEach(n=>{try{n.stop(),n.disconnect()}catch{}}),t.forEach(n=>{try{n.disconnect()}catch{}}),s.forEach(n=>{try{n.disconnect()}catch{}}),i.forEach(n=>{try{n.stop(),n.disconnect()}catch{}}),a.forEach(n=>{try{n.disconnect()}catch{}})}),this.activeVoices.clear(),this.chordIndex=0,this.isPlaying=!1}triggerPadChord(e,t,s,i,a){const n=this.audioContext.currentTime,o=110,l=`${this.voiceId}_chord_${Date.now()}`,c=[],h=[],r=[],d=[],g=[];e.forEach((p,u)=>{const v=o*Math.pow(2,p/12);for(let M=0;M<3;M++){const E=`${l}_n${u}_v${M}`;let y,C;this.poolManager?(y=this.poolManager.pools.oscillator.acquireOscillator(E,{type:"sawtooth",frequency:v*(1+(M-1)*.01)}),C=this.poolManager.pools.gain.acquireGain(E,0)):(y=this.audioContext.createOscillator(),y.type="sawtooth",y.frequency.value=v*(1+(M-1)*.01),C=this.audioContext.createGain(),C.gain.value=0),C.gain.setValueAtTime(0,n),C.gain.linearRampToValueAtTime(.1/e.length,n+t),C.gain.setValueAtTime(.1/e.length,n+t+2),C.gain.exponentialRampToValueAtTime(.001,n+t+2+s);const B=this.audioContext.createBiquadFilter();if(B.type="lowpass",B.frequency.setValueAtTime(200,n),B.frequency.exponentialRampToValueAtTime(2e3*(1+i),n+t),B.frequency.exponentialRampToValueAtTime(200,n+t+2+s),B.Q.value=3,y.connect(C),C.connect(B),this.masterNodes&&(B.connect(this.masterNodes.dryGain),B.connect(this.masterNodes.convolver)),a>0&&Math.random()<a){const b=`${E}_shimmer`;let T,I;this.poolManager?(T=this.poolManager.pools.oscillator.acquireOscillator(b,{type:"sine",frequency:v*4}),I=this.poolManager.pools.gain.acquireGain(b,.02*a)):(T=this.audioContext.createOscillator(),T.frequency.value=v*4,T.type="sine",I=this.audioContext.createGain(),I.gain.value=.02*a),T.connect(I),this.masterNodes&&I.connect(this.masterNodes.convolver),this.poolManager||(T.start(n+t*.5),T.stop(n+t+2+s)),d.push(T),g.push(I)}this.poolManager||(y.start(n),y.stop(n+t+2+s)),c.push(y),h.push(C),r.push(B)}});const m={voiceGroupId:l,oscillators:c,gains:h,filters:r,shimmerOscs:d,shimmerGains:g};this.activeVoices.add(m);const f=t+2+s;setTimeout(()=>{this.poolManager&&(c.forEach(p=>{this.poolManager.pools.oscillator.release(p)}),h.forEach(p=>{this.poolManager.pools.gain.release(p)}),d.forEach(p=>{this.poolManager.pools.oscillator.release(p)}),g.forEach(p=>{this.poolManager.pools.gain.release(p)})),r.forEach(p=>{p.disconnect()}),this.activeVoices.delete(m)},f*1e3+100)}updateParameter(e,t){}}class ${constructor(e,t){this.audioContext=e,this.scheduler=null,this.isPlaying=!1,this.masterNodes=null,this.noteIndex=0,this.direction=1}start(e,t){if(this.isPlaying)return;const{enable:s,pattern:i,speed:a,octaves:n,gate:o,tempo:l}=e;if(this.masterNodes=t,s===0)return;const c=[0,3,5,7,10],h=6e4/(l*a/4);this.scheduler=setInterval(()=>{if(Math.random()<s){let r=[];for(let m=0;m<n;m++)c.forEach(f=>r.push(f+m*12));let d;switch(i){case"up":d=r[this.noteIndex%r.length],this.noteIndex++;break;case"down":d=r[r.length-1-this.noteIndex%r.length],this.noteIndex++;break;case"updown":this.noteIndex>=r.length-1&&(this.direction=-1),this.noteIndex<=0&&(this.direction=1),d=r[this.noteIndex],this.noteIndex+=this.direction;break;case"random":d=r[Math.floor(Math.random()*r.length)];break}const g=220*Math.pow(2,d/12);this.triggerNote(g,h*o)}},h),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.noteIndex=0,this.direction=1,this.isPlaying=!1}triggerNote(e,t){const s=this.audioContext.currentTime,i=this.audioContext.createOscillator();i.type="square",i.frequency.value=e;const a=this.audioContext.createGain();a.gain.setValueAtTime(0,s),a.gain.linearRampToValueAtTime(.2,s+.01),a.gain.setValueAtTime(.2,s+t/1e3-.01),a.gain.linearRampToValueAtTime(0,s+t/1e3);const n=this.audioContext.createBiquadFilter();n.type="lowpass",n.frequency.value=e*4,n.Q.value=5,i.connect(a),a.connect(n),this.masterNodes&&(n.connect(this.masterNodes.dryGain),n.connect(this.masterNodes.delay)),i.start(s),i.stop(s+t/1e3)}updateParameter(e,t){}}class j{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],gains:[],filter:null,mixer:null},this.scheduler=null,this.isPlaying=!1,this.voiceId="chord",this.currentChordIndex=0,this.progressions={major:[[0,4,7,12],[5,9,12,17],[7,11,14,19],[0,4,7,12]],minor:[[0,3,7,12],[5,8,12,17],[7,10,14,19],[0,3,7,12]],jazz:[[0,4,7,11],[2,5,9,12],[7,11,14,17],[0,4,7,10]],suspended:[[0,5,7,12],[2,7,9,14],[7,12,14,19],[0,5,7,12]]}}start(e,t){var c;if(this.isPlaying)return;const{density:s,progression:i,voicing:a,brightness:n,spread:o}=e;if(this.masterConnection=t,s===0)return;this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=n,this.nodes.filter.Q.value=2,this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.3,this.nodes.filter.connect(this.nodes.mixer),this.masterConnection&&this.masterConnection(this.nodes.mixer);const l=60/parseFloat(((c=document.getElementById("chordTempo"))==null?void 0:c.value)||60)*1e3;this.playChord(e),this.scheduler=setInterval(()=>{this.playChord(e)},l),this.isPlaying=!0}playChord(e){var r;const{progression:t,voicing:s,brightness:i,spread:a}=e,n=parseFloat(((r=document.getElementById("chordRoot"))==null?void 0:r.value)||220);this.stopCurrentChord();const o=this.progressions[t]||this.progressions.major,l=o[this.currentChordIndex%o.length],c={close:[1,1,1,1],open:[.5,1,1,2],drop2:[.5,1,2,1],spread:[.25,.5,1,2]},h=c[s]||c.close;l.forEach((d,g)=>{const m=n*Math.pow(2,d/12)*h[g],f=`${this.voiceId}_osc_${g}`;let p,u;this.poolManager?(p=this.poolManager.pools.oscillator.acquireOscillator(f,{type:"triangle",frequency:m}),u=this.poolManager.pools.gain.acquireGain(f,0)):(p=this.audioContext.createOscillator(),u=this.audioContext.createGain(),p.type="triangle",p.frequency.value=m,u.gain.value=0),p.detune.value=(Math.random()-.5)*a;const v=this.audioContext.currentTime;u.gain.setValueAtTime(0,v),u.gain.linearRampToValueAtTime(.2/l.length,v+.05),u.gain.exponentialRampToValueAtTime(.15/l.length,v+.5),p.connect(u),u.connect(this.nodes.filter),this.poolManager||p.start(),this.nodes.oscillators.push(p),this.nodes.gains.push(u)}),this.currentChordIndex++}stopCurrentChord(){this.poolManager?(this.nodes.oscillators.forEach((e,t)=>{this.poolManager.pools.oscillator.release(e)}),this.nodes.gains.forEach((e,t)=>{this.poolManager.pools.gain.release(e)})):(this.nodes.oscillators.forEach(e=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.gains.forEach(e=>{try{e.disconnect()}catch{}})),this.nodes.oscillators=[],this.nodes.gains=[]}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.stopCurrentChord(),this.nodes.filter&&(this.nodes.filter.disconnect(),this.nodes.filter=null),this.nodes.mixer&&(this.nodes.mixer.disconnect(),this.nodes.mixer=null),this.currentChordIndex=0,this.isPlaying=!1}updateParameter(e,t){switch(e){case"brightness":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break;case"volume":this.nodes.mixer&&(this.nodes.mixer.gain.value=t);break}}getOutputNode(){return this.nodes.mixer}}class H{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],formantFilters:[],gains:[],mixer:null},this.scheduler=null,this.isPlaying=!1,this.voiceId="vocal",this.formants={a:{f1:700,f2:1220,f3:2600},e:{f1:400,f2:2200,f3:2900},i:{f1:300,f2:2700,f3:3300},o:{f1:450,f2:800,f3:2830},u:{f1:325,f2:700,f3:2530},ah:{f1:640,f2:1190,f3:2390},oo:{f1:300,f2:870,f3:2240}},this.consonants={s:{type:"highpass",freq:4e3,Q:5},sh:{type:"bandpass",freq:2500,Q:3},f:{type:"highpass",freq:1200,Q:10},k:{type:"bandpass",freq:1500,Q:20},t:{type:"highpass",freq:3e3,Q:15}}}start(e,t){if(this.isPlaying)return;const{density:s,vowel:i,pitch:a,vibrato:n,whisper:o}=e;this.masterConnection=t,s!==0&&(this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.5,this.masterConnection&&this.masterConnection(this.nodes.mixer),this.scheduler=setInterval(()=>{Math.random()<s&&(Math.random()>o?this.triggerVowel(i,a,n):this.triggerConsonant())},200),this.isPlaying=!0)}triggerVowel(e,t,s){const i=this.audioContext.currentTime,a=.2+Math.random()*.8,n=`${this.voiceId}_vowel_${Date.now()}`,o=this.formants[e]||this.formants.a;let l,c;if(this.poolManager?(l=this.poolManager.pools.oscillator.acquireOscillator(`${n}_fund`,{type:"sawtooth",frequency:t}),c=this.poolManager.pools.gain.acquireGain(`${n}_fund_gain`,0)):(l=this.audioContext.createOscillator(),c=this.audioContext.createGain(),l.type="sawtooth",l.frequency.value=t,c.gain.value=0),s>0){const r=this.audioContext.createOscillator(),d=this.audioContext.createGain();r.frequency.value=4+Math.random()*3,d.gain.value=t*s*.02,r.connect(d),d.connect(l.frequency),r.start(),setTimeout(()=>{r.stop(),r.disconnect(),d.disconnect()},a*1e3)}const h=[];Object.values(o).forEach((r,d)=>{const g=this.audioContext.createBiquadFilter();g.type="bandpass",g.frequency.value=r,g.Q.value=10;const m=this.audioContext.createGain();m.gain.value=d===0?.5:.3/(d+1),l.connect(g),g.connect(m),m.connect(this.nodes.mixer),this.nodes.formantFilters.push(g),h.push(m)}),c.gain.setValueAtTime(0,i),c.gain.linearRampToValueAtTime(.3,i+.01),c.gain.exponentialRampToValueAtTime(.2,i+a*.7),c.gain.exponentialRampToValueAtTime(.001,i+a),l.connect(c),this.poolManager||l.start(),setTimeout(()=>{if(this.poolManager)this.poolManager.pools.oscillator.release(l),this.poolManager.pools.gain.release(c);else try{l.stop(),l.disconnect(),c.disconnect()}catch{}this.nodes.formantFilters.forEach(r=>{r.disconnect()}),h.forEach(r=>{r.disconnect()}),this.nodes.formantFilters=this.nodes.formantFilters.filter(r=>!this.nodes.formantFilters.includes(r))},a*1e3+100)}triggerConsonant(){const e=this.audioContext.currentTime,t=.05+Math.random()*.1,s=this.audioContext.sampleRate*t,i=this.audioContext.createBuffer(1,s,this.audioContext.sampleRate),a=i.getChannelData(0);for(let r=0;r<s;r++)a[r]=Math.random()*2-1;const n=this.audioContext.createBufferSource();n.buffer=i;const o=Object.keys(this.consonants),l=this.consonants[o[Math.floor(Math.random()*o.length)]],c=this.audioContext.createBiquadFilter();c.type=l.type,c.frequency.value=l.freq,c.Q.value=l.Q;const h=this.audioContext.createGain();h.gain.setValueAtTime(0,e),h.gain.linearRampToValueAtTime(.3,e+.005),h.gain.exponentialRampToValueAtTime(.001,e+t),n.connect(c),c.connect(h),h.connect(this.nodes.mixer),n.start(),n.stop(e+t)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.nodes.oscillators.forEach(e=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.formantFilters.forEach(e=>{try{e.disconnect()}catch{}}),this.nodes.gains.forEach(e=>{try{e.disconnect()}catch{}}),this.nodes.mixer&&(this.nodes.mixer.disconnect(),this.nodes.mixer=null),this.nodes.oscillators=[],this.nodes.formantFilters=[],this.nodes.gains=[],this.isPlaying=!1}updateParameter(e,t){switch(e){case"volume":this.nodes.mixer&&(this.nodes.mixer.gain.value=t);break}}}class Q{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.voiceId="karplus",this.activeStrings=new Set}start(e,t){if(this.isPlaying)return;const{density:s,pitch:i,damping:a,brightness:n,pluckHardness:o}=e;this.masterConnection=t,s!==0&&(this.scheduler=setInterval(()=>{if(Math.random()<s){const l=this.getRandomNote(i);this.pluckString(l,a,n,o)}},200),this.isPlaying=!0)}getRandomNote(e){const t=[0,2,4,5,7,9,11],s=2,i=t[Math.floor(Math.random()*t.length)],a=Math.floor(Math.random()*s);return e*Math.pow(2,(i+a*12)/12)}pluckString(e,t,s,i){this.audioContext.currentTime;const a=`${this.voiceId}_string_${Date.now()}_${Math.random()}`,n=1/e,o=this.audioContext.sampleRate,l=Math.round(n*o),c=this.audioContext.createBuffer(1,l,o),h=c.getChannelData(0);for(let u=0;u<l;u++)u<l*i?h[u]=Math.random()*2-1:h[u]=(Math.random()*2-1)*(1-u/l);const r=this.audioContext.createBufferSource();r.buffer=c;const d=this.audioContext.createDelay(1);d.delayTime.value=n;const g=this.audioContext.createBiquadFilter();g.type="lowpass",g.frequency.value=s;const m=this.audioContext.createGain();m.gain.value=t;const f=this.audioContext.createGain();f.gain.value=.5,r.connect(d),d.connect(g),g.connect(m),m.connect(d),d.connect(f),this.masterConnection&&this.masterConnection(f),this.activeStrings.add({stringId:a,nodes:{noise:r,delay:d,lowpass:g,feedback:m,output:f}}),r.start();const p=Math.log(.001)/Math.log(t)*n;setTimeout(()=>{try{r.stop(),r.disconnect(),d.disconnect(),g.disconnect(),m.disconnect(),f.disconnect()}catch{}this.activeStrings.forEach(u=>{u.stringId===a&&this.activeStrings.delete(u)})},p*1e3+1e3)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.activeStrings.forEach(({nodes:e})=>{try{e.noise.stop(),Object.values(e).forEach(t=>{t.disconnect()})}catch{}}),this.activeStrings.clear(),this.isPlaying=!1}updateParameter(e,t){}}class W{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],gains:[],filter:null,mixer:null},this.scheduler=null,this.isPlaying=!1,this.voiceId="additive",this.activeVoices=new Set}start(e,t){if(this.isPlaying)return;const{density:s,fundamental:i,harmonics:a,harmonicDecay:n,inharmonicity:o,brightness:l}=e;this.masterConnection=t,s!==0&&(this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=l,this.nodes.filter.Q.value=1,this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.3,this.nodes.filter.connect(this.nodes.mixer),this.masterConnection&&this.masterConnection(this.nodes.mixer),this.scheduler=setInterval(()=>{Math.random()<s&&this.triggerAdditiveVoice(i,a,n,o)},300),this.isPlaying=!0)}triggerAdditiveVoice(e,t,s,i){const a=this.audioContext.currentTime,n=.5+Math.random()*2,o=`${this.voiceId}_voice_${Date.now()}_${Math.random()}`,l=e*(.5+Math.random()),c=[],h=[];for(let r=0;r<t;r++){const d=r+1,g=Math.pow(1+i*.01,d),m=l*d*g;if(m>1e4)continue;let f,p;const u=`${o}_h${d}`;this.poolManager?(f=this.poolManager.pools.oscillator.acquireOscillator(u,{type:"sine",frequency:m}),p=this.poolManager.pools.gain.acquireGain(u,0)):(f=this.audioContext.createOscillator(),p=this.audioContext.createGain(),f.type="sine",f.frequency.value=m,p.gain.value=0);const v=.5/Math.pow(d,s);p.gain.setValueAtTime(0,a),p.gain.linearRampToValueAtTime(v,a+.01),p.gain.setValueAtTime(v,a+n*.8),p.gain.exponentialRampToValueAtTime(.001,a+n),f.detune.value=(Math.random()-.5)*10*d,f.connect(p),p.connect(this.nodes.filter),this.poolManager||f.start(),c.push(f),h.push(p)}this.activeVoices.add({voiceId:o,oscillators:c,gains:h}),setTimeout(()=>{this.poolManager?(c.forEach((r,d)=>{this.poolManager.pools.oscillator.release(r)}),h.forEach((r,d)=>{this.poolManager.pools.gain.release(r)})):(c.forEach(r=>{try{r.stop(),r.disconnect()}catch{}}),h.forEach(r=>{try{r.disconnect()}catch{}})),this.activeVoices.forEach(r=>{r.voiceId===o&&this.activeVoices.delete(r)})},n*1e3+100)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager?this.activeVoices.forEach(({oscillators:e,gains:t})=>{e.forEach(s=>{this.poolManager.pools.oscillator.release(s)}),t.forEach(s=>{this.poolManager.pools.gain.release(s)})}):this.activeVoices.forEach(({oscillators:e,gains:t})=>{e.forEach(s=>{try{s.stop(),s.disconnect()}catch{}}),t.forEach(s=>{try{s.disconnect()}catch{}})}),this.activeVoices.clear(),this.nodes.filter&&(this.nodes.filter.disconnect(),this.nodes.filter=null),this.nodes.mixer&&(this.nodes.mixer.disconnect(),this.nodes.mixer=null),this.isPlaying=!1}updateParameter(e,t){switch(e){case"brightness":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break}}}class _{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.voiceId="sample",this.activeVoices=new Set,this.sampleBuffers=new Map,this.createBuiltInSamples()}createBuiltInSamples(){const e=this.audioContext.sampleRate,t=e*.5,s=this.audioContext.createBuffer(1,t,e),i=s.getChannelData(0);for(let u=0;u<t;u++){const v=u/e,M=60*Math.exp(-35*v);i[u]=Math.sin(2*Math.PI*M*v)*Math.exp(-10*v),u<100&&(i[u]+=(Math.random()-.5)*.5*(1-u/100))}this.sampleBuffers.set("kick",s);const a=e*.2,n=this.audioContext.createBuffer(1,a,e),o=n.getChannelData(0);for(let u=0;u<a;u++){const v=u/e,M=Math.sin(2*Math.PI*200*v)*.5,E=(Math.random()*2-1)*.5;o[u]=(M+E)*Math.exp(-20*v)}this.sampleBuffers.set("snare",n);const l=e*.1,c=this.audioContext.createBuffer(1,l,e),h=c.getChannelData(0);for(let u=0;u<l;u++){const v=u/e;h[u]=(Math.random()*2-1)*Math.exp(-50*v)}this.sampleBuffers.set("hihat",c);const r=e*.5,d=this.audioContext.createBuffer(1,r,e),g=d.getChannelData(0);for(let u=0;u<r;u++){const v=u/e,M=Math.sin(2*Math.PI*261.63*v),E=Math.sin(2*Math.PI*329.63*v),y=Math.sin(2*Math.PI*392*v),C=Math.sin(2*Math.PI*493.88*v);g[u]=(M+E*.8+y*.6+C*.4)*.25*Math.exp(-2*v)}this.sampleBuffers.set("chord",d);const m=e*1,f=this.audioContext.createBuffer(1,m,e),p=f.getChannelData(0);for(let u=0;u<m;u++){const v=u/e,M=Math.sin(2*Math.PI*55*v),E=Math.sin(2*Math.PI*110*v)*.3,y=Math.sin(2*Math.PI*165*v)*.1;p[u]=(M+E+y)*Math.exp(-1*v)}this.sampleBuffers.set("bass",f)}start(e,t){if(this.isPlaying)return;const{density:s,sample:i,pitch:a,reverse:n,chop:o,scatter:l}=e;if(this.masterConnection=t,s===0)return;const c=200;this.scheduler=setInterval(()=>{if(Math.random()<s){const h=l>0?Math.random()*l*100:0;setTimeout(()=>{this.triggerSample(i,a,n,o)},h)}},c),this.isPlaying=!0}triggerSample(e,t,s,i){const a=this.sampleBuffers.get(e);if(!a)return;const n=this.audioContext.currentTime,o=`${this.voiceId}_${Date.now()}_${Math.random()}`;let l,c;const h=i>0?a.duration*(1-i):a.duration,r=i>0?Math.random()*(a.duration-h):0;this.poolManager?(l=this.poolManager.pools.bufferSource.acquireBufferSource(o,a,{playbackRate:s?-t:t,loop:!1}),c=this.poolManager.pools.gain.acquireGain(o,0)):(l=this.audioContext.createBufferSource(),l.buffer=a,l.playbackRate.value=s?-t:t,c=this.audioContext.createGain(),c.gain.value=0),c.gain.setValueAtTime(0,n),c.gain.linearRampToValueAtTime(.7,n+.001),i>0&&(c.gain.setValueAtTime(.7,n+h-.01),c.gain.linearRampToValueAtTime(0,n+h));const d=this.audioContext.createStereoPanner();d.pan.value=(Math.random()-.5)*.8,l.connect(c),c.connect(d),this.masterConnection&&this.masterConnection(d),this.activeVoices.add({voiceId:o,source:l,gain:c,panner:d}),s?l.start(n,a.duration-r-h,h):l.start(n,r,h);const g=h/Math.abs(t)*1e3+100;setTimeout(()=>{this.poolManager&&(this.poolManager.pools.bufferSource.release(l),this.poolManager.pools.gain.release(c)),d.disconnect(),this.activeVoices.forEach(m=>{m.voiceId===o&&this.activeVoices.delete(m)})},g)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager?this.activeVoices.forEach(({source:e,gain:t,panner:s})=>{this.poolManager.pools.bufferSource.release(e),this.poolManager.pools.gain.release(t),s.disconnect()}):this.activeVoices.forEach(({source:e,gain:t,panner:s})=>{try{e.stop(),e.disconnect(),t.disconnect(),s.disconnect()}catch{}}),this.activeVoices.clear(),this.isPlaying=!1}updateParameter(e,t){}}class U{constructor(e){this.audioContext=e,this.nodes={convolver:null,wetGain:null,dryGain:null,input:null,output:null},this.isInitialized=!1}initialize(e=1){this.isInitialized||(this.nodes.convolver=this.audioContext.createConvolver(),this.nodes.wetGain=this.audioContext.createGain(),this.nodes.dryGain=this.audioContext.createGain(),this.nodes.input=this.audioContext.createGain(),this.nodes.output=this.audioContext.createGain(),this.updateImpulse(e),this.setMix(.3),this.nodes.input.connect(this.nodes.dryGain),this.nodes.input.connect(this.nodes.convolver),this.nodes.convolver.connect(this.nodes.wetGain),this.nodes.dryGain.connect(this.nodes.output),this.nodes.wetGain.connect(this.nodes.output),this.isInitialized=!0)}updateImpulse(e=1){const t=e<.7?1:2,s=S(this.audioContext,t,2);this.nodes.convolver&&(this.nodes.convolver.buffer=s)}setMix(e){const t=Math.max(0,Math.min(1,e));this.nodes.wetGain&&(this.nodes.wetGain.gain.value=t),this.nodes.dryGain&&(this.nodes.dryGain.gain.value=1-t*.5)}connect(e){this.nodes.output&&e&&this.nodes.output.connect(e)}disconnect(){Object.values(this.nodes).forEach(e=>{if(e&&e.disconnect)try{e.disconnect()}catch{}})}getInputNode(){return this.nodes.input}getOutputNode(){return this.nodes.output}getConvolverNode(){return this.nodes.convolver}}class K{constructor(e){this.audioContext=e,this.nodes={delay:null,feedback:null,wetGain:null,dryGain:null,filter:null,input:null,output:null},this.isInitialized=!1}initialize(){this.isInitialized||(this.nodes.delay=this.audioContext.createDelay(2),this.nodes.feedback=this.audioContext.createGain(),this.nodes.wetGain=this.audioContext.createGain(),this.nodes.dryGain=this.audioContext.createGain(),this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=5e3,this.nodes.input=this.audioContext.createGain(),this.nodes.output=this.audioContext.createGain(),this.setDelayTime(.375),this.setFeedback(.4),this.setMix(.3),this.nodes.input.connect(this.nodes.dryGain),this.nodes.input.connect(this.nodes.delay),this.nodes.delay.connect(this.nodes.filter),this.nodes.filter.connect(this.nodes.feedback),this.nodes.feedback.connect(this.nodes.delay),this.nodes.filter.connect(this.nodes.wetGain),this.nodes.dryGain.connect(this.nodes.output),this.nodes.wetGain.connect(this.nodes.output),this.isInitialized=!0)}setDelayTime(e){if(this.nodes.delay){const t=Math.max(0,Math.min(2,e));this.nodes.delay.delayTime.value=t}}setFeedback(e){if(this.nodes.feedback){const t=Math.max(0,Math.min(.95,e));this.nodes.feedback.gain.value=t*.8}}setMix(e){const t=Math.max(0,Math.min(1,e));this.nodes.wetGain&&(this.nodes.wetGain.gain.value=t),this.nodes.dryGain&&(this.nodes.dryGain.gain.value=1)}setFilterFrequency(e){this.nodes.filter&&(this.nodes.filter.frequency.value=e)}syncToTempo(e,t="8d"){const s=60/e;let i;switch(t){case"4":i=s;break;case"8":i=s/2;break;case"8d":i=s*.75;break;case"16":i=s/4;break;case"8t":i=s/3;break;default:i=s*.75}this.setDelayTime(i)}connect(e){this.nodes.output&&e&&this.nodes.output.connect(e)}disconnect(){Object.values(this.nodes).forEach(e=>{if(e&&e.disconnect)try{e.disconnect()}catch{}})}getInputNode(){return this.nodes.input}getOutputNode(){return this.nodes.output}getDelayNode(){return this.nodes.delay}}class J{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.compressor=this.audioContext.createDynamicsCompressor(),this.compressor.threshold.value=-24,this.compressor.knee.value=30,this.compressor.ratio.value=12,this.compressor.attack.value=.003,this.compressor.release.value=.25,this.limiter=this.audioContext.createDynamicsCompressor(),this.limiter.threshold.value=-3,this.limiter.knee.value=0,this.limiter.ratio.value=20,this.limiter.attack.value=.001,this.limiter.release.value=.1,this.makeupGain=this.audioContext.createGain(),this.makeupGain.gain.value=1,this.dryGain=this.audioContext.createGain(),this.wetGain=this.audioContext.createGain(),this.dryGain.gain.value=0,this.wetGain.gain.value=1,this.input.connect(this.dryGain),this.input.connect(this.compressor),this.compressor.connect(this.limiter),this.limiter.connect(this.makeupGain),this.makeupGain.connect(this.wetGain),this.dryGain.connect(this.output),this.wetGain.connect(this.output),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=256,this.makeupGain.connect(this.analyser)}setThreshold(e){const t=-60+e/100*60;this.compressor.threshold.setValueAtTime(t,this.audioContext.currentTime)}setRatio(e){const t=1+e/100*19;this.compressor.ratio.setValueAtTime(t,this.audioContext.currentTime)}setAttack(e){const t=.001+e/100*.999;this.compressor.attack.setValueAtTime(t,this.audioContext.currentTime)}setRelease(e){const t=.01+e/100*1.99;this.compressor.release.setValueAtTime(t,this.audioContext.currentTime)}setKnee(e){const t=e/100*40;this.compressor.knee.setValueAtTime(t,this.audioContext.currentTime)}setMakeupGain(e){const t=e/100*2;this.makeupGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setLimiterThreshold(e){const t=-12+e/100*12;this.limiter.threshold.setValueAtTime(t,this.audioContext.currentTime)}setMix(e){const t=e/100,s=1-t;this.dryGain.gain.setValueAtTime(s,this.audioContext.currentTime),this.wetGain.gain.setValueAtTime(t,this.audioContext.currentTime)}getInputNode(){return this.input}getOutputNode(){return this.output}getReductionAmount(){return this.compressor.reduction}disconnect(){this.input.disconnect(),this.output.disconnect(),this.compressor.disconnect(),this.limiter.disconnect(),this.makeupGain.disconnect(),this.dryGain.disconnect(),this.wetGain.disconnect(),this.analyser.disconnect()}}class X{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.bands={highpass:this.createBand("highpass",80,.7),lowShelf:this.createBand("lowshelf",320,.7),lowMid:this.createBand("peaking",650,.7),mid:this.createBand("peaking",1e3,.7),highMid:this.createBand("peaking",3200,.7),highShelf:this.createBand("highshelf",4800,.7),lowpass:this.createBand("lowpass",12e3,.7)};let t=this.input;Object.values(this.bands).forEach(s=>{t.connect(s.filter),t=s.filter}),t.connect(this.output),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2048,this.output.connect(this.analyser)}createBand(e,t,s){const i=this.audioContext.createBiquadFilter();return i.type=e,i.frequency.value=t,i.Q.value=s,i.gain.value=0,{filter:i,type:e,defaultFreq:t,defaultQ:s}}setHighpass(e){this.bands.highpass.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowShelfGain(e){this.bands.lowShelf.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setLowShelfFreq(e){this.bands.lowShelf.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowMidGain(e){this.bands.lowMid.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setLowMidFreq(e){this.bands.lowMid.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowMidQ(e){this.bands.lowMid.filter.Q.setValueAtTime(e,this.audioContext.currentTime)}setMidGain(e){this.bands.mid.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setMidFreq(e){this.bands.mid.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setMidQ(e){this.bands.mid.filter.Q.setValueAtTime(e,this.audioContext.currentTime)}setHighMidGain(e){this.bands.highMid.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setHighMidFreq(e){this.bands.highMid.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setHighMidQ(e){this.bands.highMid.filter.Q.setValueAtTime(e,this.audioContext.currentTime)}setHighShelfGain(e){this.bands.highShelf.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setHighShelfFreq(e){this.bands.highShelf.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowpass(e){this.bands.lowpass.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}applyPreset(e){switch(e){case"flat":this.resetAllBands();break;case"brighteness":this.setLowShelfGain(-2),this.setMidGain(1),this.setHighMidGain(3),this.setHighShelfGain(4);break;case"warmth":this.setLowShelfGain(3),this.setLowMidGain(2),this.setMidGain(-1),this.setHighShelfGain(-3);break;case"presence":this.setLowMidGain(-2),this.setMidGain(3),this.setHighMidGain(4);break;case"telephone":this.setHighpass(300),this.setLowpass(3400),this.setMidGain(6);break;case"radio":this.setHighpass(100),this.setLowpass(1e4),this.setLowShelfGain(-3),this.setHighShelfGain(-3),this.setMidGain(2);break}}resetAllBands(){Object.values(this.bands).forEach(e=>{(e.type==="peaking"||e.type==="lowshelf"||e.type==="highshelf")&&(e.filter.gain.value=0),e.filter.frequency.value=e.defaultFreq,e.filter.Q.value=e.defaultQ})}getFrequencyResponse(e){const t=new Float32Array(e.length),s=new Float32Array(e.length),i=new Float32Array(e.length),a=new Float32Array(e.length);for(let n=0;n<e.length;n++)t[n]=1,s[n]=0;return Object.values(this.bands).forEach(n=>{n.filter.getFrequencyResponse(e,i,a);for(let o=0;o<e.length;o++)t[o]*=i[o],s[o]+=a[o]}),{magnitude:t,phase:s}}getInputNode(){return this.input}getOutputNode(){return this.output}disconnect(){this.input.disconnect(),this.output.disconnect(),Object.values(this.bands).forEach(e=>{e.filter.disconnect()}),this.analyser.disconnect()}}class Y{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.preGain=this.audioContext.createGain(),this.preGain.gain.value=1,this.waveshaper=this.audioContext.createWaveShaper(),this.waveshaper.oversample="4x",this.postGain=this.audioContext.createGain(),this.postGain.gain.value=.5,this.toneFilter=this.audioContext.createBiquadFilter(),this.toneFilter.type="lowpass",this.toneFilter.frequency.value=3e3,this.toneFilter.Q.value=.7,this.preFilter=this.audioContext.createBiquadFilter(),this.preFilter.type="highpass",this.preFilter.frequency.value=20,this.dryGain=this.audioContext.createGain(),this.wetGain=this.audioContext.createGain(),this.dryGain.gain.value=0,this.wetGain.gain.value=1,this.input.connect(this.dryGain),this.input.connect(this.preFilter),this.preFilter.connect(this.preGain),this.preGain.connect(this.waveshaper),this.waveshaper.connect(this.toneFilter),this.toneFilter.connect(this.postGain),this.postGain.connect(this.wetGain),this.dryGain.connect(this.output),this.wetGain.connect(this.output),this.setDistortionType("soft")}createDistortionCurve(e,t="soft"){const i=new Float32Array(44100);for(let a=0;a<44100;a++){const n=a*2/44100-1;switch(t){case"soft":i[a]=Math.tanh(n*e);break;case"hard":const o=1/e;n>o?i[a]=1:n<-o?i[a]=-1:i[a]=n*e;break;case"fuzz":const l=e*10;i[a]=Math.sign(n)*Math.min(Math.abs(n*l),1),i[a]=Math.sin(i[a]*Math.PI*.5);break;case"bitcrush":const c=Math.max(1,16-e*2),h=2/Math.pow(2,c);i[a]=Math.round(n/h)*h;break;case"fold":let r=n*e;for(;Math.abs(r)>1;)r=Math.sign(r)*(2-Math.abs(r));i[a]=r;break;case"asymmetric":n>0?i[a]=Math.tanh(n*e*.7):i[a]=Math.tanh(n*e*1.3);break;case"warm":const d=e*.7;i[a]=n*(1-Math.abs(n)*d*.25),i[a]=Math.tanh(i[a]*1.5);break}}return i}setDistortionType(e){this.distortionType=e,this.updateCurve()}setDrive(e){this.driveAmount=1+e/100*99,this.updateCurve();const t=1+e/100*4;this.preGain.gain.setValueAtTime(t,this.audioContext.currentTime)}updateCurve(){this.driveAmount&&this.distortionType&&(this.waveshaper.curve=this.createDistortionCurve(this.driveAmount,this.distortionType))}setTone(e){const t=200+e/100*9800;this.toneFilter.frequency.setValueAtTime(t,this.audioContext.currentTime)}setOutput(e){const t=e/100;this.postGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setMix(e){const t=e/100,s=1-t;this.dryGain.gain.setValueAtTime(s,this.audioContext.currentTime),this.wetGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setPreFilterFreq(e){this.preFilter.frequency.setValueAtTime(e,this.audioContext.currentTime)}applyPreset(e){switch(e){case"clean":this.setDistortionType("warm"),this.setDrive(5),this.setTone(80),this.setOutput(90),this.setMix(50);break;case"crunch":this.setDistortionType("soft"),this.setDrive(40),this.setTone(60),this.setOutput(70),this.setMix(80);break;case"lead":this.setDistortionType("asymmetric"),this.setDrive(70),this.setTone(70),this.setOutput(60),this.setMix(90);break;case"fuzz":this.setDistortionType("fuzz"),this.setDrive(80),this.setTone(40),this.setOutput(50),this.setMix(100);break;case"destroyed":this.setDistortionType("hard"),this.setDrive(95),this.setTone(30),this.setOutput(40),this.setMix(100);break}}getInputNode(){return this.input}getOutputNode(){return this.output}disconnect(){this.input.disconnect(),this.output.disconnect(),this.preGain.disconnect(),this.waveshaper.disconnect(),this.postGain.disconnect(),this.toneFilter.disconnect(),this.preFilter.disconnect(),this.dryGain.disconnect(),this.wetGain.disconnect()}}class Z{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.delays=[],this.lfos=[],this.delayGains=[],this.numVoices=3,this.feedbackGain=this.audioContext.createGain(),this.feedbackGain.gain.value=0,this.highpass=this.audioContext.createBiquadFilter(),this.highpass.type="highpass",this.highpass.frequency.value=20,this.dryGain=this.audioContext.createGain(),this.wetGain=this.audioContext.createGain(),this.dryGain.gain.value=.5,this.wetGain.gain.value=.5;for(let t=0;t<this.numVoices;t++){const s=this.audioContext.createDelay(.1);s.delayTime.value=.01+t*.003;const i=this.audioContext.createOscillator();i.type="sine",i.frequency.value=.5+t*.1;const a=this.audioContext.createGain();a.gain.value=.002;const n=this.audioContext.createGain();n.gain.value=1/this.numVoices,i.connect(a),a.connect(s.delayTime),this.delays.push(s),this.lfos.push({osc:i,gain:a}),this.delayGains.push(n),i.start()}this.connectNodes(),this.mode="chorus"}connectNodes(){this.input.connect(this.dryGain),this.input.connect(this.highpass);for(let e=0;e<this.numVoices;e++)this.highpass.connect(this.delays[e]),this.delays[e].connect(this.delayGains[e]),this.delayGains[e].connect(this.wetGain),this.delays[e].connect(this.feedbackGain);this.feedbackGain.connect(this.highpass),this.dryGain.connect(this.output),this.wetGain.connect(this.output)}setMode(e){switch(this.mode=e,e){case"chorus":this.setDelayRange(15,30),this.setModDepth(30),this.setRate(30),this.setFeedback(0),this.setMix(50);break;case"flanger":this.setDelayRange(1,10),this.setModDepth(50),this.setRate(20),this.setFeedback(50),this.setMix(50);break;case"doubler":this.setDelayRange(20,40),this.setModDepth(10),this.setRate(10),this.setFeedback(0),this.setMix(50);break;case"vibrato":this.setDelayRange(5,10),this.setModDepth(80),this.setRate(60),this.setFeedback(0),this.setMix(100);break}}setDelayRange(e,t){const s=e/1e3,i=(t-e)/1e3;for(let a=0;a<this.numVoices;a++){const n=a/this.numVoices*i;this.delays[a].delayTime.setValueAtTime(s+n,this.audioContext.currentTime)}}setRate(e){const t=.1+e/100*9.9;for(let s=0;s<this.numVoices;s++){const i=t*(1+s*.1);this.lfos[s].osc.frequency.setValueAtTime(i,this.audioContext.currentTime)}}setModDepth(e){const t=e/100*.005;for(let s=0;s<this.numVoices;s++)this.lfos[s].gain.gain.setValueAtTime(t,this.audioContext.currentTime)}setFeedback(e){const t=e/100*.9;this.feedbackGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setMix(e){const t=e/100,s=1-t;this.dryGain.gain.setValueAtTime(s,this.audioContext.currentTime),this.wetGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setVoices(e){e=Math.max(1,Math.min(3,e));for(let t=0;t<this.numVoices;t++){const s=t<e?1/e:0;this.delayGains[t].gain.setValueAtTime(s,this.audioContext.currentTime)}}setSpread(e){}getInputNode(){return this.input}getOutputNode(){return this.output}disconnect(){this.input.disconnect(),this.output.disconnect(),this.dryGain.disconnect(),this.wetGain.disconnect(),this.highpass.disconnect(),this.feedbackGain.disconnect();for(let e=0;e<this.numVoices;e++)this.delays[e].disconnect(),this.lfos[e].osc.stop(),this.lfos[e].osc.disconnect(),this.lfos[e].gain.disconnect(),this.delayGains[e].disconnect()}}class ee{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.sidechain=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.duckGain=this.audioContext.createGain(),this.duckGain.gain.value=1,this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=256,this.analyser.smoothingTimeConstant=.3,this.threshold=.5,this.ratio=4,this.attack=.005,this.release=.1,this.knee=.1,this.sidechainFilter=this.audioContext.createBiquadFilter(),this.sidechainFilter.type="lowpass",this.sidechainFilter.frequency.value=200,this.sidechainFilter.Q.value=1,this.input.connect(this.duckGain),this.duckGain.connect(this.output),this.sidechain.connect(this.sidechainFilter),this.sidechainFilter.connect(this.analyser),this.startDucking(),this.lfoMode=!1,this.lfo=null,this.lfoGain=null}startDucking(){const e=this.analyser.frequencyBinCount,t=new Float32Array(e),s=()=>{if(!this.lfoMode){this.analyser.getFloatTimeDomainData(t);let i=0;for(let c=0;c<e;c++)i+=t[c]*t[c];const a=Math.sqrt(i/e),n=this.calculateGain(a),o=this.duckGain.gain.value,l=this.audioContext.currentTime;n<o?(this.duckGain.gain.cancelScheduledValues(l),this.duckGain.gain.setValueAtTime(o,l),this.duckGain.gain.linearRampToValueAtTime(n,l+this.attack)):(this.duckGain.gain.cancelScheduledValues(l),this.duckGain.gain.setValueAtTime(o,l),this.duckGain.gain.linearRampToValueAtTime(n,l+this.release))}this.animationFrame=requestAnimationFrame(s)};s()}calculateGain(e){const t=20*Math.log10(Math.max(1e-5,e)),s=20*Math.log10(this.threshold);let i=0;if(t>s){const a=t-s;if(this.knee>0&&a<this.knee){const n=a/this.knee,o=1+(this.ratio-1)*n*n;i=a*(1-1/o)}else i=a*(1-1/this.ratio)}return Math.pow(10,-i/20)}setThreshold(e){this.threshold=.01+e/100*.99}setRatio(e){this.ratio=1+e/100*19}setAttack(e){this.attack=.001+e/100*.049}setRelease(e){this.release=.01+e/100*.49}setKnee(e){this.knee=e/100}setSidechainFilter(e){this.sidechainFilter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLFOMode(e,t=2){if(this.lfoMode=e,e){if(!this.lfo){this.lfo=this.audioContext.createOscillator(),this.lfo.type="sine",this.lfo.frequency.value=t,this.lfoGain=this.audioContext.createGain(),this.lfoGain.gain.value=.5;const s=this.audioContext.createConstantSource();s.offset.value=.5,this.lfo.connect(this.lfoGain),s.connect(this.duckGain.gain),this.lfoGain.connect(this.duckGain.gain),this.lfo.start(),s.start(),this.lfoOffset=s}}else this.lfo&&(this.lfo.stop(),this.lfo.disconnect(),this.lfoGain.disconnect(),this.lfoOffset.stop(),this.lfoOffset.disconnect(),this.lfo=null,this.lfoGain=null,this.lfoOffset=null,this.duckGain.gain.cancelScheduledValues(this.audioContext.currentTime),this.duckGain.gain.setValueAtTime(1,this.audioContext.currentTime))}setLFORate(e){this.lfo&&this.lfo.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLFODepth(e){if(this.lfoGain){const t=e/100*.5;this.lfoGain.gain.setValueAtTime(t,this.audioContext.currentTime)}}setPumpPattern(e){const s={quarter:2,eighth:4,sixteenth:8,triplet:6};s[e]&&this.setLFORate(s[e])}getInputNode(){return this.input}getSidechainNode(){return this.sidechain}getOutputNode(){return this.output}getCurrentReduction(){const e=this.duckGain.gain.value;return-20*Math.log10(Math.max(1e-5,e))}disconnect(){this.animationFrame&&cancelAnimationFrame(this.animationFrame),this.input.disconnect(),this.output.disconnect(),this.sidechain.disconnect(),this.duckGain.disconnect(),this.analyser.disconnect(),this.sidechainFilter.disconnect(),this.lfo&&(this.lfo.stop(),this.lfo.disconnect(),this.lfoGain.disconnect(),this.lfoOffset.stop(),this.lfoOffset.disconnect())}}class te{constructor(e){this.audioContext=e,this.nodes={input:null,output:null,masterGain:null},this.reverb=new U(e),this.delay=new K(e),this.compressor=new J(e),this.eq=new X(e),this.distortion=new Y(e),this.chorus=new Z(e),this.sidechain=new ee(e),this.effectBypassed={compressor:!1,eq:!1,distortion:!1,chorus:!1,sidechain:!1},this.isInitialized=!1}initialize(e=1){this.isInitialized||(this.nodes.input=this.audioContext.createGain(),this.nodes.masterGain=this.audioContext.createGain(),this.nodes.output=this.nodes.masterGain,this.reverb.initialize(e),this.delay.initialize(),this.nodes.input.connect(this.distortion.getInputNode()),this.distortion.getOutputNode().connect(this.eq.getInputNode()),this.eq.getOutputNode().connect(this.compressor.getInputNode()),this.compressor.getOutputNode().connect(this.chorus.getInputNode()),this.chorus.getOutputNode().connect(this.sidechain.getInputNode()),this.sidechain.getOutputNode().connect(this.reverb.getInputNode()),this.sidechain.getOutputNode().connect(this.delay.getInputNode()),this.reverb.connect(this.nodes.masterGain),this.delay.connect(this.nodes.masterGain),this.distortion.setMix(0),this.eq.applyPreset("flat"),this.compressor.setMix(100),this.chorus.setMix(0),this.sidechain.setLFOMode(!1),this.nodes.masterGain.connect(this.audioContext.destination),this.setMasterVolume(.7),this.isInitialized=!0)}setMasterVolume(e){this.nodes.masterGain&&(this.nodes.masterGain.gain.value=Math.max(0,Math.min(1,e)))}setReverbMix(e){this.reverb.setMix(e)}setDelayTime(e){this.delay.setDelayTime(e)}setDelayFeedback(e){this.delay.setFeedback(e)}setDelayMix(e){this.delay.setMix(e)}updatePerformance(e){this.reverb.updateImpulse(e)}getConnectionNodes(){return{dryGain:this.nodes.input,convolver:this.reverb.getConvolverNode(),delay:this.delay.getDelayNode(),sidechain:this.sidechain.getSidechainNode()}}getInputNode(){return this.nodes.input}setCompressorThreshold(e){this.compressor.setThreshold(e)}setCompressorRatio(e){this.compressor.setRatio(e)}setCompressorAttack(e){this.compressor.setAttack(e)}setCompressorRelease(e){this.compressor.setRelease(e)}setCompressorMakeup(e){this.compressor.setMakeupGain(e)}setEQHighpass(e){this.eq.setHighpass(e)}setEQLowShelf(e){this.eq.setLowShelfGain(e)}setEQMidGain(e){this.eq.setMidGain(e)}setEQHighShelf(e){this.eq.setHighShelfGain(e)}setEQPreset(e){this.eq.applyPreset(e)}setDistortionType(e){this.distortion.setDistortionType(e)}setDistortionDrive(e){this.distortion.setDrive(e)}setDistortionTone(e){this.distortion.setTone(e)}setDistortionMix(e){this.distortion.setMix(e)}setChorusMode(e){this.chorus.setMode(e)}setChorusRate(e){this.chorus.setRate(e)}setChorusDepth(e){this.chorus.setModDepth(e)}setChorusMix(e){this.chorus.setMix(e)}setSidechainThreshold(e){this.sidechain.setThreshold(e)}setSidechainRatio(e){this.sidechain.setRatio(e)}setSidechainPumpMode(e,t){this.sidechain.setLFOMode(e),e&&t&&this.sidechain.setPumpPattern(t)}disconnect(){this.reverb.disconnect(),this.delay.disconnect(),this.compressor.disconnect(),this.eq.disconnect(),this.distortion.disconnect(),this.chorus.disconnect(),this.sidechain.disconnect(),Object.values(this.nodes).forEach(e=>{if(e&&e.disconnect)try{e.disconnect()}catch{}})}}class G{constructor(e,t,s=100){this.audioContext=e,this.createNodeFn=t,this.maxSize=s,this.available=[],this.active=new Map,this.totalCreated=0}acquire(e){let t=this.available.pop();return t||(t=this.createNodeFn(this.audioContext),this.totalCreated++),this.active.set(t,{id:e,acquiredAt:Date.now()}),t}release(e){if(!this.active.has(e)){console.warn("Attempting to release untracked node");return}try{if(e.disconnect(),e.frequency&&e.frequency.cancelScheduledValues(0),e.gain&&e.gain.cancelScheduledValues(0),e.detune&&e.detune.cancelScheduledValues(0),e.stop&&typeof e.stop=="function")try{e.stop()}catch{}}catch(t){console.warn("Error cleaning up node:",t)}this.active.delete(e),this.available.length<this.maxSize&&this.available.push(e)}releaseById(e){const t=[];this.active.forEach((s,i)=>{s.id===e&&t.push(i)}),t.forEach(s=>this.release(s))}cleanupOld(e=3e4){const t=Date.now(),s=[];this.active.forEach((i,a)=>{t-i.acquiredAt>e&&s.push(a)}),s.forEach(i=>this.release(i))}getStats(){return{available:this.available.length,active:this.active.size,totalCreated:this.totalCreated,poolEfficiency:this.totalCreated>0?((this.totalCreated-this.active.size)/this.totalCreated*100).toFixed(1)+"%":"0%"}}clear(){Array.from(this.active.keys()).forEach(t=>this.release(t)),this.available=[]}}class se extends G{constructor(e,t=50){super(e,s=>s.createOscillator(),t)}acquireOscillator(e,t={}){const s=this.acquire(e);t.type&&(s.type=t.type),t.frequency!==void 0&&(s.frequency.value=t.frequency),t.detune!==void 0&&(s.detune.value=t.detune);try{s.start()}catch{}return s}}class ie extends G{constructor(e,t=100){super(e,s=>s.createGain(),t)}acquireGain(e,t=1){const s=this.acquire(e);return s.gain.value=t,s}}class ae extends G{constructor(e,t=30){super(e,s=>s.createBufferSource(),t)}acquireBufferSource(e,t,s={}){const i=this.acquire(e);return i.buffer=t,s.loop!==void 0&&(i.loop=s.loop),s.playbackRate!==void 0&&(i.playbackRate.value=s.playbackRate),s.loopStart!==void 0&&(i.loopStart=s.loopStart),s.loopEnd!==void 0&&(i.loopEnd=s.loopEnd),i}}class ne{constructor(e){this.audioContext=e,this.pools={oscillator:new se(e),gain:new ie(e),bufferSource:new ae(e)},this.cleanupInterval=setInterval(()=>{Object.values(this.pools).forEach(t=>{t.cleanupOld(3e4)})},1e4)}getAllStats(){const e={};return Object.entries(this.pools).forEach(([t,s])=>{e[t]=s.getStats()}),e}destroy(){this.cleanupInterval&&clearInterval(this.cleanupInterval),Object.values(this.pools).forEach(e=>{e.clear()})}}class w{constructor(){this.audioContext=null,this.isPlaying=!1,this.isRecording=!1,this.mediaRecorder=null,this.recordedChunks=[],this.activeVoices=0,this.maxVoices=100,this.performanceThrottle=1,this.performanceMonitor=null,this.masterBus=null,this.poolManager=null,this.generators={},this.groupEnabled={drone:!0,glitch:!0,drums:!0,bleeps:!0,burst:!0,fm:!0,noise:!0,acid:!0,granular:!0,spaceMelody:!0,ambientPad:!0,arpeggiator:!0,chord:!0,vocal:!0,karplus:!0,additive:!0,sample:!0},this.animatedParams=new Map,this.morphState=null,this.morphStartParams=null,this.morphTargetParams=null,this.morphStartTime=null,this.morphing=!1,this.morphTargets=new Map,this.morphStartValues=new Map,this.morphDuration=5e3,this.modulationModes=new Map,this.randomIntervals=new Map,this.lfoControllers=new Map,this.autoModeInterval=null,this.liteMode=!1,this.initializeUI(),this.initializeKeyboardShortcuts();const e=document.getElementById("stopButton");e&&(e.disabled=!0),this.loadSettingsFromURL()}initializeKeyboardShortcuts(){document.addEventListener("keydown",e=>{if(e.target.tagName!=="INPUT")switch(e.key.toLowerCase()){case" ":e.preventDefault(),this.isPlaying?this.stop():this.start();break;case"r":!e.ctrlKey&&!e.metaKey&&(e.preventDefault(),this.randomize());break;case"m":e.preventDefault(),this.startMorph();break;case"a":e.preventDefault(),this.toggleAutoMode();break;case"l":e.preventDefault(),this.toggleLiteMode();break;case"escape":e.preventDefault(),this.isPlaying&&this.stop();break;case"?":case"h":e.preventDefault(),this.showKeyboardHelp();break}})}initializeUI(){const e=(t,s,i)=>{const a=document.getElementById(t);a?a.addEventListener(s,i):console.warn(`Element with id '${t}' not found`)};e("playButton","click",()=>this.start()),e("stopButton","click",()=>this.stop()),e("randomizeButton","click",()=>this.randomize()),e("morphButton","click",()=>this.startMorph()),e("morphTime","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value)}),e("autoChangeTime","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.autoModeInterval&&this.updateAutoModeInterval()}),e("minGroups","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value);const i=document.getElementById("maxGroups");i&&parseInt(i.value)<parseInt(t.target.value)&&(i.value=t.target.value,i.dispatchEvent(new Event("input")))}),e("maxGroups","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value);const i=document.getElementById("minGroups");i&&parseInt(i.value)>parseInt(t.target.value)&&(i.value=t.target.value,i.dispatchEvent(new Event("input")))}),e("recordButton","click",()=>this.toggleRecording()),e("autoButton","click",()=>this.toggleAutoMode()),e("liteButton","click",()=>this.toggleLiteMode()),e("shareButton","click",()=>this.shareSettings()),e("helpButton","click",()=>this.showKeyboardHelp()),document.querySelectorAll(".lfo-button").forEach(t=>{t.addEventListener("click",s=>{const i=s.target.dataset.param;this.toggleLFO(i,s.target)})}),e("masterVolume","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setMasterVolume(parseFloat(t.target.value)/100)}),e("reverb","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setReverbMix(parseFloat(t.target.value)/100)}),e("delayTime","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=parseFloat(t.target.value).toFixed(1)),this.masterBus&&this.masterBus.setDelayTime(parseFloat(t.target.value))}),e("delay","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setDelayMix(parseFloat(t.target.value)/100)}),e("compressorMix","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.compressor.setMix(parseFloat(t.target.value))}),e("compThreshold","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setCompressorThreshold(parseFloat(t.target.value))}),e("compRatio","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setCompressorRatio(parseFloat(t.target.value))}),e("eqPreset","change",t=>{this.masterBus&&this.masterBus.setEQPreset(t.target.value)}),e("eqLow","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setEQLowShelf(parseFloat(t.target.value))}),e("eqMid","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setEQMidGain(parseFloat(t.target.value))}),e("eqHigh","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setEQHighShelf(parseFloat(t.target.value))}),e("distortionMix","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setDistortionMix(parseFloat(t.target.value))}),e("distType","change",t=>{this.masterBus&&this.masterBus.setDistortionType(t.target.value)}),e("distDrive","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setDistortionDrive(parseFloat(t.target.value))}),e("chorusMix","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setChorusMix(parseFloat(t.target.value))}),e("chorusMode","change",t=>{this.masterBus&&this.masterBus.setChorusMode(t.target.value)}),e("chorusRate","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setChorusRate(parseFloat(t.target.value))}),e("sidechainEnable","change",t=>{var s;if(this.masterBus){const i=((s=document.getElementById("sidechainPattern"))==null?void 0:s.value)||"quarter";this.masterBus.setSidechainPumpMode(t.target.checked,i)}}),e("sidechainPattern","change",t=>{var s;this.masterBus&&((s=document.getElementById("sidechainEnable"))!=null&&s.checked)&&this.masterBus.setSidechainPumpMode(!0,t.target.value)}),e("sidechainAmount","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.sidechain.setLFODepth(parseFloat(t.target.value))}),document.querySelectorAll(".group-enable").forEach(t=>{t.addEventListener("change",s=>{let i=s.target.id.replace("Enable","");i!=="arp"&&this.groupEnabled.hasOwnProperty(i)&&(this.groupEnabled[i]=s.target.checked,this.updateGroupState(i,s.target.checked))})}),document.querySelectorAll('input[type="range"], select').forEach(t=>{t.classList.contains("group-enable")||["masterVolume","reverb","delay","delayTime"].includes(t.id)||t.addEventListener("input",s=>{if(t.type==="range"){const i=t.nextElementSibling;if(i&&i.classList.contains("value")){const a=s.target.value;i.textContent=t.step&&parseFloat(t.step)<1?parseFloat(a).toFixed(1):a}}if(this.isPlaying){const i=this.getGroupForParameter(t.id);i&&this.groupEnabled[i]?["bleeps","burst","acid","granular","spaceMelody","ambientPad","arpeggiator","chord","vocal","karplus","additive","sample"].includes(i)?(this.updateGroupState(i,!1),this.updateGroupState(i,!0)):this.updateParameter(t.id,parseFloat(t.value)):this.updateParameter(t.id,parseFloat(t.value))}})}),document.querySelectorAll('input[type="range"]').forEach(t=>{const s=t.nextElementSibling;if(s&&s.classList.contains("value")){const i=t.value;s.textContent=t.step&&parseFloat(t.step)<1?parseFloat(i).toFixed(1):i}})}async start(){this.audioContext||(this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.poolManager=new ne(this.audioContext)),this.isPlaying=!0;const e=document.getElementById("playButton"),t=document.getElementById("stopButton");e&&(e.disabled=!0),t&&(t.disabled=!1),this.setupAudioGraph(),this.initializeGenerators(),this.startGenerators(),this.startAnimations(),this.startPerformanceMonitoring()}stop(){this.isPlaying=!1;const e=document.getElementById("playButton"),t=document.getElementById("stopButton");if(e&&(e.disabled=!1),t&&(t.disabled=!0),this.autoModeInterval){clearInterval(this.autoModeInterval),this.autoModeInterval=null;const i=document.getElementById("autoButton");i&&(i.classList.remove("active"),i.textContent="AUTO")}this.morphing=!1;const s=document.getElementById("morphButton");s&&(s.textContent="MORPH"),Object.values(this.generators).forEach(i=>{i&&i.stop&&i.stop()}),this.animatedParams.forEach((i,a)=>{i.interval&&clearInterval(i.interval),i.frameId&&cancelAnimationFrame(i.frameId)}),this.animatedParams.clear(),this.randomIntervals.forEach(i=>{clearInterval(i)}),this.randomIntervals.clear(),this.modulationModes.clear(),document.querySelectorAll('input[type="range"]').forEach(i=>{i.classList.remove("animated","random-jump","other-mod")}),document.querySelectorAll(".lfo-button").forEach(i=>{i.textContent="MOD",i.classList.remove("active","random","other")}),this.performanceMonitor&&(clearInterval(this.performanceMonitor),this.performanceMonitor=null),this.activityMonitor&&(clearInterval(this.activityMonitor),this.activityMonitor=null),document.querySelectorAll(".activity-indicator").forEach(i=>{i.classList.remove("active")}),document.querySelectorAll(".section").forEach(i=>{i.classList.remove("active")}),this.disconnectAll(),this.poolManager&&console.log("Voice Pool Stats:",this.poolManager.getAllStats())}setupAudioGraph(){var n,o,l,c;this.masterBus=new te(this.audioContext),this.masterBus.initialize(this.performanceThrottle);const e=parseFloat(((n=document.getElementById("masterVolume"))==null?void 0:n.value)||70)/100,t=parseFloat(((o=document.getElementById("reverb"))==null?void 0:o.value)||20)/100,s=parseFloat(((l=document.getElementById("delayTime"))==null?void 0:l.value)||.3),i=.4,a=parseFloat(((c=document.getElementById("delay"))==null?void 0:c.value)||0)/100;this.masterBus.setMasterVolume(e),this.masterBus.setReverbMix(t),this.masterBus.setDelayTime(s),this.masterBus.setDelayFeedback(i),this.masterBus.setDelayMix(a)}initializeGenerators(){this.generators.drone=new P(this.audioContext,this.poolManager),this.generators.drums=new k(this.audioContext,this.poolManager),this.generators.glitch=new V(this.audioContext,this.poolManager),this.generators.bleeps=new q(this.audioContext,this.poolManager),this.generators.burst=new A(this.audioContext,this.poolManager),this.generators.fm=new D(this.audioContext,this.poolManager),this.generators.noise=new R(this.audioContext,this.poolManager),this.generators.acid=new O(this.audioContext,this.poolManager),this.generators.granular=new L(this.audioContext,this.poolManager),this.generators.spaceMelody=new N(this.audioContext,this.poolManager),this.generators.ambientPad=new z(this.audioContext,this.poolManager),this.generators.arpeggiator=new $(this.audioContext,this.poolManager),this.generators.chord=new j(this.audioContext,this.poolManager),this.generators.vocal=new H(this.audioContext,this.poolManager),this.generators.karplus=new Q(this.audioContext,this.poolManager),this.generators.additive=new W(this.audioContext,this.poolManager),this.generators.sample=new _(this.audioContext,this.poolManager)}startGenerators(){if(this.groupEnabled.drone){const e={frequency:parseFloat(document.getElementById("droneFreq").value),detune:parseFloat(document.getElementById("droneDetune").value),voices:parseInt(document.getElementById("droneVoices").value),filterFreq:parseFloat(document.getElementById("droneFilter").value)};this.generators.drone.start(e);const t=this.generators.drone.getOutputNode();t&&this.connectToMaster(t)}if(this.groupEnabled.drums){const e={pattern:document.getElementById("drumPattern").value,tempo:parseInt(document.getElementById("drumTempo").value),density:parseFloat(document.getElementById("drumDensity").value)/100,variation:parseFloat(document.getElementById("drumVariation").value)/100,swing:parseFloat(document.getElementById("drumSwing").value)/100,snareRush:parseFloat(document.getElementById("snareRush").value)/100,ghostNotes:parseFloat(document.getElementById("ghostNotes").value)/100,hihatSpeed:parseInt(document.getElementById("hihatSpeed").value)};this.generators.drums.start(e,this.masterBus.getConnectionNodes())}if(this.groupEnabled.glitch){const e={intensity:parseFloat(document.getElementById("glitchIntensity").value)/100,rate:parseFloat(document.getElementById("glitchRate").value),bitCrush:parseInt(document.getElementById("bitCrush").value)};this.generators.glitch.start(e);const t=this.generators.glitch.getOutputNode();t&&this.connectToMaster(t)}if(this.groupEnabled.bleeps){const e={density:parseFloat(document.getElementById("bleepDensity").value)/100,range:parseFloat(document.getElementById("bleepRange").value),duration:parseFloat(document.getElementById("bleepDuration").value)};this.generators.bleeps.start(e,t=>this.connectToMaster(t))}if(this.groupEnabled.burst){const e={activity:parseFloat(document.getElementById("burstActivity").value)/100,complexity:parseInt(document.getElementById("burstComplexity").value),speed:parseFloat(document.getElementById("burstSpeed").value)};this.generators.burst.start(e,t=>this.connectToMaster(t))}if(this.groupEnabled.fm){const e={carrierFreq:parseFloat(document.getElementById("fmCarrier").value),modIndex:parseFloat(document.getElementById("fmIndex").value)/100,ratio:parseFloat(document.getElementById("fmRatio").value),lfoSpeed:parseFloat(document.getElementById("fmLFO").value)};this.generators.fm.start(e);const t=this.generators.fm.getOutputNode();t&&this.connectToMaster(t)}if(this.groupEnabled.noise){const e={type:document.getElementById("noiseType").value,level:parseFloat(document.getElementById("noiseLevel").value)/100,filterFreq:parseFloat(document.getElementById("noiseFilter").value)};this.generators.noise.start(e);const t=this.generators.noise.getOutputNode();t&&this.connectToMaster(t)}if(this.groupEnabled.acid){const e={level:parseFloat(document.getElementById("acidLevel").value)/100,baseFreq:parseFloat(document.getElementById("acidFreq").value),resonance:parseFloat(document.getElementById("acidResonance").value)/100,decay:parseFloat(document.getElementById("acidDecay").value),speed:parseFloat(document.getElementById("acidSpeed").value),tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.acid.start(e,t=>this.connectToMaster(t))}if(this.groupEnabled.granular){const e={density:parseFloat(document.getElementById("grainDensity").value)/100,grainSize:parseFloat(document.getElementById("grainSize").value),pitchSpread:parseFloat(document.getElementById("grainPitch").value)/100,panSpread:parseFloat(document.getElementById("grainPan").value)/100};this.generators.granular.start(e,this.masterBus.getConnectionNodes())}if(this.groupEnabled.spaceMelody){const e={density:parseFloat(document.getElementById("spaceMelodyDensity").value)/100,range:parseInt(document.getElementById("spaceMelodyRange").value),speed:parseFloat(document.getElementById("spaceMelodySpeed").value),echo:parseFloat(document.getElementById("spaceMelodyEcho").value)/100,portamento:parseFloat(document.getElementById("spaceMelodyPortamento").value)};this.generators.spaceMelody.start(e,this.masterBus.getConnectionNodes())}if(this.groupEnabled.ambientPad){const e={density:parseFloat(document.getElementById("padDensity").value)/100,attack:parseFloat(document.getElementById("padAttack").value),release:parseFloat(document.getElementById("padRelease").value),filterSweep:parseFloat(document.getElementById("padFilterSweep").value)/100,shimmer:parseFloat(document.getElementById("padShimmer").value)/100};this.generators.ambientPad.start(e,this.masterBus.getConnectionNodes())}if(this.groupEnabled.arpeggiator){const e={enable:parseFloat(document.getElementById("arpEnable").value)/100,pattern:document.getElementById("arpPattern").value,speed:parseInt(document.getElementById("arpSpeed").value),octaves:parseInt(document.getElementById("arpOctaves").value),gate:parseFloat(document.getElementById("arpGate").value)/100,tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.arpeggiator.start(e,this.masterBus.getConnectionNodes())}if(this.groupEnabled.chord){const e={density:parseFloat(document.getElementById("chordDensity").value)/100,progression:document.getElementById("chordProgression").value,voicing:document.getElementById("chordVoicing").value,brightness:parseFloat(document.getElementById("chordBrightness").value),spread:parseFloat(document.getElementById("chordSpread").value)};this.generators.chord.start(e,t=>this.connectToMaster(t))}if(this.groupEnabled.vocal){const e={density:parseFloat(document.getElementById("vocalDensity").value)/100,vowel:document.getElementById("vocalVowel").value,pitch:parseFloat(document.getElementById("vocalPitch").value),vibrato:parseFloat(document.getElementById("vocalVibrato").value)/100,whisper:parseFloat(document.getElementById("vocalWhisper").value)/100};this.generators.vocal.start(e,t=>this.connectToMaster(t))}if(this.groupEnabled.karplus){const e={density:parseFloat(document.getElementById("karplusDensity").value)/100,pitch:parseFloat(document.getElementById("karplusPitch").value),damping:parseFloat(document.getElementById("karplusDamping").value),brightness:parseFloat(document.getElementById("karplusBrightness").value),pluckHardness:parseFloat(document.getElementById("karplusPluck").value)/100};this.generators.karplus.start(e,t=>this.connectToMaster(t))}if(this.groupEnabled.additive){const e={density:parseFloat(document.getElementById("additiveDensity").value)/100,fundamental:parseFloat(document.getElementById("additiveFundamental").value),harmonics:parseInt(document.getElementById("additiveHarmonics").value),harmonicDecay:parseFloat(document.getElementById("additiveDecay").value),inharmonicity:parseFloat(document.getElementById("additiveInharmonicity").value),brightness:parseFloat(document.getElementById("additiveBrightness").value)};this.generators.additive.start(e,t=>this.connectToMaster(t))}if(this.groupEnabled.sample){const e={density:parseFloat(document.getElementById("sampleDensity").value)/100,sample:document.getElementById("sampleSelect").value,pitch:parseFloat(document.getElementById("samplePitch").value),reverse:parseFloat(document.getElementById("sampleReverse").value)/100>.5,chop:parseFloat(document.getElementById("sampleChop").value)/100,scatter:parseFloat(document.getElementById("sampleScatter").value)/100};this.generators.sample.start(e,t=>this.connectToMaster(t))}}connectToMaster(e){if(e&&this.masterBus){const t=this.masterBus.getConnectionNodes();e.connect(t.dryGain),e.connect(t.convolver),e.connect(t.delay)}}updateGroupState(e,t){if(this.isPlaying&&(this.generators[e]&&this.generators[e].stop&&this.generators[e].stop(),t&&this.isPlaying))switch(e){case"drone":const s={frequency:parseFloat(document.getElementById("droneFreq").value),detune:parseFloat(document.getElementById("droneDetune").value),voices:parseInt(document.getElementById("droneVoices").value),filterFreq:parseFloat(document.getElementById("droneFilter").value)};this.generators.drone.start(s);const i=this.generators.drone.getOutputNode();i&&this.connectToMaster(i);break;case"drums":const a={pattern:document.getElementById("drumPattern").value,tempo:parseInt(document.getElementById("drumTempo").value),density:parseFloat(document.getElementById("drumDensity").value)/100,variation:parseFloat(document.getElementById("drumVariation").value)/100,swing:parseFloat(document.getElementById("drumSwing").value)/100,snareRush:parseFloat(document.getElementById("snareRush").value)/100,ghostNotes:parseFloat(document.getElementById("ghostNotes").value)/100,hihatSpeed:parseInt(document.getElementById("hihatSpeed").value)};this.generators.drums.start(a,this.masterBus.getConnectionNodes());break;case"glitch":const n={intensity:parseFloat(document.getElementById("glitchIntensity").value)/100,rate:parseFloat(document.getElementById("glitchRate").value),bitCrush:parseInt(document.getElementById("bitCrush").value)};this.generators.glitch.start(n);const o=this.generators.glitch.getOutputNode();o&&this.connectToMaster(o);break;case"bleeps":const l={density:parseFloat(document.getElementById("bleepDensity").value)/100,range:parseFloat(document.getElementById("bleepRange").value),duration:parseFloat(document.getElementById("bleepDuration").value)};this.generators.bleeps.start(l,b=>this.connectToMaster(b));break;case"burst":const c={activity:parseFloat(document.getElementById("burstActivity").value)/100,complexity:parseInt(document.getElementById("burstComplexity").value),speed:parseFloat(document.getElementById("burstSpeed").value)};this.generators.burst.start(c,b=>this.connectToMaster(b));break;case"fm":const h={carrierFreq:parseFloat(document.getElementById("fmCarrier").value),modIndex:parseFloat(document.getElementById("fmIndex").value)/100,ratio:parseFloat(document.getElementById("fmRatio").value),lfoSpeed:parseFloat(document.getElementById("fmLFO").value)};this.generators.fm.start(h);const r=this.generators.fm.getOutputNode();r&&this.connectToMaster(r);break;case"noise":const d={type:document.getElementById("noiseType").value,level:parseFloat(document.getElementById("noiseLevel").value)/100,filterFreq:parseFloat(document.getElementById("noiseFilter").value)};this.generators.noise.start(d);const g=this.generators.noise.getOutputNode();g&&this.connectToMaster(g);break;case"acid":const m={level:parseFloat(document.getElementById("acidLevel").value)/100,baseFreq:parseFloat(document.getElementById("acidFreq").value),resonance:parseFloat(document.getElementById("acidResonance").value)/100,decay:parseFloat(document.getElementById("acidDecay").value),speed:parseFloat(document.getElementById("acidSpeed").value),tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.acid.start(m,b=>this.connectToMaster(b));break;case"granular":const f={density:parseFloat(document.getElementById("grainDensity").value)/100,grainSize:parseFloat(document.getElementById("grainSize").value),pitchSpread:parseFloat(document.getElementById("grainPitch").value)/100,panSpread:parseFloat(document.getElementById("grainPan").value)/100};this.generators.granular.start(f,this.masterBus.getConnectionNodes());break;case"spaceMelody":const p={density:parseFloat(document.getElementById("spaceMelodyDensity").value)/100,range:parseInt(document.getElementById("spaceMelodyRange").value),speed:parseFloat(document.getElementById("spaceMelodySpeed").value),echo:parseFloat(document.getElementById("spaceMelodyEcho").value)/100,portamento:parseFloat(document.getElementById("spaceMelodyPortamento").value)};this.generators.spaceMelody.start(p,this.masterBus.getConnectionNodes());break;case"ambientPad":const u={density:parseFloat(document.getElementById("padDensity").value)/100,attack:parseFloat(document.getElementById("padAttack").value),release:parseFloat(document.getElementById("padRelease").value),filterSweep:parseFloat(document.getElementById("padFilterSweep").value)/100,shimmer:parseFloat(document.getElementById("padShimmer").value)/100};this.generators.ambientPad.start(u,this.masterBus.getConnectionNodes());break;case"arpeggiator":const v={enable:parseFloat(document.getElementById("arpEnable").value)/100,pattern:document.getElementById("arpPattern").value,speed:parseInt(document.getElementById("arpSpeed").value),octaves:parseInt(document.getElementById("arpOctaves").value),gate:parseFloat(document.getElementById("arpGate").value)/100,tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.arpeggiator.start(v,this.masterBus.getConnectionNodes());break;case"chord":const M={density:parseFloat(document.getElementById("chordDensity").value)/100,progression:document.getElementById("chordProgression").value,voicing:document.getElementById("chordVoicing").value,brightness:parseFloat(document.getElementById("chordBrightness").value),spread:parseFloat(document.getElementById("chordSpread").value)};this.generators.chord.start(M,b=>this.connectToMaster(b));break;case"vocal":const E={density:parseFloat(document.getElementById("vocalDensity").value)/100,vowel:document.getElementById("vocalVowel").value,pitch:parseFloat(document.getElementById("vocalPitch").value),vibrato:parseFloat(document.getElementById("vocalVibrato").value)/100,whisper:parseFloat(document.getElementById("vocalWhisper").value)/100};this.generators.vocal.start(E,b=>this.connectToMaster(b));break;case"karplus":const y={density:parseFloat(document.getElementById("karplusDensity").value)/100,pitch:parseFloat(document.getElementById("karplusPitch").value),damping:parseFloat(document.getElementById("karplusDamping").value),brightness:parseFloat(document.getElementById("karplusBrightness").value),pluckHardness:parseFloat(document.getElementById("karplusPluck").value)/100};this.generators.karplus.start(y,b=>this.connectToMaster(b));break;case"additive":const C={density:parseFloat(document.getElementById("additiveDensity").value)/100,fundamental:parseFloat(document.getElementById("additiveFundamental").value),harmonics:parseInt(document.getElementById("additiveHarmonics").value),harmonicDecay:parseFloat(document.getElementById("additiveDecay").value),inharmonicity:parseFloat(document.getElementById("additiveInharmonicity").value),brightness:parseFloat(document.getElementById("additiveBrightness").value)};this.generators.additive.start(C,b=>this.connectToMaster(b));break;case"sample":const B={density:parseFloat(document.getElementById("sampleDensity").value)/100,sample:document.getElementById("sampleSelect").value,pitch:parseFloat(document.getElementById("samplePitch").value),reverse:parseFloat(document.getElementById("sampleReverse").value)/100>.5,chop:parseFloat(document.getElementById("sampleChop").value)/100,scatter:parseFloat(document.getElementById("sampleScatter").value)/100};this.generators.sample.start(B,b=>this.connectToMaster(b));break}}updateParameter(e,t){if(e.startsWith("drone")){if(this.generators.drone&&this.generators.drone.updateParameter){const s=e.replace("drone","").toLowerCase();this.generators.drone.updateParameter(s,t)}}else if(e==="bitCrush")this.generators.glitch&&this.generators.glitch.updateParameter&&this.generators.glitch.updateParameter("bitcrush",t);else if(e==="glitchIntensity")this.generators.glitch&&this.generators.glitch.updateParameter&&this.generators.glitch.updateParameter("intensity",t);else if(e.startsWith("fm")){if(this.generators.fm&&this.generators.fm.updateParameter){const s=e.replace("fm","").toLowerCase();this.generators.fm.updateParameter(s,t)}}else if(e.startsWith("noise")){if(this.generators.noise&&this.generators.noise.updateParameter){const s=e.replace("noise","").toLowerCase();this.generators.noise.updateParameter(s,t)}}else e==="spaceMelodyEcho"&&this.generators.spaceMelody&&this.generators.spaceMelody.updateParameter&&this.generators.spaceMelody.updateParameter("echo",t/100)}disconnectAll(){this.masterBus&&this.masterBus.disconnect()}startAnimations(){this.animatedParams.forEach((e,t)=>{this.animateParameter(t,e)})}setParameterAnimation(e,t){if(t==="none"){const s=this.animatedParams.get(e);s&&s.interval&&clearInterval(s.interval),this.animatedParams.delete(e)}else this.animatedParams.set(e,{mode:t,phase:0}),this.isPlaying&&this.animateParameter(e,this.animatedParams.get(e))}animateParameter(e,t){const s=document.getElementById(e);if(!s)return;const i=parseFloat(s.min),n=parseFloat(s.max)-i;t.interval&&clearInterval(t.interval),t.interval=setInterval(()=>{let o;switch(t.mode){case"lfo":t.phase+=.02,o=i+(Math.sin(t.phase)*.5+.5)*n;break;case"random":if(Math.random()<.1)o=i+Math.random()*n;else return;break;case"drift":const l=i+Math.random()*n,c=parseFloat(s.value);o=c+(l-c)*.05;break}o!==void 0&&(s.value=o,s.dispatchEvent(new Event("input")))},50)}getGroupForParameter(e){return e.startsWith("drone")?"drone":e.startsWith("glitch")||e==="bitCrush"?"glitch":e.startsWith("drum")||e.includes("snare")||e.includes("ghost")||e.includes("hihat")?"drums":e.startsWith("bleep")?"bleeps":e.startsWith("burst")?"burst":e.startsWith("fm")?"fm":e.startsWith("noise")?"noise":e.startsWith("acid")?"acid":e.startsWith("grain")?"granular":e.startsWith("spaceMelody")?"spaceMelody":e.startsWith("pad")?"ambientPad":e.startsWith("arp")&&e!=="arpEnable"?"arpeggiator":e.startsWith("chord")?"chord":e.startsWith("vocal")?"vocal":e.startsWith("karplus")?"karplus":e.startsWith("additive")?"additive":e.startsWith("sample")?"sample":null}randomize(){var M,E;[{id:"reverb",min:0,max:100},{id:"delay",min:0,max:100},{id:"delayTime",min:.1,max:1},{id:"droneFreq",min:50,max:500},{id:"droneDetune",min:0,max:50},{id:"droneVoices",min:1,max:8},{id:"droneFilter",min:100,max:5e3},{id:"droneLFO",min:0,max:10},{id:"glitchIntensity",min:0,max:30},{id:"glitchRate",min:.1,max:10},{id:"bitCrush",min:4,max:16},{id:"drumTempo",min:80,max:140},{id:"drumDensity",min:20,max:80},{id:"drumVariation",min:0,max:50},{id:"drumSwing",min:0,max:50},{id:"snareRush",min:0,max:30},{id:"ghostNotes",min:0,max:30},{id:"hihatSpeed",min:1,max:4},{id:"bleepDensity",min:0,max:20},{id:"bleepRange",min:500,max:5e3},{id:"bleepDuration",min:.01,max:.2},{id:"burstActivity",min:0,max:30},{id:"burstComplexity",min:1,max:5},{id:"burstSpeed",min:.5,max:5},{id:"fmCarrier",min:100,max:500},{id:"fmIndex",min:0,max:30},{id:"fmRatio",min:.5,max:5},{id:"fmLFO",min:0,max:10},{id:"noiseLevel",min:0,max:20},{id:"noiseFilter",min:500,max:5e3},{id:"acidLevel",min:0,max:50},{id:"acidFreq",min:80,max:300},{id:"acidResonance",min:20,max:80},{id:"acidDecay",min:.2,max:1},{id:"acidSpeed",min:.5,max:2},{id:"grainDensity",min:0,max:30},{id:"grainSize",min:20,max:200},{id:"grainPitch",min:0,max:50},{id:"grainPan",min:0,max:50},{id:"spaceMelodyDensity",min:0,max:30},{id:"spaceMelodyRange",min:1,max:3},{id:"spaceMelodySpeed",min:.5,max:2},{id:"spaceMelodyEcho",min:0,max:50},{id:"spaceMelodyPortamento",min:0,max:200},{id:"padDensity",min:0,max:30},{id:"padAttack",min:1,max:5},{id:"padRelease",min:1,max:5},{id:"padFilterSweep",min:0,max:50},{id:"padShimmer",min:0,max:50},{id:"arpEnable",min:0,max:30},{id:"arpSpeed",min:2,max:12},{id:"arpOctaves",min:1,max:3},{id:"arpGate",min:30,max:70},{id:"chordDensity",min:0,max:30},{id:"chordRoot",min:140,max:280},{id:"chordTempo",min:40,max:100},{id:"chordBrightness",min:500,max:3e3},{id:"chordSpread",min:0,max:30},{id:"vocalDensity",min:0,max:20},{id:"vocalPitch",min:150,max:300},{id:"vocalVibrato",min:0,max:50},{id:"vocalWhisper",min:0,max:50},{id:"karplusDensity",min:0,max:25},{id:"karplusPitch",min:150,max:500},{id:"karplusDamping",min:.9,max:.99},{id:"karplusBrightness",min:2e3,max:8e3},{id:"karplusPluck",min:20,max:80},{id:"additiveDensity",min:0,max:25},{id:"additiveFundamental",min:100,max:400},{id:"additiveHarmonics",min:3,max:12},{id:"additiveDecay",min:1,max:2},{id:"additiveInharmonicity",min:0,max:5},{id:"additiveBrightness",min:1e3,max:5e3},{id:"sampleDensity",min:0,max:30},{id:"samplePitch",min:.5,max:2},{id:"sampleReverse",min:0,max:50},{id:"sampleChop",min:0,max:50},{id:"sampleScatter",min:0,max:50},{id:"compressorMix",min:50,max:100},{id:"compThreshold",min:20,max:60},{id:"compRatio",min:30,max:80},{id:"eqLow",min:-6,max:6},{id:"eqMid",min:-6,max:6},{id:"eqHigh",min:-6,max:6},{id:"distortionMix",min:0,max:30},{id:"distDrive",min:10,max:70},{id:"chorusMix",min:0,max:40},{id:"chorusRate",min:10,max:50},{id:"sidechainAmount",min:20,max:80}].forEach(y=>{const C=document.getElementById(y.id);if(C){const B=this.getGroupForParameter(y.id);let b;B&&!this.groupEnabled[B]?y.id.includes("Density")||y.id.includes("Level")||y.id.includes("Activity")||y.id==="arpEnable"?b=y.min+(y.max-y.min)*.3:b=Math.random()*(y.max-y.min)+y.min:y.id==="drumDensity"?b=y.min+Math.pow(Math.random(),.7)*(y.max-y.min):y.id.includes("Density")||y.id.includes("Intensity")||y.id.includes("Level")||y.id.includes("Enable")||y.id.includes("Activity")||y.id.includes("Rush")||y.id.includes("Ghost")?b=y.min+(1-Math.pow(Math.random(),3))*(y.max-y.min):b=Math.random()*(y.max-y.min)+y.min,C.value=b,C.dispatchEvent(new Event("input"))}});const t=["techno","breakbeat","jungle","idm","gabber","trap"],s=document.getElementById("drumPattern");s&&(s.value=t[Math.floor(Math.random()*t.length)],s.dispatchEvent(new Event("change")));const i=["white","pink","brown","crackle"],a=document.getElementById("noiseType");a&&(a.value=i[Math.floor(Math.random()*i.length)],a.dispatchEvent(new Event("change")));const n=["up","down","updown","random"],o=document.getElementById("arpPattern");o&&(o.value=n[Math.floor(Math.random()*n.length)],o.dispatchEvent(new Event("change")));const l=["major","minor","jazz","suspended"],c=document.getElementById("chordProgression");c&&(c.value=l[Math.floor(Math.random()*l.length)],c.dispatchEvent(new Event("change")));const h=["close","open","drop2","spread"],r=document.getElementById("chordVoicing");r&&(r.value=h[Math.floor(Math.random()*h.length)],r.dispatchEvent(new Event("change")));const d=["a","e","i","o","u","ah","oo"],g=document.getElementById("vocalVowel");g&&(g.value=d[Math.floor(Math.random()*d.length)],g.dispatchEvent(new Event("change"))),document.querySelectorAll(".lfo-button").forEach(y=>{(Math.random()<.2&&!y.classList.contains("active")||Math.random()<.8&&y.classList.contains("active"))&&y.click()});const m=parseInt(((M=document.getElementById("minGroups"))==null?void 0:M.value)||3),f=parseInt(((E=document.getElementById("maxGroups"))==null?void 0:E.value)||8),p=m+Math.floor(Math.random()*(f-m+1));[...Array.from(document.querySelectorAll(".group-enable")).filter(y=>y.id!=="arpEnable"&&y.id!=="sidechainEnable")].sort(()=>Math.random()-.5).forEach((y,C)=>{const B=C<p;y.checked!==B&&(y.checked=B,y.dispatchEvent(new Event("change")))})}startMorph(){if(this.morphing){this.morphing=!1;return}this.morphStartValues=new Map,[...document.querySelectorAll('input[type="range"]')].filter(t=>t.id!=="masterVolume").forEach(t=>{this.morphStartValues.set(t.id,parseFloat(t.value))}),this.generateMorphTargets(),this.morphDuration=parseFloat(document.getElementById("morphTime").value)*1e3,this.morphing=!0,this.morphStartTime=Date.now(),document.getElementById("morphButton").textContent="STOP MORPH",this.animateMorph()}generateMorphTargets(){var l,c;if(this.morphTargets=new Map,[{id:"reverb",min:0,max:100,group:"master"},{id:"delay",min:0,max:100,group:"master"},{id:"delayTime",min:.1,max:1,group:"master"},{id:"droneFreq",min:50,max:500,group:"drone"},{id:"droneDetune",min:0,max:50,group:"drone"},{id:"droneVoices",min:1,max:4,group:"drone"},{id:"droneFilter",min:100,max:5e3,group:"drone"},{id:"droneLFO",min:0,max:10,group:"drone"},{id:"glitchIntensity",min:0,max:30,group:"glitch"},{id:"glitchRate",min:.1,max:10,group:"glitch"},{id:"bitCrush",min:4,max:16,group:"glitch"},{id:"drumTempo",min:80,max:140,group:"drums"},{id:"drumDensity",min:20,max:80,group:"drums"},{id:"drumVariation",min:0,max:50,group:"drums"},{id:"drumSwing",min:0,max:50,group:"drums"},{id:"snareRush",min:0,max:30,group:"drums"},{id:"ghostNotes",min:0,max:30,group:"drums"},{id:"hihatSpeed",min:1,max:4,group:"drums"},{id:"bleepDensity",min:0,max:20,group:"bleeps"},{id:"bleepRange",min:500,max:5e3,group:"bleeps"},{id:"bleepDuration",min:.01,max:.2,group:"bleeps"},{id:"burstActivity",min:0,max:30,group:"burst"},{id:"burstComplexity",min:1,max:5,group:"burst"},{id:"burstSpeed",min:.5,max:5,group:"burst"},{id:"fmCarrier",min:100,max:500,group:"fm"},{id:"fmIndex",min:0,max:30,group:"fm"},{id:"fmRatio",min:.5,max:5,group:"fm"},{id:"fmLFO",min:0,max:10,group:"fm"},{id:"noiseLevel",min:0,max:20,group:"noise"},{id:"noiseFilter",min:500,max:5e3,group:"noise"},{id:"acidLevel",min:0,max:50,group:"acid"},{id:"acidFreq",min:80,max:300,group:"acid"},{id:"acidResonance",min:20,max:80,group:"acid"},{id:"acidDecay",min:.2,max:1,group:"acid"},{id:"acidSpeed",min:.5,max:2,group:"acid"},{id:"grainDensity",min:0,max:30,group:"granular"},{id:"grainSize",min:20,max:200,group:"granular"},{id:"grainPitch",min:0,max:50,group:"granular"},{id:"grainPan",min:0,max:50,group:"granular"},{id:"spaceMelodyDensity",min:0,max:30,group:"spaceMelody"},{id:"spaceMelodyRange",min:1,max:3,group:"spaceMelody"},{id:"spaceMelodySpeed",min:.5,max:2,group:"spaceMelody"},{id:"spaceMelodyEcho",min:0,max:50,group:"spaceMelody"},{id:"spaceMelodyPortamento",min:0,max:200,group:"spaceMelody"},{id:"padDensity",min:0,max:30,group:"ambientPad"},{id:"padAttack",min:1,max:5,group:"ambientPad"},{id:"padRelease",min:1,max:5,group:"ambientPad"},{id:"padFilterSweep",min:0,max:50,group:"ambientPad"},{id:"padShimmer",min:0,max:50,group:"ambientPad"},{id:"arpEnable",min:0,max:30,group:"arpeggiator"},{id:"arpSpeed",min:2,max:12,group:"arpeggiator"},{id:"arpOctaves",min:1,max:3,group:"arpeggiator"},{id:"arpGate",min:30,max:70,group:"arpeggiator"},{id:"chordDensity",min:0,max:30,group:"chord"},{id:"chordRoot",min:140,max:280,group:"chord"},{id:"chordTempo",min:40,max:100,group:"chord"},{id:"chordBrightness",min:500,max:3e3,group:"chord"},{id:"chordSpread",min:0,max:30,group:"chord"},{id:"vocalDensity",min:0,max:20,group:"vocal"},{id:"vocalPitch",min:150,max:300,group:"vocal"},{id:"vocalVibrato",min:0,max:50,group:"vocal"},{id:"vocalWhisper",min:0,max:50,group:"vocal"},{id:"karplusDensity",min:0,max:25,group:"karplus"},{id:"karplusPitch",min:150,max:500,group:"karplus"},{id:"karplusDamping",min:.9,max:.99,group:"karplus"},{id:"karplusBrightness",min:2e3,max:8e3,group:"karplus"},{id:"karplusPluck",min:20,max:80,group:"karplus"},{id:"additiveDensity",min:0,max:25,group:"additive"},{id:"additiveFundamental",min:100,max:400,group:"additive"},{id:"additiveHarmonics",min:3,max:12,group:"additive"},{id:"additiveDecay",min:1,max:2,group:"additive"},{id:"additiveInharmonicity",min:0,max:5,group:"additive"},{id:"additiveBrightness",min:1e3,max:5e3,group:"additive"},{id:"sampleDensity",min:0,max:30,group:"sample"},{id:"samplePitch",min:.5,max:2,group:"sample"},{id:"sampleReverse",min:0,max:50,group:"sample"},{id:"sampleChop",min:0,max:50,group:"sample"},{id:"sampleScatter",min:0,max:50,group:"sample"}].forEach(h=>{if(h.group!=="master"&&!this.groupEnabled[h.group])return;let r;h.id==="drumDensity"?r=h.min+Math.pow(Math.random(),.7)*(h.max-h.min):h.id.includes("Density")||h.id.includes("Intensity")||h.id.includes("Level")||h.id.includes("Enable")||h.id.includes("Activity")||h.id.includes("Rush")||h.id.includes("Ghost")?r=h.min+(1-Math.pow(Math.random(),3))*(h.max-h.min):r=Math.random()*(h.max-h.min)+h.min,this.morphTargets.set(h.id,r)}),this.groupEnabled.drums){const h=["techno","breakbeat","jungle","idm","gabber","trap"];this.morphTargets.set("drumPattern",h[Math.floor(Math.random()*h.length)])}if(this.groupEnabled.noise){const h=["white","pink","brown","crackle"];this.morphTargets.set("noiseType",h[Math.floor(Math.random()*h.length)])}if(this.groupEnabled.arpeggiator){const h=["up","down","updown","random"];this.morphTargets.set("arpPattern",h[Math.floor(Math.random()*h.length)])}if(this.groupEnabled.chord){const h=["major","minor","jazz","suspended"];this.morphTargets.set("chordProgression",h[Math.floor(Math.random()*h.length)]);const r=["close","open","drop2","spread"];this.morphTargets.set("chordVoicing",r[Math.floor(Math.random()*r.length)])}if(this.groupEnabled.vocal){const h=["a","e","i","o","u","ah","oo"];this.morphTargets.set("vocalVowel",h[Math.floor(Math.random()*h.length)])}const t=parseInt(((l=document.getElementById("minGroups"))==null?void 0:l.value)||3),s=parseInt(((c=document.getElementById("maxGroups"))==null?void 0:c.value)||8),i=t+Math.floor(Math.random()*(s-t+1));[...Object.keys(this.groupEnabled)].sort(()=>Math.random()-.5).forEach((h,r)=>{const d=r<i;this.morphTargets.set(h+"Enable",d)}),["reverb","delay","droneFreq","droneFilter","droneDetune","glitchIntensity","glitchRate","bitCrush","drumTempo","drumDensity","drumSwing","bleepRange","bleepDuration","burstActivity","burstSpeed","fmCarrier","fmIndex","fmRatio","noiseFilter","noiseLevel","acidFreq","acidResonance","grainDensity","grainSize","grainPitch","spaceMelodyDensity","spaceMelodySpeed","spaceMelodyPortamento","spaceMelodyEcho","padFilterSweep","padShimmer","arpSpeed","arpGate","chordDensity","chordRoot","chordTempo","chordBrightness","chordSpread","vocalDensity","vocalPitch","vocalVibrato","vocalWhisper","karplusDensity","karplusPitch","karplusDamping","karplusBrightness","karplusPluck"].forEach(h=>{if(Math.random()<.2){const r=["lfo","random","other"],d=r[Math.floor(Math.random()*r.length)];this.morphTargets.set(h+"Mod",d)}else this.morphTargets.set(h+"Mod","fixed")})}animateMorph(){if(!this.morphing){document.getElementById("morphButton").textContent="MORPH";return}const e=Date.now()-this.morphStartTime,t=Math.min(e/this.morphDuration,1),s=.5-Math.cos(t*Math.PI)/2;if(this.morphStartValues.forEach((i,a)=>{const n=this.morphTargets.get(a);if(n!==void 0&&typeof n=="number"){const o=document.getElementById(a);if(o){const l=i+(n-i)*s;o.value=l,o.dispatchEvent(new Event("input"))}}}),t>=1){const i=document.getElementById("drumPattern");i&&this.morphTargets.has("drumPattern")&&(i.value=this.morphTargets.get("drumPattern"),i.dispatchEvent(new Event("change")));const a=document.getElementById("noiseType");a&&this.morphTargets.has("noiseType")&&(a.value=this.morphTargets.get("noiseType"),a.dispatchEvent(new Event("change")));const n=document.getElementById("arpPattern");n&&this.morphTargets.has("arpPattern")&&(n.value=this.morphTargets.get("arpPattern"),n.dispatchEvent(new Event("change")));const o=document.getElementById("chordProgression");o&&this.morphTargets.has("chordProgression")&&(o.value=this.morphTargets.get("chordProgression"),o.dispatchEvent(new Event("change")));const l=document.getElementById("chordVoicing");l&&this.morphTargets.has("chordVoicing")&&(l.value=this.morphTargets.get("chordVoicing"),l.dispatchEvent(new Event("change")));const c=document.getElementById("vocalVowel");c&&this.morphTargets.has("vocalVowel")&&(c.value=this.morphTargets.get("vocalVowel"),c.dispatchEvent(new Event("change"))),Object.keys(this.groupEnabled).forEach(r=>{const d=r+"Enable";if(this.morphTargets.has(d)){const g=document.getElementById(d);if(g){const m=this.morphTargets.get(d);g.checked!==m&&(g.checked=m,g.dispatchEvent(new Event("change")))}}}),["reverb","delay","droneFreq","droneFilter","droneDetune","glitchIntensity","glitchRate","bitCrush","drumTempo","drumDensity","drumSwing","bleepRange","bleepDuration","burstActivity","burstSpeed","fmCarrier","fmIndex","fmRatio","noiseFilter","noiseLevel","acidFreq","acidResonance","grainDensity","grainSize","grainPitch","spaceMelodyDensity","spaceMelodySpeed","spaceMelodyPortamento","spaceMelodyEcho","padFilterSweep","padShimmer","arpSpeed","arpGate"].forEach(r=>{const d=r+"Mod";if(this.morphTargets.has(d)){const g=this.morphTargets.get(d),m=document.querySelector(`.lfo-button[data-param="${r}"]`);if(m){const f=this.modulationModes.get(r)||"fixed";if(f!==g){const p=["fixed","lfo","random","other"],u=p.indexOf(f);let M=(p.indexOf(g)-u+4)%4;for(let E=0;E<M;E++)m.click()}}}}),this.morphing=!1,document.getElementById("morphButton").textContent="MORPH"}else requestAnimationFrame(()=>this.animateMorph())}toggleLFO(e,t){let s=this.modulationModes.get(e)||"fixed";this.cleanupModulation(e);const i=["fixed","lfo","random","other"],a=i.indexOf(s),n=i[(a+1)%i.length];switch(this.modulationModes.set(e,n),n){case"fixed":t.textContent="MOD",t.classList.remove("active","random","other");break;case"lfo":t.textContent="LFO",t.classList.add("active"),t.classList.remove("random","other"),this.startLFO(e);break;case"random":t.textContent="RND",t.classList.add("active","random"),t.classList.remove("other"),this.startRandomJumps(e);break;case"other":t.textContent="OTH",t.classList.add("active","other"),t.classList.remove("random"),this.startOtherModulation(e);break}}cleanupModulation(e){if(this.animatedParams.has(e)){const s=this.animatedParams.get(e);s.frameId&&cancelAnimationFrame(s.frameId),this.animatedParams.delete(e)}this.randomIntervals.has(e)&&(clearInterval(this.randomIntervals.get(e)),this.randomIntervals.delete(e));const t=document.getElementById(e);t&&t.classList.remove("animated","random-jump","other-mod")}startLFO(e){var s;const t=document.getElementById(e);if(t){t.classList.add("animated");const i=parseFloat((s=document.getElementById("droneLFO"))==null?void 0:s.value)||.5,a={min:parseFloat(t.min),max:parseFloat(t.max),speed:i,phase:0};this.animatedParams.set(e,a),this.animateLFOParameter(e,a)}}startRandomJumps(e){const t=document.getElementById(e);if(t){t.classList.add("random-jump");const s=setInterval(()=>{const i=parseFloat(t.min),a=parseFloat(t.max),n=Math.random()*(a-i)+i;t.value=n,t.dispatchEvent(new Event("input"))},500+Math.random()*1500);this.randomIntervals.set(e,s)}}startOtherModulation(e){const t=document.getElementById(e);if(t){t.classList.add("other-mod");const s=8;let i=0;const a=setInterval(()=>{const n=parseFloat(t.min),l=(parseFloat(t.max)-n)/s,c=n+i*l;t.value=c,t.dispatchEvent(new Event("input")),i=(i+1)%s},400);this.randomIntervals.set(e,a)}}animateLFOParameter(e,t){if(!this.animatedParams.has(e))return;const s=document.getElementById(e);if(!s)return;t.phase+=t.speed*.01;const i=t.min+(Math.sin(t.phase)+1)/2*(t.max-t.min);s.value=i,s.dispatchEvent(new Event("input")),t.frameId=requestAnimationFrame(()=>this.animateLFOParameter(e,t))}captureCurrentState(){const e={};return document.querySelectorAll('input[type="range"], select').forEach(t=>{t.id&&(e[t.id]=parseFloat(t.value)||0)}),e}async toggleRecording(){const e=document.getElementById("recordButton");if(this.isRecording)this.mediaRecorder.stop(),this.isRecording=!1,e.classList.remove("recording"),e.textContent="RECORD";else{const t=this.audioContext.createMediaStreamDestination();this.masterBus&&this.masterBus.nodes.output.connect(t);const s=["audio/webm;codecs=opus","audio/webm","audio/ogg;codecs=opus","audio/mp4"];let i="audio/webm";for(const a of s)if(MediaRecorder.isTypeSupported(a)){i=a;break}this.mediaRecorder=new MediaRecorder(t.stream,{mimeType:i}),this.recordedChunks=[],this.recordingMimeType=i,this.mediaRecorder.ondataavailable=a=>{a.data.size>0&&this.recordedChunks.push(a.data)},this.mediaRecorder.onstop=()=>{this.showExportDialog()},this.mediaRecorder.start(),this.isRecording=!0,e.classList.add("recording"),e.textContent="STOP REC"}}showExportDialog(){const e=document.createElement("div");e.style.position="fixed",e.style.top="0",e.style.left="0",e.style.width="100%",e.style.height="100%",e.style.backgroundColor="rgba(0, 0, 0, 0.8)",e.style.display="flex",e.style.alignItems="center",e.style.justifyContent="center",e.style.zIndex="1000";const t=document.createElement("div");t.style.backgroundColor="#000",t.style.border="1px solid #fff",t.style.padding="2rem",t.style.textAlign="center";const s=document.createElement("h3");s.textContent="Export Recording",s.style.color="#fff",s.style.marginBottom="1.5rem",s.style.textTransform="uppercase",s.style.letterSpacing="0.1em";const i=document.createElement("div");i.style.display="flex",i.style.gap="1rem",i.style.justifyContent="center",i.style.flexWrap="wrap",[{label:"WAV",format:"wav",type:"audio/wav"},{label:"WebM",format:"webm",type:this.recordingMimeType},{label:"MP3*",format:"mp3",type:"audio/mpeg",note:"Requires conversion"}].forEach(({label:o,format:l,type:c,note:h})=>{const r=document.createElement("button");r.className="control-button secondary",r.textContent=o,r.style.minWidth="100px",r.addEventListener("click",()=>{l==="wav"?this.exportAsWAV():this.exportAsFormat(l,c),e.remove()}),h&&(r.title=h),i.appendChild(r)});const n=document.createElement("button");n.className="control-button secondary",n.textContent="CANCEL",n.style.marginTop="1rem",n.addEventListener("click",()=>{e.remove()}),t.appendChild(s),t.appendChild(i),t.appendChild(n),e.appendChild(t),document.body.appendChild(e)}exportAsFormat(e,t){const s=new Blob(this.recordedChunks,{type:t}),i=URL.createObjectURL(s),a=document.createElement("a");a.href=i,a.download=`audiogen_${new Date().toISOString().replace(/[:.]/g,"-")}.${e}`,a.click(),URL.revokeObjectURL(i)}async exportAsWAV(){const e=new Blob(this.recordedChunks,{type:this.recordingMimeType});try{const t=await e.arrayBuffer(),s=await this.audioContext.decodeAudioData(t),i=this.audioBufferToWav(s),a=URL.createObjectURL(i),n=document.createElement("a");n.href=a,n.download=`audiogen_${new Date().toISOString().replace(/[:.]/g,"-")}.wav`,n.click(),URL.revokeObjectURL(a)}catch(t){console.error("Error converting to WAV:",t),this.exportAsFormat("webm",this.recordingMimeType)}}audioBufferToWav(e){const t=e.numberOfChannels,s=e.sampleRate,i=1,a=16,n=a/8,o=t*n,l=[];for(let m=0;m<e.numberOfChannels;m++)l.push(e.getChannelData(m));const c=l[0].length,h=new ArrayBuffer(44+c*o),r=new DataView(h),d=(m,f)=>{for(let p=0;p<f.length;p++)r.setUint8(m+p,f.charCodeAt(p))};d(0,"RIFF"),r.setUint32(4,36+c*o,!0),d(8,"WAVE"),d(12,"fmt "),r.setUint32(16,16,!0),r.setUint16(20,i,!0),r.setUint16(22,t,!0),r.setUint32(24,s,!0),r.setUint32(28,s*o,!0),r.setUint16(32,o,!0),r.setUint16(34,a,!0),d(36,"data"),r.setUint32(40,c*o,!0);let g=44;for(let m=0;m<c;m++)for(let f=0;f<t;f++){const p=Math.max(-1,Math.min(1,l[f][m])),u=p<0?p*32768:p*32767;r.setInt16(g,u,!0),g+=2}return new Blob([h],{type:"audio/wav"})}startPerformanceMonitoring(){this.performanceMonitor=setInterval(()=>{const e=this.activeVoices/this.maxVoices;if(e>.8?this.performanceThrottle=.5:e>.6?this.performanceThrottle=.7:this.performanceThrottle=1,this.generators.drums&&this.generators.drums.setPerformanceThrottle(this.performanceThrottle),this.generators.granular&&this.generators.granular.setPerformanceThrottle(this.performanceThrottle),this.masterBus&&this.masterBus.updatePerformance(this.performanceThrottle),this.poolManager&&window.location.hostname==="localhost"){const t=this.poolManager.getAllStats();console.log("Voice Pool Performance:",{oscillator:`${t.oscillator.active} active, ${t.oscillator.available} pooled (${t.oscillator.poolEfficiency} reuse)`,gain:`${t.gain.active} active, ${t.gain.available} pooled (${t.gain.poolEfficiency} reuse)`,buffer:`${t.bufferSource.active} active, ${t.bufferSource.available} pooled (${t.bufferSource.poolEfficiency} reuse)`})}},1e3),this.activityMonitor=setInterval(()=>{this.updateActivityIndicators()},100)}updateActivityIndicators(){Object.keys(this.groupEnabled).forEach(e=>{const t=document.getElementById(e+"Activity"),s=t==null?void 0:t.closest(".section");if(t){const i=this.groupEnabled[e],a=this.generators[e];let n=!1;if(i&&a&&a.isPlaying){const o=document.getElementById(e+"Density")||document.getElementById(e+"Level")||document.getElementById(e+"Activity")||(e==="arpeggiator"?document.getElementById("arpEnable"):null);o?n=parseFloat(o.value)>0:e==="drone"&&(n=!0)}n?(t.classList.add("active"),s==null||s.classList.add("active")):(t.classList.remove("active"),s==null||s.classList.remove("active"))}})}toggleAutoMode(){var e;if(this.autoModeInterval){clearInterval(this.autoModeInterval),this.autoModeInterval=null;const t=document.getElementById("autoButton");t&&(t.classList.remove("active"),t.textContent="AUTO")}else{const t=document.getElementById("autoButton");t&&(t.classList.add("active"),t.textContent="AUTO ON");const s=parseFloat(((e=document.getElementById("autoChangeTime"))==null?void 0:e.value)||30)*1e3;this.randomize(),this.autoModeInterval=setInterval(()=>{this.randomize()},s)}}updateAutoModeInterval(){var e;if(this.autoModeInterval){clearInterval(this.autoModeInterval);const t=parseFloat(((e=document.getElementById("autoChangeTime"))==null?void 0:e.value)||30)*1e3;this.autoModeInterval=setInterval(()=>{this.randomize()},t)}}toggleLiteMode(){var e,t,s,i,a;if(this.liteMode){this.liteMode=!1;const n=document.getElementById("liteButton");if(n&&(n.classList.remove("active"),n.textContent="LITE MODE"),this.masterBus){const o=parseFloat(((e=document.getElementById("compressorMix"))==null?void 0:e.value)||100),l=parseFloat(((t=document.getElementById("distortionMix"))==null?void 0:t.value)||0),c=parseFloat(((s=document.getElementById("chorusMix"))==null?void 0:s.value)||0),h=parseFloat(((i=document.getElementById("reverb"))==null?void 0:i.value)||20)/100,r=parseFloat(((a=document.getElementById("delay"))==null?void 0:a.value)||0)/100;this.masterBus.compressor.setMix(o),this.masterBus.setDistortionMix(l),this.masterBus.setChorusMix(c),this.masterBus.setReverbMix(h),this.masterBus.setDelayMix(r)}this.poolManager&&(this.poolManager.setMaxPoolSize("oscillator",200),this.poolManager.setMaxPoolSize("gain",200),this.poolManager.setMaxPoolSize("bufferSource",100)),this.maxVoices=100}else{this.liteMode=!0;const n=document.getElementById("liteButton");n&&(n.classList.add("active"),n.textContent="LITE ON"),this.masterBus&&(this.masterBus.setDistortionMix(0),this.masterBus.setChorusMix(0),this.masterBus.setReverbMix(0),this.masterBus.setDelayMix(0)),this.poolManager&&(this.poolManager.setMaxPoolSize("oscillator",50),this.poolManager.setMaxPoolSize("gain",50),this.poolManager.setMaxPoolSize("bufferSource",25)),this.maxVoices=50}}showKeyboardHelp(){const e=`
Keyboard Shortcuts:
    
Space    - Play/Stop
R        - Randomize
M        - Morph
A        - Toggle Auto Mode
L        - Toggle Lite Mode
Esc      - Stop
? or H   - Show this help
        
Press any key to close this help.`,t=document.createElement("div");t.style.position="fixed",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.backgroundColor="rgba(0, 0, 0, 0.8)",t.style.display="flex",t.style.alignItems="center",t.style.justifyContent="center",t.style.zIndex="1000";const s=document.createElement("pre");s.style.color="#fff",s.style.backgroundColor="#000",s.style.border="1px solid #fff",s.style.padding="2rem",s.style.fontFamily="Monaco, Courier New, monospace",s.style.fontSize="14px",s.textContent=e,t.appendChild(s),document.body.appendChild(t);const i=a=>{a.preventDefault(),t.remove(),document.removeEventListener("keydown",i)};setTimeout(()=>{document.addEventListener("keydown",i)},100)}shareSettings(){const e={groups:{},params:{},selects:{}};Object.keys(this.groupEnabled).forEach(a=>{e.groups[a]=this.groupEnabled[a]}),document.querySelectorAll('input[type="range"]').forEach(a=>{a.id&&(e.params[a.id]=parseFloat(a.value))}),document.querySelectorAll("select").forEach(a=>{a.id&&(e.selects[a.id]=a.value)});const t=JSON.stringify(e),s=btoa(t),i=new URL(window.location.href);i.searchParams.set("preset",s),navigator.clipboard.writeText(i.toString()).then(()=>{const a=document.getElementById("shareButton");if(a){const n=a.textContent;a.textContent="COPIED!",setTimeout(()=>{a.textContent=n},2e3)}}).catch(a=>{console.error("Failed to copy URL:",a),prompt("Copy this URL to share your settings:",i.toString())})}loadSettingsFromURL(){const t=new URLSearchParams(window.location.search).get("preset");if(t)try{const s=atob(t),i=JSON.parse(s);i.groups&&Object.entries(i.groups).forEach(([a,n])=>{if(this.groupEnabled.hasOwnProperty(a)){this.groupEnabled[a]=n;const o=document.getElementById(a+"Enable");o&&(o.checked=n)}}),i.params&&Object.entries(i.params).forEach(([a,n])=>{const o=document.getElementById(a);o&&(o.value=n,o.dispatchEvent(new Event("input")))}),i.selects&&Object.entries(i.selects).forEach(([a,n])=>{const o=document.getElementById(a);o&&(o.value=n,o.dispatchEvent(new Event("change")))}),console.log("Settings loaded from URL")}catch(s){console.error("Failed to load settings from URL:",s)}}}return document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{window.soundscape=new w}):window.soundscape=new w,F.GenerativeSoundscape=w,Object.defineProperty(F,Symbol.toStringTag,{value:"Module"}),F}({});
