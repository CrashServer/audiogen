var AudioGen=function(V){"use strict";class O{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],gains:[],lfos:[],filter:null,mixer:null},this.isPlaying=!1,this.voiceId="drone"}start(e){if(this.isPlaying)return;const{frequency:t,detune:s,voices:i,filterFreq:a}=e;this.stop(),this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=a,this.nodes.filter.Q.value=5,this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.3;for(let n=0;n<i;n++){let r,o,l,c;this.poolManager?(r=this.poolManager.pools.oscillator.acquireOscillator(`${this.voiceId}_osc_${n}`,{type:"sawtooth",frequency:t*(1+(Math.random()-.5)*s/100)}),o=this.poolManager.pools.gain.acquireGain(`${this.voiceId}_gain_${n}`,1/i),l=this.poolManager.pools.oscillator.acquireOscillator(`${this.voiceId}_lfo_${n}`,{type:"sine",frequency:.1+Math.random()*.2}),c=this.poolManager.pools.gain.acquireGain(`${this.voiceId}_lfoGain_${n}`,5)):(r=this.audioContext.createOscillator(),o=this.audioContext.createGain(),l=this.audioContext.createOscillator(),c=this.audioContext.createGain(),r.type="sawtooth",r.frequency.value=t*(1+(Math.random()-.5)*s/100),o.gain.value=1/i,l.frequency.value=.1+Math.random()*.2,c.gain.value=5),l.connect(c),c.connect(r.frequency),r.connect(o),o.connect(this.nodes.filter),this.poolManager||(l.start(),r.start()),this.nodes.oscillators.push(r),this.nodes.gains.push(o),this.nodes.lfos.push({lfo:l,lfoGain:c})}this.nodes.filter.connect(this.nodes.mixer),this.isPlaying=!0}stop(){if(this.poolManager?(this.nodes.oscillators.forEach((e,t)=>{this.poolManager.pools.oscillator.release(e)}),this.nodes.gains.forEach((e,t)=>{this.poolManager.pools.gain.release(e)}),this.nodes.lfos.forEach(({lfo:e,lfoGain:t},s)=>{this.poolManager.pools.oscillator.release(e),this.poolManager.pools.gain.release(t)})):(this.nodes.oscillators.forEach(e=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.lfos.forEach(({lfo:e})=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.gains.forEach(e=>{if(e)try{e.disconnect()}catch{}})),this.nodes.filter)try{this.nodes.filter.disconnect()}catch{}if(this.nodes.mixer)try{this.nodes.mixer.disconnect()}catch{}this.nodes.oscillators=[],this.nodes.gains=[],this.nodes.lfos=[],this.nodes.filter=null,this.nodes.mixer=null,this.isPlaying=!1}updateParameter(e,t){switch(e){case"frequency":this.nodes.oscillators.forEach((s,i)=>{const a=parseFloat(document.getElementById("droneDetune").value);s.frequency.value=t*(1+(Math.random()-.5)*a/100)});break;case"filterFreq":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break;case"volume":this.nodes.mixer&&(this.nodes.mixer.gain.value=t);break}}getOutputNode(){return this.nodes.mixer}}class L{constructor(e,t){this.audioContext=e,this.scheduler=null,this.drumVoices=0,this.maxDrumVoices=20,this.activeVoices=0,this.maxVoices=100,this.performanceThrottle=1,this.isPlaying=!1}start(e,t){if(this.isPlaying)return;const{pattern:s,tempo:i,density:a,variation:n,swing:r,snareRush:o,ghostNotes:l,hihatSpeed:c}=e;this.masterNodes=t;const h=6e4/(i*8);let d=0;const m=this.getDrumPatterns()[s];this.scheduler=setInterval(()=>{const g=d%m.length,p=d%2*r*h*.2,u=(Math.random()-.5)*n*10+p;if(m.kick[g]&&Math.random()<a){const y=m.kick[g]*1.2;setTimeout(()=>this.playKick(this.audioContext.currentTime,n,y),u)}if(m.snare[g]&&Math.random()<a*.9){const y=m.snare[g]*1.1;setTimeout(()=>{this.playSnare(this.audioContext.currentTime,n,y),Math.random()<o&&g%4===0&&this.triggerSnareRush(n)},u)}if(d%(16/c)===0&&m.hihat[g%16]&&Math.random()<a*.8){const y=m.hihat[g%16]*.8,M=g%4===2&&Math.random()<.3;setTimeout(()=>this.playHiHat(this.audioContext.currentTime,n,y,M),u)}if(m.perc&&m.perc[g]&&Math.random()<a*.7&&(Math.random()<.5?setTimeout(()=>this.playRimshot(this.audioContext.currentTime,n),u):setTimeout(()=>this.playClap(this.audioContext.currentTime,n),u)),Math.random()<l){const y=u+Math.random()*h;setTimeout(()=>{const M=Math.random();M<.4?this.playKick(this.audioContext.currentTime,n*2,.5):M<.7?this.playSnare(this.audioContext.currentTime,n*2,.4):this.playHiHat(this.audioContext.currentTime,n*2,.35)},y)}d++},h),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.isPlaying=!1}connectToMaster(e){this.masterNodes&&(e.connect(this.masterNodes.dryGain),e.connect(this.masterNodes.convolver),e.connect(this.masterNodes.delay))}getDrumPatterns(){return{techno:{length:16,kick:[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],snare:[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],hihat:[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],perc:[0,0,0,.5,0,0,0,0,0,.3,0,0,0,0,.4,0]},breakbeat:{length:32,kick:[1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],snare:[0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0],hihat:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],perc:[0,0,.3,0,0,0,0,.5,0,0,0,0,.4,0,0,0,0,.3,0,0,0,0,0,0,.6,0,0,0,0,0,0,0]},jungle:{length:32,kick:[1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0],snare:[0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0],hihat:[1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0],perc:[0,.5,0,0,.3,0,0,0,0,0,.4,0,0,.6,0,0,.3,0,0,0,0,.5,0,0,0,0,0,.4,0,0,0,0]},idm:{length:32,kick:[1,0,0,.5,0,0,1,0,0,.3,0,0,.7,0,0,0,.8,0,0,0,.4,0,0,0,1,0,.2,0,0,0,.6,0],snare:[0,0,0,0,.8,0,0,.3,0,0,.5,0,1,0,0,.2,0,0,.6,0,.9,0,0,0,.4,0,0,.7,0,0,1,0],hihat:[.5,.3,.8,.2,.6,.4,.9,.1,.7,.3,.5,.8,.4,.6,.2,.9],perc:[.7,0,0,.4,0,.6,0,0,.5,0,0,.3,0,0,.8,0,0,.4,0,0,.7,0,.3,0,0,.5,0,0,.6,0,0,.4]},gabber:{length:16,kick:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],snare:[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],hihat:[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],perc:[0,0,0,.8,0,0,0,.6,0,0,0,.7,0,0,0,.5]},trap:{length:32,kick:[1,0,0,0,0,0,0,0,0,0,0,0,.8,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,.6,0],snare:[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],hihat:[1,.3,.5,.3,1,.3,.5,.3,1,.3,.5,.3,1,.3,.5,.3],perc:[0,0,0,0,0,.6,0,0,0,0,0,0,0,0,.7,0,0,0,0,0,.5,0,0,0,0,0,0,0,0,0,0,.8]}}}triggerSnareRush(e){const t=4+Math.floor(Math.random()*12),s=20+Math.random()*40,i=Math.min(t,8);for(let a=0;a<i;a++)setTimeout(()=>{const n=.3*(1-a/i);this.playSnare(this.audioContext.currentTime,e*2,n)},a*s)}playKick(e,t,s=1){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++,this.performanceThrottle<.5&&(s*=.7);const i=this.audioContext.createGain();i.gain.value=s;const a=this.audioContext.createOscillator();a.type="sine",a.frequency.setValueAtTime(55,e),a.frequency.exponentialRampToValueAtTime(25,e+.3);const n=this.audioContext.createGain();n.gain.setValueAtTime(1,e),n.gain.exponentialRampToValueAtTime(.01,e+.25);const r=this.audioContext.createOscillator();r.type="triangle",r.frequency.setValueAtTime(85,e),r.frequency.exponentialRampToValueAtTime(45,e+.08);const o=this.audioContext.createGain();o.gain.setValueAtTime(.8,e),o.gain.exponentialRampToValueAtTime(.01,e+.1);const l=this.audioContext.createOscillator();l.type="square",l.frequency.value=1500+Math.random()*500;const c=this.audioContext.createGain();c.gain.setValueAtTime(.5,e),c.gain.exponentialRampToValueAtTime(.01,e+.005);const h=this.audioContext.createBiquadFilter();h.type="highpass",h.frequency.value=1e3;const d=this.audioContext.createBuffer(1,512,this.audioContext.sampleRate),f=d.getChannelData(0);for(let u=0;u<512;u++)f[u]=(Math.random()*2-1)*Math.pow(1-u/512,2);const m=this.audioContext.createBufferSource();m.buffer=d;const g=this.audioContext.createGain();g.gain.value=.3;const p=this.audioContext.createBiquadFilter();p.type="peaking",p.frequency.value=80,p.Q.value=.7,p.gain.value=6,a.connect(n),n.connect(p),r.connect(o),o.connect(p),l.connect(h),h.connect(c),c.connect(p),m.connect(g),g.connect(p),p.connect(i),this.connectToMaster(i),a.start(e),r.start(e),l.start(e),m.start(e),a.stop(e+.3),r.stop(e+.15),l.stop(e+.01),setTimeout(()=>{this.activeVoices--,this.drumVoices--},300)}playSnare(e,t,s=.8){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++,this.performanceThrottle<.7&&(s*=.8);const i=this.audioContext.createGain();i.gain.value=s;const a=.15,n=this.audioContext.createBuffer(2,this.audioContext.sampleRate*a,this.audioContext.sampleRate);for(let m=0;m<2;m++){const g=n.getChannelData(m);for(let p=0;p<g.length;p++){const u=Math.random()*2-1,y=Math.pow(1-p/g.length,.5);g[p]=u*y}}const r=this.audioContext.createBufferSource();r.buffer=n;const o=this.audioContext.createBiquadFilter();o.type="highpass",o.frequency.value=200+t*100;const l=this.audioContext.createBiquadFilter();l.type="bandpass",l.frequency.value=5e3+Math.random()*2e3,l.Q.value=2;const c=this.audioContext.createGain();c.gain.setValueAtTime(1,e),c.gain.exponentialRampToValueAtTime(.01,e+a);const h=[200,250,300];h.forEach((m,g)=>{const p=this.audioContext.createOscillator();p.type="sine",p.frequency.value=m*(1+t*.1);const u=this.audioContext.createGain();u.gain.setValueAtTime(.5/h.length,e),u.gain.exponentialRampToValueAtTime(.01,e+.03+g*.01),p.connect(u),u.connect(i),p.start(e),p.stop(e+.1)});const d=this.audioContext.createOscillator();d.type="triangle",d.frequency.value=1e3;const f=this.audioContext.createGain();f.gain.setValueAtTime(.7,e),f.gain.exponentialRampToValueAtTime(.01,e+.002),r.connect(o),o.connect(l),l.connect(c),c.connect(i),d.connect(f),f.connect(i),this.connectToMaster(i),r.start(e),d.start(e),d.stop(e+.005),setTimeout(()=>{this.activeVoices--,this.drumVoices--},150)}playHiHat(e,t,s=.5,i=!1){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++,this.performanceThrottle<.5&&(s*=.7);const a=i?.3:.05,n=this.audioContext.createGain();n.gain.value=s;const r=this.performanceThrottle<.5?[8e3,12e3]:[6e3,8e3,1e4,12e3,14e3];r.forEach(c=>{const h=this.audioContext.createBufferSource(),d=Math.min(a+.05,.1),f=this.audioContext.createBuffer(1,this.audioContext.sampleRate*d,this.audioContext.sampleRate),m=f.getChannelData(0);for(let y=0;y<m.length;y++){const M=Math.sin(y*c/this.audioContext.sampleRate*2*Math.PI);m[y]=(Math.random()*2-1)*M}h.buffer=f,h.loop=!0;const g=this.audioContext.createBiquadFilter();g.type="bandpass",g.frequency.value=c*(1+(Math.random()-.5)*t*.1),g.Q.value=30;const p=this.audioContext.createGain(),u=i?[.8/r.length,a*.8,.01,a]:[1/r.length,.001,.01,a];p.gain.setValueAtTime(0,e),p.gain.linearRampToValueAtTime(u[0],e+u[1]),p.gain.exponentialRampToValueAtTime(u[2],e+u[3]),h.connect(g),g.connect(p),p.connect(n),h.start(e),h.stop(e+a+.05)});const o=this.audioContext.createOscillator();o.type="square",o.frequency.value=15e3+Math.random()*2e3;const l=this.audioContext.createGain();l.gain.setValueAtTime(.1,e),l.gain.exponentialRampToValueAtTime(.01,e+a*.3),o.connect(l),l.connect(n),this.connectToMaster(n),o.start(e),o.stop(e+a),setTimeout(()=>{this.activeVoices--,this.drumVoices--},a*1e3+50)}playRimshot(e,t){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++;const s=.6,i=this.audioContext.createOscillator();i.frequency.value=800+Math.random()*200,i.type="square";const a=this.audioContext.createGain();a.gain.setValueAtTime(.4*s,e),a.gain.exponentialRampToValueAtTime(.01,e+.01);const n=this.audioContext.createOscillator();n.frequency.value=400,n.type="sine";const r=this.audioContext.createGain();r.gain.setValueAtTime(.3*s,e),r.gain.exponentialRampToValueAtTime(.01,e+.04);const o=this.audioContext.createBiquadFilter();o.type="bandpass",o.frequency.value=1200,o.Q.value=10;const l=this.audioContext.createBuffer(1,1024,this.audioContext.sampleRate),c=l.getChannelData(0);for(let m=0;m<1024;m++)c[m]=(Math.random()*2-1)*Math.pow(1-m/1024,2);const h=this.audioContext.createBufferSource();h.buffer=l;const d=this.audioContext.createGain();d.gain.value=.3*s;const f=this.audioContext.createGain();i.connect(a),a.connect(f),n.connect(o),o.connect(r),r.connect(f),h.connect(d),d.connect(f),this.connectToMaster(f),i.start(e),n.start(e),h.start(e),i.stop(e+.01),n.stop(e+.05),setTimeout(()=>{this.activeVoices--,this.drumVoices--},50)}playClap(e,t){if(this.drumVoices>=this.maxDrumVoices||this.activeVoices>this.maxVoices)return;this.drumVoices++,this.activeVoices++;const s=.5,i=this.audioContext.createGain(),a=this.performanceThrottle<.7?2:3+Math.floor(Math.random()*2),n=.01;for(let l=0;l<a;l++){const c=e+l*n,h=this.audioContext.createBuffer(1,512,this.audioContext.sampleRate),d=h.getChannelData(0);for(let u=0;u<512;u++)d[u]=Math.random()*2-1;const f=this.audioContext.createBufferSource();f.buffer=h;const m=this.audioContext.createBiquadFilter();m.type="bandpass",m.frequency.value=1500+Math.random()*1e3,m.Q.value=5;const g=this.audioContext.createGain(),p=s*(l===a-1?1:.3+Math.random()*.3);g.gain.setValueAtTime(p,c),g.gain.exponentialRampToValueAtTime(.01,c+.02),f.connect(m),m.connect(g),g.connect(i),f.start(c)}const r=this.audioContext.createOscillator();r.frequency.value=200;const o=this.audioContext.createGain();o.gain.setValueAtTime(.2*s,e),o.gain.exponentialRampToValueAtTime(.01,e+.03),r.connect(o),o.connect(i),this.connectToMaster(i),r.start(e),r.stop(e+.05),setTimeout(()=>{this.activeVoices--,this.drumVoices--},100)}updateParameter(e,t){}setPerformanceThrottle(e){this.performanceThrottle=e}}class F{constructor(){this.history=[],this.maxHistory=16}shouldTrigger(e,t=.5){let s=e;const i=this.history.slice(-4).filter(n=>n).length;s*=Math.pow(1-t,i);const a=Math.random()<s;return this.history.push(a),this.history.length>this.maxHistory&&this.history.shift(),a}shouldTriggerAntiPattern(e,t=4){if(this.history.length<t*2)return Math.random()<e;const s=this.history.slice(-t),i=this.history.slice(-t*2,-t),n=s.every((o,l)=>o===i[l])?e*.3:e,r=Math.random()<n;return this.history.push(r),this.history.length>this.maxHistory&&this.history.shift(),r}reset(){this.history=[]}}class R{constructor(e=1){this.order=e,this.transitions=new Map,this.currentState=[]}train(e){for(let t=0;t<e.length-this.order;t++){const s=e.slice(t,t+this.order).join(","),i=e[t+this.order];this.transitions.has(s)||this.transitions.set(s,new Map);const a=this.transitions.get(s);a.set(i,(a.get(i)||0)+1)}this.currentState.length===0&&e.length>=this.order&&(this.currentState=e.slice(0,this.order))}next(){const e=this.currentState.join(","),t=this.transitions.get(e);if(!t||t.size===0){const n=Math.random()>.5?1:0;return this.updateState(n),n}const s=Array.from(t.values()).reduce((n,r)=>n+r,0);let i=Math.random()*s;for(const[n,r]of t)if(i-=r,i<=0)return this.updateState(n),n;const a=Array.from(t.keys())[0];return this.updateState(a),a}updateState(e){this.currentState.push(e),this.currentState.length>this.order&&this.currentState.shift()}reset(){this.currentState=[]}}class G{static generate(e,t,s=0){if(t>e&&(t=e),t===0)return new Array(e).fill(0);if(t===e)return new Array(e).fill(1);let i=[],a=[],n=[],r=e-t;n.push(t);let o=0;for(;n[o]>1;)a.push(Math.floor(r/n[o])),n.push(r%n[o]),r=n[o],o++;a.push(r);const l=function(c){if(c===-1)i.push(0);else if(c===-2)i.push(1);else{for(let h=0;h<a[c];h++)l(c-1);n[c]!==0&&l(c-2)}};return l(o),s!==0&&(s=s%e,i=i.slice(s).concat(i.slice(0,s))),i}static generateComplement(e,t,s=0){return this.generate(e,t,s).map(a=>1-a)}static generateVariations(e,t,s=4){const i=[];for(let a=0;a<s;a++)i.push(this.generate(e,t,a));return i}}class N{constructor(){this.tracks=new Map,this.globalStep=0}addTrack(e,t,s=1){this.tracks.set(e,{pattern:t,speed:s,position:0,accumulator:0})}removeTrack(e){this.tracks.delete(e)}step(){const e={};for(const[t,s]of this.tracks){for(s.accumulator+=s.speed;s.accumulator>=1;)s.accumulator-=1,s.position=(s.position+1)%s.pattern.length;const i=Math.floor(s.position);e[t]=s.pattern[i]}return this.globalStep++,e}reset(){this.globalStep=0;for(const e of this.tracks.values())e.position=0,e.accumulator=0}static generatePolyrhythm(e,t){const s=[],i=this.lcm(e);for(const a of e){const n=[];for(let r=0;r<t;r++)n.push(r%a===0?1:0);s.push(n)}return{patterns:s,lcm:i}}static gcd(e,t){return t?this.gcd(t,e%t):e}static lcm(e){return e.reduce((t,s)=>t*s/this.gcd(t,s))}}class A{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.probabilityTriggers={kick:new F,snare:new F,hihat:new F,perc:new F},this.markovChains={kick:new R(2),snare:new R(2),hihat:new R(1)},this.polyrhythm=new N,this.trainMarkovChains(),this.patternMode="euclidean",this.euclideanPatterns={},this.traditionalPatterns=this.getTraditionalPatterns()}trainMarkovChains(){this.markovChains.kick.train([1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0]),this.markovChains.kick.train([1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0]),this.markovChains.kick.train([1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0]),this.markovChains.snare.train([0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0]),this.markovChains.snare.train([0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0]),this.markovChains.snare.train([0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0]),this.markovChains.hihat.train([1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0]),this.markovChains.hihat.train([1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1]),this.markovChains.hihat.train([1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1])}start(e,t){if(this.isPlaying)return;this.masterNodes=t,this.params=e,this.generatePatterns();const s=6e4/(e.tempo*4);let i=0;this.scheduler=setInterval(()=>{this.processStep(i),i++},s),this.isPlaying=!0}generatePatterns(){const{patternMode:e="euclidean",euclideanSteps:t=16,kickPulses:s=4,snarePulses:i=2,hihatPulses:a=8,polyLengths:n=[3,4,5]}=this.params;switch(this.patternMode=e,e){case"euclidean":this.euclideanPatterns={kick:G.generate(t,s),snare:G.generate(t,i,4),hihat:G.generate(t,a),perc:G.generateComplement(t,Math.floor(t/3))};break;case"polyrhythm":this.polyrhythm.reset(),this.polyrhythm.addTrack("kick",new Array(n[0]).fill(0).map((r,o)=>o===0?1:0),1),this.polyrhythm.addTrack("snare",new Array(n[1]).fill(0).map((r,o)=>o===0?1:0),1),this.polyrhythm.addTrack("hihat",new Array(n[2]).fill(0).map((r,o)=>o%2===0?1:0),1);break}}processStep(e){const{density:t,variation:s,swing:i,probability:a,humanize:n=.5,patternLength:r=16}=this.params,o=e%r;let l={};switch(this.patternMode){case"traditional":const d=this.traditionalPatterns[this.params.pattern||"techno"];l={kick:d.kick[o%d.kick.length],snare:d.snare[o%d.snare.length],hihat:d.hihat[o%d.hihat.length],perc:d.perc?d.perc[o%d.perc.length]:0};break;case"euclidean":l={kick:this.euclideanPatterns.kick[o],snare:this.euclideanPatterns.snare[o],hihat:this.euclideanPatterns.hihat[o],perc:this.euclideanPatterns.perc[o]};break;case"markov":l={kick:this.markovChains.kick.next(),snare:this.markovChains.snare.next(),hihat:this.markovChains.hihat.next(),perc:Math.random()<.1?1:0};break;case"polyrhythm":l=this.polyrhythm.step();break}if(a){const d=l.kick&&this.probabilityTriggers.kick.shouldTriggerAntiPattern(t*.9),f=l.snare&&this.probabilityTriggers.snare.shouldTriggerAntiPattern(t*.8),m=l.hihat&&this.probabilityTriggers.hihat.shouldTrigger(t*.7);l.kick=d?l.kick:0,l.snare=f?l.snare:0,l.hihat=m?l.hihat:0}const c=o%2*i*.2,h=(Math.random()-.5)*s*10+c;if(l.kick){const d=l.kick*(1-n*.3+Math.random()*n*.3);setTimeout(()=>this.playKick(d),h)}if(l.snare){const d=l.snare*(1-n*.3+Math.random()*n*.3);setTimeout(()=>this.playSnare(d),h)}if(l.hihat){const d=l.hihat*(1-n*.2+Math.random()*n*.2),f=o%4===2&&Math.random()<.3;setTimeout(()=>this.playHihat(d,f),h)}l.perc&&l.perc>0&&setTimeout(()=>this.playPerc(l.perc),h)}playKick(e){const t=this.audioContext.currentTime,s=this.audioContext.createOscillator(),i=this.audioContext.createGain();s.frequency.setValueAtTime(60,t),s.frequency.exponentialRampToValueAtTime(30,t+.1),i.gain.setValueAtTime(e,t),i.gain.exponentialRampToValueAtTime(.01,t+.5),s.connect(i),this.connectToMaster(i),s.start(t),s.stop(t+.5)}playSnare(e){const t=this.audioContext.currentTime,s=this.audioContext.createBuffer(1,4096,this.audioContext.sampleRate),i=s.getChannelData(0);for(let c=0;c<4096;c++)i[c]=Math.random()*2-1;const a=this.audioContext.createBufferSource();a.buffer=s;const n=this.audioContext.createBiquadFilter();n.type="highpass",n.frequency.value=1e3;const r=this.audioContext.createGain();r.gain.setValueAtTime(e*.8,t),r.gain.exponentialRampToValueAtTime(.01,t+.2);const o=this.audioContext.createOscillator();o.frequency.value=200;const l=this.audioContext.createGain();l.gain.setValueAtTime(e*.5,t),l.gain.exponentialRampToValueAtTime(.01,t+.1),a.connect(n),n.connect(r),o.connect(l),this.connectToMaster(r),this.connectToMaster(l),a.start(t),o.start(t),o.stop(t+.1)}playHihat(e,t){const s=this.audioContext.currentTime,i=t?.3:.05,a=this.audioContext.createBuffer(1,2048,this.audioContext.sampleRate),n=a.getChannelData(0);for(let c=0;c<2048;c++)n[c]=(Math.random()*2-1)*Math.sin(c*.1);const r=this.audioContext.createBufferSource();r.buffer=a;const o=this.audioContext.createBiquadFilter();o.type="highpass",o.frequency.value=8e3;const l=this.audioContext.createGain();l.gain.setValueAtTime(e*.3,s),l.gain.exponentialRampToValueAtTime(.01,s+i),r.connect(o),o.connect(l),this.connectToMaster(l),r.start(s)}playPerc(e){const t=this.audioContext.currentTime,s=400+Math.random()*800,i=this.audioContext.createOscillator();i.frequency.value=s,i.type="triangle";const a=this.audioContext.createGain();a.gain.setValueAtTime(e*.3,t),a.gain.exponentialRampToValueAtTime(.01,t+.05),i.connect(a),this.connectToMaster(a),i.start(t),i.stop(t+.05)}connectToMaster(e){this.masterNodes&&(e.connect(this.masterNodes.dryGain),e.connect(this.masterNodes.convolver))}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),Object.values(this.probabilityTriggers).forEach(e=>e.reset()),Object.values(this.markovChains).forEach(e=>e.reset()),this.polyrhythm.reset(),this.isPlaying=!1}updateParameter(e,t){this.params[e]=t,["patternMode","euclideanSteps","kickPulses","snarePulses","hihatPulses","polyLengths"].includes(e)&&this.generatePatterns()}getTraditionalPatterns(){return{techno:{kick:[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],snare:[0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],hihat:[0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],perc:[0,0,0,.3,0,0,0,0,0,.5,0,0,0,0,0,.4]},breakbeat:{kick:[1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0],snare:[0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0],hihat:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],perc:[0,0,.4,0,0,0,.3,0,0,0,0,.5,0,0,0,0]}}}}function z(x,e,t,s=!1){const i=x.sampleRate*e,a=x.createBuffer(2,i,x.sampleRate);for(let n=0;n<2;n++){const r=a.getChannelData(n);for(let o=0;o<i;o++){const l=s?i-o:o;r[o]=(Math.random()*2-1)*Math.pow(1-l/i,t)}}return a}class j{constructor(e,t){this.audioContext=e,this.nodes={source:null,gain:null,waveshaper:null},this.scheduler=null,this.isPlaying=!1}start(e){if(this.isPlaying)return;const{intensity:t,rate:s,bitCrush:i}=e;if(t===0)return;this.nodes.source=this.audioContext.createBufferSource(),this.nodes.gain=this.audioContext.createGain(),this.nodes.gain.gain.value=t*.5;const a=this.audioContext.sampleRate*.1,n=this.audioContext.createBuffer(1,a,this.audioContext.sampleRate),r=n.getChannelData(0);for(let o=0;o<a;o++)r[o]=Math.random()*2-1;this.nodes.source.buffer=n,this.nodes.source.loop=!0,this.nodes.waveshaper=this.audioContext.createWaveShaper(),this.updateBitCrusher(i),this.nodes.source.connect(this.nodes.waveshaper),this.nodes.waveshaper.connect(this.nodes.gain),this.nodes.source.start(),this.scheduler=setInterval(()=>{Math.random()<t&&this.triggerGlitch()},1e3/s),this.isPlaying=!0}stop(){if(this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.nodes.source)try{this.nodes.source.stop(),this.nodes.source.disconnect()}catch{}if(this.nodes.waveshaper)try{this.nodes.waveshaper.disconnect()}catch{}if(this.nodes.gain)try{this.nodes.gain.disconnect()}catch{}this.nodes.source=null,this.nodes.waveshaper=null,this.nodes.gain=null,this.isPlaying=!1}triggerGlitch(){if(!this.nodes.gain)return;const e=this.nodes.gain.gain,t=this.audioContext.currentTime;e.cancelScheduledValues(t),e.setValueAtTime(e.value,t),e.linearRampToValueAtTime(Math.random()*.8,t+.01),e.linearRampToValueAtTime(0,t+.05),e.linearRampToValueAtTime(e.value,t+.1)}updateBitCrusher(e){if(!this.nodes.waveshaper)return;const t=new Float32Array(256),s=Math.pow(2,16-e);for(let i=0;i<256;i++){const a=(i-128)/128;t[i]=Math.round(a*s)/s}this.nodes.waveshaper.curve=t}updateParameter(e,t){switch(e){case"bitcrush":this.updateBitCrusher(t);break;case"intensity":this.nodes.gain&&(this.nodes.gain.gain.value=t/100*.5);break}}getOutputNode(){return this.nodes.gain}}class ${constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.masterConnection=null,this.activeNodes=new Set}start(e,t,s=null){if(this.isPlaying)return;const{density:i,range:a,duration:n}=e;this.masterConnection=t,this.envelope=s,i!==0&&(this.scheduler=setInterval(()=>{Math.random()<i&&this.triggerBleep(a,n)},100),this.isPlaying=!0)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager&&this.activeNodes.forEach(({osc:e,gain:t,nodeId:s})=>{this.poolManager.pools.oscillator.release(e),this.poolManager.pools.gain.release(t)}),this.activeNodes.clear(),this.isPlaying=!1}triggerBleep(e,t){const s=this.audioContext.currentTime,i=100+Math.random()*e;let a,n;const r=`bleep_${Date.now()}_${Math.random()}`;this.poolManager?(a=this.poolManager.pools.oscillator.acquireOscillator(r,{type:"sine",frequency:i}),n=this.poolManager.pools.gain.acquireGain(r,0)):(a=this.audioContext.createOscillator(),n=this.audioContext.createGain(),a.type="sine",a.frequency.value=i,n.gain.value=0),this.envelope?this.envelope.applyTo(n.gain,s,s+t):(n.gain.setValueAtTime(0,s),n.gain.linearRampToValueAtTime(.5,s+.001),n.gain.setValueAtTime(.5,s+t-.001),n.gain.linearRampToValueAtTime(0,s+t)),a.connect(n),this.masterConnection&&this.masterConnection(n),this.activeNodes.add({osc:a,gain:n,nodeId:r}),this.poolManager?setTimeout(()=>{this.poolManager.pools.oscillator.release(a),this.poolManager.pools.gain.release(n),this.activeNodes.forEach(o=>{o.nodeId===r&&this.activeNodes.delete(o)})},(t+.1)*1e3):(a.start(s),a.stop(s+t+.001))}updateParameter(e,t){}}class H{constructor(e,t){this.audioContext=e,this.scheduler=null,this.isPlaying=!1,this.masterConnection=null}start(e,t){if(this.isPlaying)return;const{activity:s,complexity:i,speed:a}=e;this.masterConnection=t,s!==0&&(this.scheduler=setInterval(()=>{Math.random()<s&&this.triggerDataBurst(i,a)},200/a),this.isPlaying=!0)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.isPlaying=!1}triggerDataBurst(e,t){const s=this.audioContext.currentTime,i=.05+Math.random()*.2;for(let a=0;a<e;a++){const n=200+Math.random()*8e3,r=s+a*i/e,o=this.audioContext.createOscillator(),l=this.audioContext.createGain(),c=this.audioContext.createBiquadFilter();o.type=Math.random()<.5?"square":"sawtooth",o.frequency.value=n,c.type="bandpass",c.frequency.value=n,c.Q.value=10+Math.random()*20,l.gain.setValueAtTime(0,r),l.gain.linearRampToValueAtTime(.3/e,r+.001),l.gain.linearRampToValueAtTime(0,r+i/e),o.connect(c),c.connect(l),this.masterConnection&&this.masterConnection(l),o.start(r),o.stop(r+i/e+.001)}}updateParameter(e,t){}}class Q{constructor(e,t){this.audioContext=e,this.nodes={carrier:null,modulator:null,modGain:null,gain:null,lfo:null,lfoGain:null},this.isPlaying=!1}start(e){if(this.isPlaying)return;const{carrierFreq:t,modIndex:s,ratio:i,lfoSpeed:a}=e;s!==0&&(this.nodes.carrier=this.audioContext.createOscillator(),this.nodes.carrier.type="sine",this.nodes.carrier.frequency.value=t,this.nodes.modulator=this.audioContext.createOscillator(),this.nodes.modulator.type="sine",this.nodes.modulator.frequency.value=t*i,this.nodes.modGain=this.audioContext.createGain(),this.nodes.modGain.gain.value=s*1e3,this.nodes.gain=this.audioContext.createGain(),this.nodes.gain.gain.value=.2,this.nodes.modulator.connect(this.nodes.modGain),this.nodes.modGain.connect(this.nodes.carrier.frequency),this.nodes.carrier.connect(this.nodes.gain),a>0&&(this.nodes.lfo=this.audioContext.createOscillator(),this.nodes.lfoGain=this.audioContext.createGain(),this.nodes.lfo.frequency.value=a,this.nodes.lfoGain.gain.value=s*500,this.nodes.lfo.connect(this.nodes.lfoGain),this.nodes.lfoGain.connect(this.nodes.modGain.gain),this.nodes.lfo.start()),this.nodes.carrier.start(),this.nodes.modulator.start(),this.isPlaying=!0)}stop(){["carrier","modulator","lfo"].forEach(e=>{if(this.nodes[e])try{this.nodes[e].stop(),this.nodes[e].disconnect()}catch{}}),["modGain","gain","lfoGain"].forEach(e=>{if(this.nodes[e])try{this.nodes[e].disconnect()}catch{}}),Object.keys(this.nodes).forEach(e=>{this.nodes[e]=null}),this.isPlaying=!1}updateParameter(e,t){switch(e){case"carrier":if(this.nodes.carrier&&(this.nodes.carrier.frequency.value=t,this.nodes.modulator)){const s=parseFloat(document.getElementById("fmRatio").value);this.nodes.modulator.frequency.value=t*s}break;case"index":this.nodes.modGain&&(this.nodes.modGain.gain.value=t/100*1e3),this.nodes.lfoGain&&(this.nodes.lfoGain.gain.value=t/100*500);break;case"ratio":this.nodes.modulator&&this.nodes.carrier&&(this.nodes.modulator.frequency.value=this.nodes.carrier.frequency.value*t);break;case"lfo":this.nodes.lfo&&(this.nodes.lfo.frequency.value=t);break}}getOutputNode(){return this.nodes.gain}}class W{constructor(e,t){this.audioContext=e,this.nodes={source:null,gain:null,filter:null},this.isPlaying=!1}start(e){if(this.isPlaying)return;const{type:t,level:s,filterFreq:i}=e;if(s===0)return;this.nodes.source=this.audioContext.createBufferSource(),this.nodes.gain=this.audioContext.createGain(),this.nodes.filter=this.audioContext.createBiquadFilter();const a=this.audioContext.sampleRate*2,n=this.audioContext.createBuffer(1,a,this.audioContext.sampleRate),r=n.getChannelData(0);this.generateNoiseData(r,t),this.nodes.source.buffer=n,this.nodes.source.loop=!0,this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=i,this.nodes.gain.gain.value=s*.1,this.nodes.source.connect(this.nodes.filter),this.nodes.filter.connect(this.nodes.gain),this.nodes.source.start(),this.isPlaying=!0}stop(){if(this.nodes.source)try{this.nodes.source.stop(),this.nodes.source.disconnect()}catch{}if(this.nodes.filter)try{this.nodes.filter.disconnect()}catch{}if(this.nodes.gain)try{this.nodes.gain.disconnect()}catch{}this.nodes.source=null,this.nodes.filter=null,this.nodes.gain=null,this.isPlaying=!1}generateNoiseData(e,t){switch(t){case"white":for(let h=0;h<e.length;h++)e[h]=Math.random()*2-1;break;case"pink":let s=0,i=0,a=0,n=0,r=0,o=0,l=0;for(let h=0;h<e.length;h++){const d=Math.random()*2-1;s=.99886*s+d*.0555179,i=.99332*i+d*.0750759,a=.969*a+d*.153852,n=.8665*n+d*.3104856,r=.55*r+d*.5329522,o=-.7616*o-d*.016898,e[h]=(s+i+a+n+r+o+l+d*.5362)*.11,l=d*.115926}break;case"brown":let c=0;for(let h=0;h<e.length;h++){const d=Math.random()*2-1;e[h]=(c+.02*d)/1.02,c=e[h],e[h]*=2}break;case"crackle":for(let h=0;h<e.length;h++)e[h]=Math.random()<.01?(Math.random()*2-1)*.5:0;break}}updateParameter(e,t){switch(e){case"level":this.nodes.gain&&(this.nodes.gain.gain.value=t*.1);break;case"filter":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break}}getOutputNode(){return this.nodes.gain}}class _{constructor(e,t){this.audioContext=e,this.scheduler=null,this.isPlaying=!1,this.masterConnection=null,this.step=0}start(e,t){if(this.isPlaying)return;const{level:s,baseFreq:i,resonance:a,decay:n,speed:r,tempo:o}=e;if(this.masterConnection=t,s===0)return;const l=[1,0,.5,0,1,0,.3,.8,0,.6,0,1,0,.4,0,.7],c=[0,0,12,0,0,7,3,5,0,10,0,0,15,3,0,7],h=6e4/(o*4*r);this.scheduler=setInterval(()=>{const d=this.step%l.length;if(l[d]>0){const f=l[d]*s,m=c[d],g=i*Math.pow(2,m/12);this.triggerAcidNote(g,f,n,a)}this.step++},h),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.step=0,this.isPlaying=!1}triggerAcidNote(e,t,s,i){const a=this.audioContext.currentTime,n=this.audioContext.createOscillator();n.type="sawtooth",n.frequency.value=e;const r=this.audioContext.createBiquadFilter();r.type="lowpass",r.Q.value=i*30;const o=Math.min(e*8,15e3);r.frequency.setValueAtTime(o,a),r.frequency.exponentialRampToValueAtTime(e,a+s);const l=this.audioContext.createGain();l.gain.setValueAtTime(0,a),l.gain.linearRampToValueAtTime(t*.5,a+.01),l.gain.exponentialRampToValueAtTime(.01,a+s);const c=this.audioContext.createWaveShaper(),h=new Float32Array(256);for(let d=0;d<256;d++){const f=(d-128)/128;h[d]=Math.tanh(f*(1+i*4))}c.curve=h,c.oversample="2x",n.connect(r),r.connect(c),c.connect(l),this.masterConnection&&this.masterConnection(l),n.start(a),n.stop(a+s+.1)}updateParameter(e,t){}}class U{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.sourceBuffer=null,this.isPlaying=!1,this.performanceThrottle=1,this.activeGrains=new Set,this.voiceId="granular"}start(e,t){if(this.isPlaying)return;const{density:s,grainSize:i,pitchSpread:a,panSpread:n}=e;if(this.masterNodes=t,s===0)return;const r=this.audioContext.sampleRate*2;this.sourceBuffer=this.audioContext.createBuffer(1,r,this.audioContext.sampleRate);const o=this.sourceBuffer.getChannelData(0);for(let c=0;c<r;c++){const h=c/this.audioContext.sampleRate;o[c]=Math.sin(2*Math.PI*100*h)*.3+Math.sin(2*Math.PI*237*h)*.2+Math.sin(2*Math.PI*523*h)*.1+(Math.random()*2-1)*.1}const l=this.performanceThrottle<.7?100:50;this.scheduler=setInterval(()=>{Math.random()<s*this.performanceThrottle&&this.triggerGrain(i,a,n)},l),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager&&this.activeGrains.forEach(({source:e,gain:t,panner:s})=>{this.poolManager.pools.bufferSource.release(e),this.poolManager.pools.gain.release(t),s.disconnect()}),this.activeGrains.clear(),this.sourceBuffer=null,this.isPlaying=!1}triggerGrain(e,t,s){const i=this.audioContext.currentTime,a=`${this.voiceId}_grain_${Date.now()}_${Math.random()}`;let n,r,o;const l=Math.random()*(this.sourceBuffer.duration-e/1e3),c=Math.pow(2,(Math.random()-.5)*t*2),h=e/1e3;this.poolManager?(n=this.poolManager.pools.bufferSource.acquireBufferSource(a,this.sourceBuffer,{playbackRate:c}),r=this.poolManager.pools.gain.acquireGain(a,0),o=this.audioContext.createStereoPanner()):(n=this.audioContext.createBufferSource(),n.buffer=this.sourceBuffer,n.playbackRate.value=c,r=this.audioContext.createGain(),o=this.audioContext.createStereoPanner()),r.gain.setValueAtTime(0,i),r.gain.linearRampToValueAtTime(.3,i+h*.1),r.gain.setValueAtTime(.3,i+h*.9),r.gain.linearRampToValueAtTime(0,i+h),o.pan.value=(Math.random()-.5)*2*s,n.connect(r),r.connect(o),this.masterNodes&&(o.connect(this.masterNodes.dryGain),o.connect(this.masterNodes.convolver),o.connect(this.masterNodes.delay)),this.activeGrains.add({source:n,gain:r,panner:o,grainId:a}),n.start(i,l,h),setTimeout(()=>{this.poolManager&&(this.poolManager.pools.bufferSource.release(n),this.poolManager.pools.gain.release(r)),o.disconnect(),this.activeGrains.forEach(d=>{d.grainId===a&&this.activeGrains.delete(d)})},h*1e3+100)}updateParameter(e,t){}setPerformanceThrottle(e){this.performanceThrottle=e}}class K{constructor(e,t){this.audioContext=e,this.scheduler=null,this.nodes={delay:null,delayGain:null,filter:null,lastFreq:null},this.isPlaying=!1,this.masterNodes=null}start(e,t){if(this.isPlaying)return;const{density:s,range:i,speed:a,echo:n,portamento:r}=e;if(this.masterNodes=t,s===0)return;this.nodes.delay=this.audioContext.createDelay(2),this.nodes.delay.delayTime.value=.375,this.nodes.delayGain=this.audioContext.createGain(),this.nodes.delayGain.gain.value=n*.7,this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="highpass",this.nodes.filter.frequency.value=200,this.nodes.delay.connect(this.nodes.delayGain),this.nodes.delayGain.connect(this.nodes.delay);const o=[0,2,4,7,9,12,14,16,19,21],l=220,c=6e4/(120*a*2);this.scheduler=setInterval(()=>{if(Math.random()<s){const h=Math.floor(Math.random()*o.length),d=Math.floor(Math.random()*i),f=l*Math.pow(2,(o[h]+d*12)/12);this.triggerNote(f,r)}},c),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),["delay","delayGain","filter"].forEach(e=>{if(this.nodes[e]){try{this.nodes[e].disconnect()}catch{}this.nodes[e]=null}}),this.nodes.lastFreq=null,this.isPlaying=!1}triggerNote(e,t){const s=this.audioContext.currentTime,i=this.audioContext.createOscillator();i.type="sine";const a=this.audioContext.createGain();a.gain.setValueAtTime(0,s),a.gain.linearRampToValueAtTime(.3,s+.05),a.gain.exponentialRampToValueAtTime(.001,s+1.5),this.nodes.lastFreq?(i.frequency.setValueAtTime(this.nodes.lastFreq,s),i.frequency.exponentialRampToValueAtTime(e,s+t/1e3)):i.frequency.value=e,this.nodes.lastFreq=e;const n=this.audioContext.createOscillator(),r=this.audioContext.createGain();n.frequency.value=5,r.gain.value=3,n.connect(r),r.connect(i.frequency),i.connect(a),a.connect(this.nodes.filter),this.masterNodes&&(this.nodes.filter.connect(this.nodes.delay),this.nodes.filter.connect(this.masterNodes.dryGain),this.nodes.delay.connect(this.masterNodes.dryGain)),i.start(s),n.start(s),i.stop(s+2),n.stop(s+2)}updateParameter(e,t){switch(e){case"echo":this.nodes.delayGain&&(this.nodes.delayGain.gain.value=t*.7);break}}}class J{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.masterNodes=null,this.chordIndex=0,this.voiceId="ambientPad",this.activeVoices=new Set}start(e,t){if(this.isPlaying)return;const{density:s,attack:i,release:a,filterSweep:n,shimmer:r}=e;if(this.masterNodes=t,s===0)return;const o=[[0,4,7,11],[2,5,9,12],[4,7,11,14],[5,9,12,16],[7,11,14,17],[9,12,16,19]],l=8e3/s;this.scheduler=setInterval(()=>{const c=o[this.chordIndex%o.length];this.triggerPadChord(c,i,a,n,r),this.chordIndex++},l),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager?this.activeVoices.forEach(({oscillators:e,gains:t,filters:s,shimmerOscs:i,shimmerGains:a})=>{e.forEach(n=>{this.poolManager.pools.oscillator.release(n)}),t.forEach(n=>{this.poolManager.pools.gain.release(n)}),s.forEach(n=>{n.disconnect()}),i.forEach(n=>{this.poolManager.pools.oscillator.release(n)}),a.forEach(n=>{this.poolManager.pools.gain.release(n)})}):this.activeVoices.forEach(({oscillators:e,gains:t,filters:s,shimmerOscs:i,shimmerGains:a})=>{e.forEach(n=>{try{n.stop(),n.disconnect()}catch{}}),t.forEach(n=>{try{n.disconnect()}catch{}}),s.forEach(n=>{try{n.disconnect()}catch{}}),i.forEach(n=>{try{n.stop(),n.disconnect()}catch{}}),a.forEach(n=>{try{n.disconnect()}catch{}})}),this.activeVoices.clear(),this.chordIndex=0,this.isPlaying=!1}triggerPadChord(e,t,s,i,a){const n=this.audioContext.currentTime,r=110,o=`${this.voiceId}_chord_${Date.now()}`,l=[],c=[],h=[],d=[],f=[];e.forEach((p,u)=>{const y=r*Math.pow(2,p/12);for(let M=0;M<3;M++){const T=`${o}_n${u}_v${M}`;let E,C;this.poolManager?(E=this.poolManager.pools.oscillator.acquireOscillator(T,{type:"sawtooth",frequency:y*(1+(M-1)*.01)}),C=this.poolManager.pools.gain.acquireGain(T,0)):(E=this.audioContext.createOscillator(),E.type="sawtooth",E.frequency.value=y*(1+(M-1)*.01),C=this.audioContext.createGain(),C.gain.value=0),C.gain.setValueAtTime(0,n),C.gain.linearRampToValueAtTime(.1/e.length,n+t),C.gain.setValueAtTime(.1/e.length,n+t+2),C.gain.exponentialRampToValueAtTime(.001,n+t+2+s);const b=this.audioContext.createBiquadFilter();if(b.type="lowpass",b.frequency.setValueAtTime(200,n),b.frequency.exponentialRampToValueAtTime(2e3*(1+i),n+t),b.frequency.exponentialRampToValueAtTime(200,n+t+2+s),b.Q.value=3,E.connect(C),C.connect(b),this.masterNodes&&(b.connect(this.masterNodes.dryGain),b.connect(this.masterNodes.convolver)),a>0&&Math.random()<a){const P=`${T}_shimmer`;let v,k;this.poolManager?(v=this.poolManager.pools.oscillator.acquireOscillator(P,{type:"sine",frequency:y*4}),k=this.poolManager.pools.gain.acquireGain(P,.02*a)):(v=this.audioContext.createOscillator(),v.frequency.value=y*4,v.type="sine",k=this.audioContext.createGain(),k.gain.value=.02*a),v.connect(k),this.masterNodes&&k.connect(this.masterNodes.convolver),this.poolManager||(v.start(n+t*.5),v.stop(n+t+2+s)),d.push(v),f.push(k)}this.poolManager||(E.start(n),E.stop(n+t+2+s)),l.push(E),c.push(C),h.push(b)}});const m={voiceGroupId:o,oscillators:l,gains:c,filters:h,shimmerOscs:d,shimmerGains:f};this.activeVoices.add(m);const g=t+2+s;setTimeout(()=>{this.poolManager&&(l.forEach(p=>{this.poolManager.pools.oscillator.release(p)}),c.forEach(p=>{this.poolManager.pools.gain.release(p)}),d.forEach(p=>{this.poolManager.pools.oscillator.release(p)}),f.forEach(p=>{this.poolManager.pools.gain.release(p)})),h.forEach(p=>{p.disconnect()}),this.activeVoices.delete(m)},g*1e3+100)}updateParameter(e,t){}}class X{constructor(e,t){this.audioContext=e,this.scheduler=null,this.isPlaying=!1,this.masterNodes=null,this.noteIndex=0,this.direction=1}start(e,t){if(this.isPlaying)return;const{enable:s,pattern:i,speed:a,octaves:n,gate:r,tempo:o}=e;if(this.masterNodes=t,s===0)return;const l=[0,3,5,7,10],c=6e4/(o*a/4);this.scheduler=setInterval(()=>{if(Math.random()<s){let h=[];for(let m=0;m<n;m++)l.forEach(g=>h.push(g+m*12));let d;switch(i){case"up":d=h[this.noteIndex%h.length],this.noteIndex++;break;case"down":d=h[h.length-1-this.noteIndex%h.length],this.noteIndex++;break;case"updown":this.noteIndex>=h.length-1&&(this.direction=-1),this.noteIndex<=0&&(this.direction=1),d=h[this.noteIndex],this.noteIndex+=this.direction;break;case"random":d=h[Math.floor(Math.random()*h.length)];break}const f=220*Math.pow(2,d/12);this.triggerNote(f,c*r)}},c),this.isPlaying=!0}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.noteIndex=0,this.direction=1,this.isPlaying=!1}triggerNote(e,t){const s=this.audioContext.currentTime,i=this.audioContext.createOscillator();i.type="square",i.frequency.value=e;const a=this.audioContext.createGain();a.gain.setValueAtTime(0,s),a.gain.linearRampToValueAtTime(.2,s+.01),a.gain.setValueAtTime(.2,s+t/1e3-.01),a.gain.linearRampToValueAtTime(0,s+t/1e3);const n=this.audioContext.createBiquadFilter();n.type="lowpass",n.frequency.value=e*4,n.Q.value=5,i.connect(a),a.connect(n),this.masterNodes&&(n.connect(this.masterNodes.dryGain),n.connect(this.masterNodes.delay)),i.start(s),i.stop(s+t/1e3)}updateParameter(e,t){}}class Y{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],gains:[],filter:null,mixer:null},this.scheduler=null,this.isPlaying=!1,this.voiceId="chord",this.currentChordIndex=0,this.progressions={major:[[0,4,7,12],[5,9,12,17],[7,11,14,19],[0,4,7,12]],minor:[[0,3,7,12],[5,8,12,17],[7,10,14,19],[0,3,7,12]],jazz:[[0,4,7,11],[2,5,9,12],[7,11,14,17],[0,4,7,10]],suspended:[[0,5,7,12],[2,7,9,14],[7,12,14,19],[0,5,7,12]]}}start(e,t){var l;if(this.isPlaying)return;const{density:s,progression:i,voicing:a,brightness:n,spread:r}=e;if(this.masterConnection=t,s===0)return;this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=n,this.nodes.filter.Q.value=2,this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.3,this.nodes.filter.connect(this.nodes.mixer),this.masterConnection&&this.masterConnection(this.nodes.mixer);const o=60/parseFloat(((l=document.getElementById("chordTempo"))==null?void 0:l.value)||60)*1e3;this.playChord(e),this.scheduler=setInterval(()=>{this.playChord(e)},o),this.isPlaying=!0}playChord(e){var h;const{progression:t,voicing:s,brightness:i,spread:a}=e,n=parseFloat(((h=document.getElementById("chordRoot"))==null?void 0:h.value)||220);this.stopCurrentChord();const r=this.progressions[t]||this.progressions.major,o=r[this.currentChordIndex%r.length],l={close:[1,1,1,1],open:[.5,1,1,2],drop2:[.5,1,2,1],spread:[.25,.5,1,2]},c=l[s]||l.close;o.forEach((d,f)=>{const m=n*Math.pow(2,d/12)*c[f],g=`${this.voiceId}_osc_${f}`;let p,u;this.poolManager?(p=this.poolManager.pools.oscillator.acquireOscillator(g,{type:"triangle",frequency:m}),u=this.poolManager.pools.gain.acquireGain(g,0)):(p=this.audioContext.createOscillator(),u=this.audioContext.createGain(),p.type="triangle",p.frequency.value=m,u.gain.value=0),p.detune.value=(Math.random()-.5)*a;const y=this.audioContext.currentTime;u.gain.setValueAtTime(0,y),u.gain.linearRampToValueAtTime(.2/o.length,y+.05),u.gain.exponentialRampToValueAtTime(.15/o.length,y+.5),p.connect(u),u.connect(this.nodes.filter),this.poolManager||p.start(),this.nodes.oscillators.push(p),this.nodes.gains.push(u)}),this.currentChordIndex++}stopCurrentChord(){this.poolManager?(this.nodes.oscillators.forEach((e,t)=>{this.poolManager.pools.oscillator.release(e)}),this.nodes.gains.forEach((e,t)=>{this.poolManager.pools.gain.release(e)})):(this.nodes.oscillators.forEach(e=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.gains.forEach(e=>{try{e.disconnect()}catch{}})),this.nodes.oscillators=[],this.nodes.gains=[]}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.stopCurrentChord(),this.nodes.filter&&(this.nodes.filter.disconnect(),this.nodes.filter=null),this.nodes.mixer&&(this.nodes.mixer.disconnect(),this.nodes.mixer=null),this.currentChordIndex=0,this.isPlaying=!1}updateParameter(e,t){switch(e){case"brightness":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break;case"volume":this.nodes.mixer&&(this.nodes.mixer.gain.value=t);break}}getOutputNode(){return this.nodes.mixer}}class Z{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],formantFilters:[],gains:[],mixer:null},this.scheduler=null,this.isPlaying=!1,this.voiceId="vocal",this.formants={a:{f1:700,f2:1220,f3:2600},e:{f1:400,f2:2200,f3:2900},i:{f1:300,f2:2700,f3:3300},o:{f1:450,f2:800,f3:2830},u:{f1:325,f2:700,f3:2530},ah:{f1:640,f2:1190,f3:2390},oo:{f1:300,f2:870,f3:2240}},this.consonants={s:{type:"highpass",freq:4e3,Q:5},sh:{type:"bandpass",freq:2500,Q:3},f:{type:"highpass",freq:1200,Q:10},k:{type:"bandpass",freq:1500,Q:20},t:{type:"highpass",freq:3e3,Q:15}}}start(e,t){if(this.isPlaying)return;const{density:s,vowel:i,pitch:a,vibrato:n,whisper:r}=e;this.masterConnection=t,s!==0&&(this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.5,this.masterConnection&&this.masterConnection(this.nodes.mixer),this.scheduler=setInterval(()=>{Math.random()<s&&(Math.random()>r?this.triggerVowel(i,a,n):this.triggerConsonant())},200),this.isPlaying=!0)}triggerVowel(e,t,s){const i=this.audioContext.currentTime,a=.2+Math.random()*.8,n=`${this.voiceId}_vowel_${Date.now()}`,r=this.formants[e]||this.formants.a;let o,l;if(this.poolManager?(o=this.poolManager.pools.oscillator.acquireOscillator(`${n}_fund`,{type:"sawtooth",frequency:t}),l=this.poolManager.pools.gain.acquireGain(`${n}_fund_gain`,0)):(o=this.audioContext.createOscillator(),l=this.audioContext.createGain(),o.type="sawtooth",o.frequency.value=t,l.gain.value=0),s>0){const h=this.audioContext.createOscillator(),d=this.audioContext.createGain();h.frequency.value=4+Math.random()*3,d.gain.value=t*s*.02,h.connect(d),d.connect(o.frequency),h.start(),setTimeout(()=>{h.stop(),h.disconnect(),d.disconnect()},a*1e3)}const c=[];Object.values(r).forEach((h,d)=>{const f=this.audioContext.createBiquadFilter();f.type="bandpass",f.frequency.value=h,f.Q.value=10;const m=this.audioContext.createGain();m.gain.value=d===0?.5:.3/(d+1),o.connect(f),f.connect(m),m.connect(this.nodes.mixer),this.nodes.formantFilters.push(f),c.push(m)}),l.gain.setValueAtTime(0,i),l.gain.linearRampToValueAtTime(.3,i+.01),l.gain.exponentialRampToValueAtTime(.2,i+a*.7),l.gain.exponentialRampToValueAtTime(.001,i+a),o.connect(l),this.poolManager||o.start(),setTimeout(()=>{if(this.poolManager)this.poolManager.pools.oscillator.release(o),this.poolManager.pools.gain.release(l);else try{o.stop(),o.disconnect(),l.disconnect()}catch{}this.nodes.formantFilters.forEach(h=>{h.disconnect()}),c.forEach(h=>{h.disconnect()}),this.nodes.formantFilters=this.nodes.formantFilters.filter(h=>!this.nodes.formantFilters.includes(h))},a*1e3+100)}triggerConsonant(){const e=this.audioContext.currentTime,t=.05+Math.random()*.1,s=this.audioContext.sampleRate*t,i=this.audioContext.createBuffer(1,s,this.audioContext.sampleRate),a=i.getChannelData(0);for(let h=0;h<s;h++)a[h]=Math.random()*2-1;const n=this.audioContext.createBufferSource();n.buffer=i;const r=Object.keys(this.consonants),o=this.consonants[r[Math.floor(Math.random()*r.length)]],l=this.audioContext.createBiquadFilter();l.type=o.type,l.frequency.value=o.freq,l.Q.value=o.Q;const c=this.audioContext.createGain();c.gain.setValueAtTime(0,e),c.gain.linearRampToValueAtTime(.3,e+.005),c.gain.exponentialRampToValueAtTime(.001,e+t),n.connect(l),l.connect(c),c.connect(this.nodes.mixer),n.start(),n.stop(e+t)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.nodes.oscillators.forEach(e=>{try{e.stop(),e.disconnect()}catch{}}),this.nodes.formantFilters.forEach(e=>{try{e.disconnect()}catch{}}),this.nodes.gains.forEach(e=>{try{e.disconnect()}catch{}}),this.nodes.mixer&&(this.nodes.mixer.disconnect(),this.nodes.mixer=null),this.nodes.oscillators=[],this.nodes.formantFilters=[],this.nodes.gains=[],this.isPlaying=!1}updateParameter(e,t){switch(e){case"volume":this.nodes.mixer&&(this.nodes.mixer.gain.value=t);break}}}class ee{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.voiceId="karplus",this.activeStrings=new Set}start(e,t){if(this.isPlaying)return;const{density:s,pitch:i,damping:a,brightness:n,pluckHardness:r}=e;this.masterConnection=t,s!==0&&(this.scheduler=setInterval(()=>{if(Math.random()<s){const o=this.getRandomNote(i);this.pluckString(o,a,n,r)}},200),this.isPlaying=!0)}getRandomNote(e){const t=[0,2,4,5,7,9,11],s=2,i=t[Math.floor(Math.random()*t.length)],a=Math.floor(Math.random()*s);return e*Math.pow(2,(i+a*12)/12)}pluckString(e,t,s,i){this.audioContext.currentTime;const a=`${this.voiceId}_string_${Date.now()}_${Math.random()}`,n=1/e,r=this.audioContext.sampleRate,o=Math.round(n*r),l=this.audioContext.createBuffer(1,o,r),c=l.getChannelData(0);for(let u=0;u<o;u++)u<o*i?c[u]=Math.random()*2-1:c[u]=(Math.random()*2-1)*(1-u/o);const h=this.audioContext.createBufferSource();h.buffer=l;const d=this.audioContext.createDelay(1);d.delayTime.value=n;const f=this.audioContext.createBiquadFilter();f.type="lowpass",f.frequency.value=s;const m=this.audioContext.createGain();m.gain.value=t;const g=this.audioContext.createGain();g.gain.value=.3,h.connect(d),d.connect(f),f.connect(m),m.connect(d),d.connect(g),this.masterConnection&&this.masterConnection(g),this.activeStrings.add({stringId:a,nodes:{noise:h,delay:d,lowpass:f,feedback:m,output:g}}),h.start();const p=Math.log(.001)/Math.log(t)*n;setTimeout(()=>{try{h.stop(),h.disconnect(),d.disconnect(),f.disconnect(),m.disconnect(),g.disconnect()}catch{}this.activeStrings.forEach(u=>{u.stringId===a&&this.activeStrings.delete(u)})},p*1e3+1e3)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.activeStrings.forEach(({nodes:e})=>{try{e.noise.stop(),Object.values(e).forEach(t=>{t.disconnect()})}catch{}}),this.activeStrings.clear(),this.isPlaying=!1}updateParameter(e,t){}}class te{constructor(e,t){this.audioContext=e,this.poolManager=t,this.nodes={oscillators:[],gains:[],filter:null,mixer:null},this.scheduler=null,this.isPlaying=!1,this.voiceId="additive",this.activeVoices=new Set}start(e,t){if(this.isPlaying)return;const{density:s,fundamental:i,harmonics:a,harmonicDecay:n,inharmonicity:r,brightness:o}=e;this.masterConnection=t,s!==0&&(this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=o,this.nodes.filter.Q.value=1,this.nodes.mixer=this.audioContext.createGain(),this.nodes.mixer.gain.value=.3,this.nodes.filter.connect(this.nodes.mixer),this.masterConnection&&this.masterConnection(this.nodes.mixer),this.scheduler=setInterval(()=>{Math.random()<s&&this.triggerAdditiveVoice(i,a,n,r)},300),this.isPlaying=!0)}triggerAdditiveVoice(e,t,s,i){const a=this.audioContext.currentTime,n=.5+Math.random()*2,r=`${this.voiceId}_voice_${Date.now()}_${Math.random()}`,o=e*(.5+Math.random()),l=[],c=[];for(let h=0;h<t;h++){const d=h+1,f=Math.pow(1+i*.01,d),m=o*d*f;if(m>1e4)continue;let g,p;const u=`${r}_h${d}`;this.poolManager?(g=this.poolManager.pools.oscillator.acquireOscillator(u,{type:"sine",frequency:m}),p=this.poolManager.pools.gain.acquireGain(u,0)):(g=this.audioContext.createOscillator(),p=this.audioContext.createGain(),g.type="sine",g.frequency.value=m,p.gain.value=0);const y=.25/Math.pow(d,s);p.gain.setValueAtTime(0,a),p.gain.linearRampToValueAtTime(y,a+.01),p.gain.setValueAtTime(y,a+n*.8),p.gain.exponentialRampToValueAtTime(.001,a+n),g.detune.value=(Math.random()-.5)*10*d,g.connect(p),p.connect(this.nodes.filter),this.poolManager||g.start(),l.push(g),c.push(p)}this.activeVoices.add({voiceId:r,oscillators:l,gains:c}),setTimeout(()=>{this.poolManager?(l.forEach((h,d)=>{this.poolManager.pools.oscillator.release(h)}),c.forEach((h,d)=>{this.poolManager.pools.gain.release(h)})):(l.forEach(h=>{try{h.stop(),h.disconnect()}catch{}}),c.forEach(h=>{try{h.disconnect()}catch{}})),this.activeVoices.forEach(h=>{h.voiceId===r&&this.activeVoices.delete(h)})},n*1e3+100)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager?this.activeVoices.forEach(({oscillators:e,gains:t})=>{e.forEach(s=>{this.poolManager.pools.oscillator.release(s)}),t.forEach(s=>{this.poolManager.pools.gain.release(s)})}):this.activeVoices.forEach(({oscillators:e,gains:t})=>{e.forEach(s=>{try{s.stop(),s.disconnect()}catch{}}),t.forEach(s=>{try{s.disconnect()}catch{}})}),this.activeVoices.clear(),this.nodes.filter&&(this.nodes.filter.disconnect(),this.nodes.filter=null),this.nodes.mixer&&(this.nodes.mixer.disconnect(),this.nodes.mixer=null),this.isPlaying=!1}updateParameter(e,t){switch(e){case"brightness":this.nodes.filter&&(this.nodes.filter.frequency.value=t);break}}}class se{constructor(e,t){this.audioContext=e,this.poolManager=t,this.scheduler=null,this.isPlaying=!1,this.voiceId="sample",this.activeVoices=new Set,this.sampleBuffers=new Map,this.externalSamples=new Map,this.createBuiltInSamples(),this.loadExternalSamples()}createBuiltInSamples(){const e=this.audioContext.sampleRate,t=e*.5,s=this.audioContext.createBuffer(1,t,e),i=s.getChannelData(0);for(let u=0;u<t;u++){const y=u/e,M=60*Math.exp(-35*y);i[u]=Math.sin(2*Math.PI*M*y)*Math.exp(-10*y),u<100&&(i[u]+=(Math.random()-.5)*.5*(1-u/100))}this.sampleBuffers.set("kick",s);const a=e*.2,n=this.audioContext.createBuffer(1,a,e),r=n.getChannelData(0);for(let u=0;u<a;u++){const y=u/e,M=Math.sin(2*Math.PI*200*y)*.5,T=(Math.random()*2-1)*.5;r[u]=(M+T)*Math.exp(-20*y)}this.sampleBuffers.set("snare",n);const o=e*.1,l=this.audioContext.createBuffer(1,o,e),c=l.getChannelData(0);for(let u=0;u<o;u++){const y=u/e;c[u]=(Math.random()*2-1)*Math.exp(-50*y)}this.sampleBuffers.set("hihat",l);const h=e*.5,d=this.audioContext.createBuffer(1,h,e),f=d.getChannelData(0);for(let u=0;u<h;u++){const y=u/e,M=Math.sin(2*Math.PI*261.63*y),T=Math.sin(2*Math.PI*329.63*y),E=Math.sin(2*Math.PI*392*y),C=Math.sin(2*Math.PI*493.88*y);f[u]=(M+T*.8+E*.6+C*.4)*.25*Math.exp(-2*y)}this.sampleBuffers.set("chord",d);const m=e*1,g=this.audioContext.createBuffer(1,m,e),p=g.getChannelData(0);for(let u=0;u<m;u++){const y=u/e,M=Math.sin(2*Math.PI*55*y),T=Math.sin(2*Math.PI*110*y)*.3,E=Math.sin(2*Math.PI*165*y)*.1;p[u]=(M+T+E)*Math.exp(-1*y)}this.sampleBuffers.set("bass",g)}start(e,t){if(this.isPlaying)return;const{density:s,sample:i,pitch:a,reverse:n,chop:r,scatter:o}=e;if(this.masterConnection=t,s===0)return;const l=200;this.scheduler=setInterval(()=>{if(Math.random()<s){const c=o>0?Math.random()*o*100:0;setTimeout(()=>{this.triggerSample(i,a,n,r)},c)}},l),this.isPlaying=!0}triggerSample(e,t,s,i){const a=this.sampleBuffers.get(e)||this.externalSamples.get(e);if(!a)return;const n=this.audioContext.currentTime,r=`${this.voiceId}_${Date.now()}_${Math.random()}`;let o,l;const c=i>0?a.duration*(1-i):a.duration,h=i>0?Math.random()*(a.duration-c):0;this.poolManager?(o=this.poolManager.pools.bufferSource.acquireBufferSource(r,a,{playbackRate:s?-t:t,loop:!1}),l=this.poolManager.pools.gain.acquireGain(r,0)):(o=this.audioContext.createBufferSource(),o.buffer=a,o.playbackRate.value=s?-t:t,l=this.audioContext.createGain(),l.gain.value=0),l.gain.setValueAtTime(0,n),l.gain.linearRampToValueAtTime(.7,n+.001),i>0&&(l.gain.setValueAtTime(.7,n+c-.01),l.gain.linearRampToValueAtTime(0,n+c));const d=this.audioContext.createStereoPanner();d.pan.value=(Math.random()-.5)*.8,o.connect(l),l.connect(d),this.masterConnection&&this.masterConnection(d),this.activeVoices.add({voiceId:r,source:o,gain:l,panner:d}),s?o.start(n,a.duration-h-c,c):o.start(n,h,c);const f=c/Math.abs(t)*1e3+100;setTimeout(()=>{this.poolManager&&(this.poolManager.pools.bufferSource.release(o),this.poolManager.pools.gain.release(l)),d.disconnect(),this.activeVoices.forEach(m=>{m.voiceId===r&&this.activeVoices.delete(m)})},f)}stop(){this.scheduler&&(clearInterval(this.scheduler),this.scheduler=null),this.poolManager?this.activeVoices.forEach(({source:e,gain:t,panner:s})=>{this.poolManager.pools.bufferSource.release(e),this.poolManager.pools.gain.release(t),s.disconnect()}):this.activeVoices.forEach(({source:e,gain:t,panner:s})=>{try{e.stop(),e.disconnect(),t.disconnect(),s.disconnect()}catch{}}),this.activeVoices.clear(),this.isPlaying=!1}updateParameter(e,t){}async loadExternalSamples(){try{if(window.location.protocol==="file:"){console.log("Running from file:// protocol - external samples disabled");return}const e=await fetch("/samples/");if(e.ok){const t=await e.text(),s=[".wav",".mp3",".ogg",".m4a",".flac"],i=t.match(/href="([^"]+)"/g);if(i){const a=i.map(n=>n.match(/href="([^"]+)"/)[1]).filter(n=>s.some(r=>n.toLowerCase().endsWith(r)));for(const n of a)try{const r=await fetch(`/samples/${n}`);if(r.ok){const o=await r.arrayBuffer(),l=await this.audioContext.decodeAudioData(o),c=n.replace(/\.[^/.]+$/,"");this.externalSamples.set(c,l),console.log(`Loaded external sample: ${c}`)}}catch(r){console.warn(`Failed to load sample ${n}:`,r)}}}}catch(e){console.warn("Could not load external samples:",e)}this.updateSampleList()}updateSampleList(){const e=document.getElementById("sampleSelect");if(e){e.innerHTML="";const t=document.createElement("optgroup");t.label="Built-in";for(const[s]of this.sampleBuffers){const i=document.createElement("option");i.value=s,i.textContent=s,t.appendChild(i)}if(e.appendChild(t),this.externalSamples.size>0){const s=document.createElement("optgroup");s.label="External";for(const[i]of this.externalSamples){const a=document.createElement("option");a.value=i,a.textContent=i,s.appendChild(a)}e.appendChild(s)}e.options.length>0&&(e.selectedIndex=0)}}}class ie{constructor(e){this.audioContext=e,this.nodes={convolver:null,wetGain:null,dryGain:null,input:null,output:null},this.isInitialized=!1}initialize(e=1){this.isInitialized||(this.nodes.convolver=this.audioContext.createConvolver(),this.nodes.wetGain=this.audioContext.createGain(),this.nodes.dryGain=this.audioContext.createGain(),this.nodes.input=this.audioContext.createGain(),this.nodes.output=this.audioContext.createGain(),this.updateImpulse(e),this.setMix(.3),this.nodes.input.connect(this.nodes.dryGain),this.nodes.input.connect(this.nodes.convolver),this.nodes.convolver.connect(this.nodes.wetGain),this.nodes.dryGain.connect(this.nodes.output),this.nodes.wetGain.connect(this.nodes.output),this.isInitialized=!0)}updateImpulse(e=1){const t=e<.7?1:2,s=z(this.audioContext,t,2);this.nodes.convolver&&(this.nodes.convolver.buffer=s)}setMix(e){const t=Math.max(0,Math.min(1,e));this.nodes.wetGain&&(this.nodes.wetGain.gain.value=t),this.nodes.dryGain&&(this.nodes.dryGain.gain.value=1-t*.5)}connect(e){this.nodes.output&&e&&this.nodes.output.connect(e)}disconnect(){Object.values(this.nodes).forEach(e=>{if(e&&e.disconnect)try{e.disconnect()}catch{}})}getInputNode(){return this.nodes.input}getOutputNode(){return this.nodes.output}getConvolverNode(){return this.nodes.convolver}}class ae{constructor(e){this.audioContext=e,this.nodes={delay:null,feedback:null,wetGain:null,dryGain:null,filter:null,input:null,output:null},this.isInitialized=!1}initialize(){this.isInitialized||(this.nodes.delay=this.audioContext.createDelay(2),this.nodes.feedback=this.audioContext.createGain(),this.nodes.wetGain=this.audioContext.createGain(),this.nodes.dryGain=this.audioContext.createGain(),this.nodes.filter=this.audioContext.createBiquadFilter(),this.nodes.filter.type="lowpass",this.nodes.filter.frequency.value=5e3,this.nodes.input=this.audioContext.createGain(),this.nodes.output=this.audioContext.createGain(),this.setDelayTime(.375),this.setFeedback(.4),this.setMix(.3),this.nodes.input.connect(this.nodes.dryGain),this.nodes.input.connect(this.nodes.delay),this.nodes.delay.connect(this.nodes.filter),this.nodes.filter.connect(this.nodes.feedback),this.nodes.feedback.connect(this.nodes.delay),this.nodes.filter.connect(this.nodes.wetGain),this.nodes.dryGain.connect(this.nodes.output),this.nodes.wetGain.connect(this.nodes.output),this.isInitialized=!0)}setDelayTime(e){if(this.nodes.delay){const t=Math.max(0,Math.min(2,e));this.nodes.delay.delayTime.value=t}}setFeedback(e){if(this.nodes.feedback){const t=Math.max(0,Math.min(.95,e));this.nodes.feedback.gain.value=t*.8}}setMix(e){const t=Math.max(0,Math.min(1,e));this.nodes.wetGain&&(this.nodes.wetGain.gain.value=t),this.nodes.dryGain&&(this.nodes.dryGain.gain.value=1)}setFilterFrequency(e){this.nodes.filter&&(this.nodes.filter.frequency.value=e)}syncToTempo(e,t="8d"){const s=60/e;let i;switch(t){case"4":i=s;break;case"8":i=s/2;break;case"8d":i=s*.75;break;case"16":i=s/4;break;case"8t":i=s/3;break;default:i=s*.75}this.setDelayTime(i)}connect(e){this.nodes.output&&e&&this.nodes.output.connect(e)}disconnect(){Object.values(this.nodes).forEach(e=>{if(e&&e.disconnect)try{e.disconnect()}catch{}})}getInputNode(){return this.nodes.input}getOutputNode(){return this.nodes.output}getDelayNode(){return this.nodes.delay}}class ne{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.compressor=this.audioContext.createDynamicsCompressor(),this.compressor.threshold.value=-24,this.compressor.knee.value=30,this.compressor.ratio.value=12,this.compressor.attack.value=.003,this.compressor.release.value=.25,this.limiter=this.audioContext.createDynamicsCompressor(),this.limiter.threshold.value=-3,this.limiter.knee.value=0,this.limiter.ratio.value=20,this.limiter.attack.value=.001,this.limiter.release.value=.1,this.makeupGain=this.audioContext.createGain(),this.makeupGain.gain.value=1,this.dryGain=this.audioContext.createGain(),this.wetGain=this.audioContext.createGain(),this.dryGain.gain.value=0,this.wetGain.gain.value=1,this.input.connect(this.dryGain),this.input.connect(this.compressor),this.compressor.connect(this.limiter),this.limiter.connect(this.makeupGain),this.makeupGain.connect(this.wetGain),this.dryGain.connect(this.output),this.wetGain.connect(this.output),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=256,this.makeupGain.connect(this.analyser)}setThreshold(e){const t=-60+e/100*60;this.compressor.threshold.setValueAtTime(t,this.audioContext.currentTime)}setRatio(e){const t=1+e/100*19;this.compressor.ratio.setValueAtTime(t,this.audioContext.currentTime)}setAttack(e){const t=.001+e/100*.999;this.compressor.attack.setValueAtTime(t,this.audioContext.currentTime)}setRelease(e){const t=.01+e/100*1.99;this.compressor.release.setValueAtTime(t,this.audioContext.currentTime)}setKnee(e){const t=e/100*40;this.compressor.knee.setValueAtTime(t,this.audioContext.currentTime)}setMakeupGain(e){const t=e/100*2;this.makeupGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setLimiterThreshold(e){const t=-12+e/100*12;this.limiter.threshold.setValueAtTime(t,this.audioContext.currentTime)}setMix(e){const t=e/100,s=1-t;this.dryGain.gain.setValueAtTime(s,this.audioContext.currentTime),this.wetGain.gain.setValueAtTime(t,this.audioContext.currentTime)}getInputNode(){return this.input}getOutputNode(){return this.output}getReductionAmount(){return this.compressor.reduction}disconnect(){this.input.disconnect(),this.output.disconnect(),this.compressor.disconnect(),this.limiter.disconnect(),this.makeupGain.disconnect(),this.dryGain.disconnect(),this.wetGain.disconnect(),this.analyser.disconnect()}}class oe{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.bands={highpass:this.createBand("highpass",80,.7),lowShelf:this.createBand("lowshelf",320,.7),lowMid:this.createBand("peaking",650,.7),mid:this.createBand("peaking",1e3,.7),highMid:this.createBand("peaking",3200,.7),highShelf:this.createBand("highshelf",4800,.7),lowpass:this.createBand("lowpass",12e3,.7)};let t=this.input;Object.values(this.bands).forEach(s=>{t.connect(s.filter),t=s.filter}),t.connect(this.output),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2048,this.output.connect(this.analyser)}createBand(e,t,s){const i=this.audioContext.createBiquadFilter();return i.type=e,i.frequency.value=t,i.Q.value=s,i.gain.value=0,{filter:i,type:e,defaultFreq:t,defaultQ:s}}setHighpass(e){this.bands.highpass.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowShelfGain(e){this.bands.lowShelf.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setLowShelfFreq(e){this.bands.lowShelf.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowMidGain(e){this.bands.lowMid.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setLowMidFreq(e){this.bands.lowMid.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowMidQ(e){this.bands.lowMid.filter.Q.setValueAtTime(e,this.audioContext.currentTime)}setMidGain(e){this.bands.mid.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setMidFreq(e){this.bands.mid.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setMidQ(e){this.bands.mid.filter.Q.setValueAtTime(e,this.audioContext.currentTime)}setHighMidGain(e){this.bands.highMid.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setHighMidFreq(e){this.bands.highMid.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setHighMidQ(e){this.bands.highMid.filter.Q.setValueAtTime(e,this.audioContext.currentTime)}setHighShelfGain(e){this.bands.highShelf.filter.gain.setValueAtTime(e,this.audioContext.currentTime)}setHighShelfFreq(e){this.bands.highShelf.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLowpass(e){this.bands.lowpass.filter.frequency.setValueAtTime(e,this.audioContext.currentTime)}applyPreset(e){switch(e){case"flat":this.resetAllBands();break;case"brighteness":this.setLowShelfGain(-2),this.setMidGain(1),this.setHighMidGain(3),this.setHighShelfGain(4);break;case"warmth":this.setLowShelfGain(3),this.setLowMidGain(2),this.setMidGain(-1),this.setHighShelfGain(-3);break;case"presence":this.setLowMidGain(-2),this.setMidGain(3),this.setHighMidGain(4);break;case"telephone":this.setHighpass(300),this.setLowpass(3400),this.setMidGain(6);break;case"radio":this.setHighpass(100),this.setLowpass(1e4),this.setLowShelfGain(-3),this.setHighShelfGain(-3),this.setMidGain(2);break}}resetAllBands(){Object.values(this.bands).forEach(e=>{(e.type==="peaking"||e.type==="lowshelf"||e.type==="highshelf")&&(e.filter.gain.value=0),e.filter.frequency.value=e.defaultFreq,e.filter.Q.value=e.defaultQ})}getFrequencyResponse(e){const t=new Float32Array(e.length),s=new Float32Array(e.length),i=new Float32Array(e.length),a=new Float32Array(e.length);for(let n=0;n<e.length;n++)t[n]=1,s[n]=0;return Object.values(this.bands).forEach(n=>{n.filter.getFrequencyResponse(e,i,a);for(let r=0;r<e.length;r++)t[r]*=i[r],s[r]+=a[r]}),{magnitude:t,phase:s}}getInputNode(){return this.input}getOutputNode(){return this.output}disconnect(){this.input.disconnect(),this.output.disconnect(),Object.values(this.bands).forEach(e=>{e.filter.disconnect()}),this.analyser.disconnect()}}class re{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.preGain=this.audioContext.createGain(),this.preGain.gain.value=1,this.waveshaper=this.audioContext.createWaveShaper(),this.waveshaper.oversample="4x",this.postGain=this.audioContext.createGain(),this.postGain.gain.value=.5,this.toneFilter=this.audioContext.createBiquadFilter(),this.toneFilter.type="lowpass",this.toneFilter.frequency.value=3e3,this.toneFilter.Q.value=.7,this.preFilter=this.audioContext.createBiquadFilter(),this.preFilter.type="highpass",this.preFilter.frequency.value=20,this.dryGain=this.audioContext.createGain(),this.wetGain=this.audioContext.createGain(),this.dryGain.gain.value=0,this.wetGain.gain.value=1,this.input.connect(this.dryGain),this.input.connect(this.preFilter),this.preFilter.connect(this.preGain),this.preGain.connect(this.waveshaper),this.waveshaper.connect(this.toneFilter),this.toneFilter.connect(this.postGain),this.postGain.connect(this.wetGain),this.dryGain.connect(this.output),this.wetGain.connect(this.output),this.setDistortionType("soft")}createDistortionCurve(e,t="soft"){const i=new Float32Array(44100);for(let a=0;a<44100;a++){const n=a*2/44100-1;switch(t){case"soft":i[a]=Math.tanh(n*e);break;case"hard":const r=1/e;n>r?i[a]=1:n<-r?i[a]=-1:i[a]=n*e;break;case"fuzz":const o=e*10;i[a]=Math.sign(n)*Math.min(Math.abs(n*o),1),i[a]=Math.sin(i[a]*Math.PI*.5);break;case"bitcrush":const l=Math.max(1,16-e*2),c=2/Math.pow(2,l);i[a]=Math.round(n/c)*c;break;case"fold":let h=n*e;for(;Math.abs(h)>1;)h=Math.sign(h)*(2-Math.abs(h));i[a]=h;break;case"asymmetric":n>0?i[a]=Math.tanh(n*e*.7):i[a]=Math.tanh(n*e*1.3);break;case"warm":const d=e*.7;i[a]=n*(1-Math.abs(n)*d*.25),i[a]=Math.tanh(i[a]*1.5);break}}return i}setDistortionType(e){this.distortionType=e,this.updateCurve()}setDrive(e){this.driveAmount=1+e/100*99,this.updateCurve();const t=1+e/100*4;this.preGain.gain.setValueAtTime(t,this.audioContext.currentTime)}updateCurve(){this.driveAmount&&this.distortionType&&(this.waveshaper.curve=this.createDistortionCurve(this.driveAmount,this.distortionType))}setTone(e){const t=200+e/100*9800;this.toneFilter.frequency.setValueAtTime(t,this.audioContext.currentTime)}setOutput(e){const t=e/100;this.postGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setMix(e){const t=e/100,s=1-t;this.dryGain.gain.setValueAtTime(s,this.audioContext.currentTime),this.wetGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setPreFilterFreq(e){this.preFilter.frequency.setValueAtTime(e,this.audioContext.currentTime)}applyPreset(e){switch(e){case"clean":this.setDistortionType("warm"),this.setDrive(5),this.setTone(80),this.setOutput(90),this.setMix(50);break;case"crunch":this.setDistortionType("soft"),this.setDrive(40),this.setTone(60),this.setOutput(70),this.setMix(80);break;case"lead":this.setDistortionType("asymmetric"),this.setDrive(70),this.setTone(70),this.setOutput(60),this.setMix(90);break;case"fuzz":this.setDistortionType("fuzz"),this.setDrive(80),this.setTone(40),this.setOutput(50),this.setMix(100);break;case"destroyed":this.setDistortionType("hard"),this.setDrive(95),this.setTone(30),this.setOutput(40),this.setMix(100);break}}getInputNode(){return this.input}getOutputNode(){return this.output}disconnect(){this.input.disconnect(),this.output.disconnect(),this.preGain.disconnect(),this.waveshaper.disconnect(),this.postGain.disconnect(),this.toneFilter.disconnect(),this.preFilter.disconnect(),this.dryGain.disconnect(),this.wetGain.disconnect()}}class le{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.delays=[],this.lfos=[],this.delayGains=[],this.numVoices=3,this.feedbackGain=this.audioContext.createGain(),this.feedbackGain.gain.value=0,this.highpass=this.audioContext.createBiquadFilter(),this.highpass.type="highpass",this.highpass.frequency.value=20,this.dryGain=this.audioContext.createGain(),this.wetGain=this.audioContext.createGain(),this.dryGain.gain.value=.5,this.wetGain.gain.value=.5;for(let t=0;t<this.numVoices;t++){const s=this.audioContext.createDelay(.1);s.delayTime.value=.01+t*.003;const i=this.audioContext.createOscillator();i.type="sine",i.frequency.value=.5+t*.1;const a=this.audioContext.createGain();a.gain.value=.002;const n=this.audioContext.createGain();n.gain.value=1/this.numVoices,i.connect(a),a.connect(s.delayTime),this.delays.push(s),this.lfos.push({osc:i,gain:a}),this.delayGains.push(n),i.start()}this.connectNodes(),this.mode="chorus"}connectNodes(){this.input.connect(this.dryGain),this.input.connect(this.highpass);for(let e=0;e<this.numVoices;e++)this.highpass.connect(this.delays[e]),this.delays[e].connect(this.delayGains[e]),this.delayGains[e].connect(this.wetGain),this.delays[e].connect(this.feedbackGain);this.feedbackGain.connect(this.highpass),this.dryGain.connect(this.output),this.wetGain.connect(this.output)}setMode(e){switch(this.mode=e,e){case"chorus":this.setDelayRange(15,30),this.setModDepth(30),this.setRate(30),this.setFeedback(0),this.setMix(50);break;case"flanger":this.setDelayRange(1,10),this.setModDepth(50),this.setRate(20),this.setFeedback(50),this.setMix(50);break;case"doubler":this.setDelayRange(20,40),this.setModDepth(10),this.setRate(10),this.setFeedback(0),this.setMix(50);break;case"vibrato":this.setDelayRange(5,10),this.setModDepth(80),this.setRate(60),this.setFeedback(0),this.setMix(100);break}}setDelayRange(e,t){const s=e/1e3,i=(t-e)/1e3;for(let a=0;a<this.numVoices;a++){const n=a/this.numVoices*i;this.delays[a].delayTime.setValueAtTime(s+n,this.audioContext.currentTime)}}setRate(e){const t=.1+e/100*9.9;for(let s=0;s<this.numVoices;s++){const i=t*(1+s*.1);this.lfos[s].osc.frequency.setValueAtTime(i,this.audioContext.currentTime)}}setModDepth(e){const t=e/100*.005;for(let s=0;s<this.numVoices;s++)this.lfos[s].gain.gain.setValueAtTime(t,this.audioContext.currentTime)}setFeedback(e){const t=e/100*.9;this.feedbackGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setMix(e){const t=e/100,s=1-t;this.dryGain.gain.setValueAtTime(s,this.audioContext.currentTime),this.wetGain.gain.setValueAtTime(t,this.audioContext.currentTime)}setVoices(e){e=Math.max(1,Math.min(3,e));for(let t=0;t<this.numVoices;t++){const s=t<e?1/e:0;this.delayGains[t].gain.setValueAtTime(s,this.audioContext.currentTime)}}setSpread(e){}getInputNode(){return this.input}getOutputNode(){return this.output}disconnect(){this.input.disconnect(),this.output.disconnect(),this.dryGain.disconnect(),this.wetGain.disconnect(),this.highpass.disconnect(),this.feedbackGain.disconnect();for(let e=0;e<this.numVoices;e++)this.delays[e].disconnect(),this.lfos[e].osc.stop(),this.lfos[e].osc.disconnect(),this.lfos[e].gain.disconnect(),this.delayGains[e].disconnect()}}class ce{constructor(e){this.audioContext=e,this.input=this.audioContext.createGain(),this.sidechain=this.audioContext.createGain(),this.output=this.audioContext.createGain(),this.duckGain=this.audioContext.createGain(),this.duckGain.gain.value=1,this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=256,this.analyser.smoothingTimeConstant=.3,this.threshold=.5,this.ratio=4,this.attack=.005,this.release=.1,this.knee=.1,this.sidechainFilter=this.audioContext.createBiquadFilter(),this.sidechainFilter.type="lowpass",this.sidechainFilter.frequency.value=200,this.sidechainFilter.Q.value=1,this.input.connect(this.duckGain),this.duckGain.connect(this.output),this.sidechain.connect(this.sidechainFilter),this.sidechainFilter.connect(this.analyser),this.startDucking(),this.lfoMode=!1,this.lfo=null,this.lfoGain=null}startDucking(){const e=this.analyser.frequencyBinCount,t=new Float32Array(e),s=()=>{if(!this.lfoMode){this.analyser.getFloatTimeDomainData(t);let i=0;for(let l=0;l<e;l++)i+=t[l]*t[l];const a=Math.sqrt(i/e),n=this.calculateGain(a),r=this.duckGain.gain.value,o=this.audioContext.currentTime;n<r?(this.duckGain.gain.cancelScheduledValues(o),this.duckGain.gain.setValueAtTime(r,o),this.duckGain.gain.linearRampToValueAtTime(n,o+this.attack)):(this.duckGain.gain.cancelScheduledValues(o),this.duckGain.gain.setValueAtTime(r,o),this.duckGain.gain.linearRampToValueAtTime(n,o+this.release))}this.animationFrame=requestAnimationFrame(s)};s()}calculateGain(e){const t=20*Math.log10(Math.max(1e-5,e)),s=20*Math.log10(this.threshold);let i=0;if(t>s){const a=t-s;if(this.knee>0&&a<this.knee){const n=a/this.knee,r=1+(this.ratio-1)*n*n;i=a*(1-1/r)}else i=a*(1-1/this.ratio)}return Math.pow(10,-i/20)}setThreshold(e){this.threshold=.01+e/100*.99}setRatio(e){this.ratio=1+e/100*19}setAttack(e){this.attack=.001+e/100*.049}setRelease(e){this.release=.01+e/100*.49}setKnee(e){this.knee=e/100}setSidechainFilter(e){this.sidechainFilter.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLFOMode(e,t=2){if(this.lfoMode=e,e){if(!this.lfo){this.lfo=this.audioContext.createOscillator(),this.lfo.type="sine",this.lfo.frequency.value=t,this.lfoGain=this.audioContext.createGain(),this.lfoGain.gain.value=.5;const s=this.audioContext.createConstantSource();s.offset.value=.5,this.lfo.connect(this.lfoGain),s.connect(this.duckGain.gain),this.lfoGain.connect(this.duckGain.gain),this.lfo.start(),s.start(),this.lfoOffset=s}}else this.lfo&&(this.lfo.stop(),this.lfo.disconnect(),this.lfoGain.disconnect(),this.lfoOffset.stop(),this.lfoOffset.disconnect(),this.lfo=null,this.lfoGain=null,this.lfoOffset=null,this.duckGain.gain.cancelScheduledValues(this.audioContext.currentTime),this.duckGain.gain.setValueAtTime(1,this.audioContext.currentTime))}setLFORate(e){this.lfo&&this.lfo.frequency.setValueAtTime(e,this.audioContext.currentTime)}setLFODepth(e){if(this.lfoGain){const t=e/100*.5;this.lfoGain.gain.setValueAtTime(t,this.audioContext.currentTime)}}setPumpPattern(e){const s={quarter:2,eighth:4,sixteenth:8,triplet:6};s[e]&&this.setLFORate(s[e])}getInputNode(){return this.input}getSidechainNode(){return this.sidechain}getOutputNode(){return this.output}getCurrentReduction(){const e=this.duckGain.gain.value;return-20*Math.log10(Math.max(1e-5,e))}disconnect(){this.animationFrame&&cancelAnimationFrame(this.animationFrame),this.input.disconnect(),this.output.disconnect(),this.sidechain.disconnect(),this.duckGain.disconnect(),this.analyser.disconnect(),this.sidechainFilter.disconnect(),this.lfo&&(this.lfo.stop(),this.lfo.disconnect(),this.lfoGain.disconnect(),this.lfoOffset.stop(),this.lfoOffset.disconnect())}}class he{constructor(e){this.audioContext=e,this.nodes={input:null,output:null,masterGain:null},this.reverb=new ie(e),this.delay=new ae(e),this.compressor=new ne(e),this.eq=new oe(e),this.distortion=new re(e),this.chorus=new le(e),this.sidechain=new ce(e),this.effectBypassed={compressor:!1,eq:!1,distortion:!1,chorus:!1,sidechain:!1},this.isInitialized=!1}initialize(e=1){this.isInitialized||(this.nodes.input=this.audioContext.createGain(),this.nodes.masterGain=this.audioContext.createGain(),this.nodes.output=this.nodes.masterGain,this.reverb.initialize(e),this.delay.initialize(),this.nodes.input.connect(this.distortion.getInputNode()),this.distortion.getOutputNode().connect(this.eq.getInputNode()),this.eq.getOutputNode().connect(this.compressor.getInputNode()),this.compressor.getOutputNode().connect(this.chorus.getInputNode()),this.chorus.getOutputNode().connect(this.sidechain.getInputNode()),this.sidechain.getOutputNode().connect(this.reverb.getInputNode()),this.sidechain.getOutputNode().connect(this.delay.getInputNode()),this.reverb.connect(this.nodes.masterGain),this.delay.connect(this.nodes.masterGain),this.distortion.setMix(0),this.eq.applyPreset("flat"),this.compressor.setMix(100),this.chorus.setMix(0),this.sidechain.setLFOMode(!1),this.nodes.masterGain.connect(this.audioContext.destination),this.setMasterVolume(.7),this.isInitialized=!0)}setMasterVolume(e){this.nodes.masterGain&&(this.nodes.masterGain.gain.value=Math.max(0,Math.min(1,e)))}setReverbMix(e){this.reverb.setMix(e)}setDelayTime(e){this.delay.setDelayTime(e)}setDelayFeedback(e){this.delay.setFeedback(e)}setDelayMix(e){this.delay.setMix(e)}updatePerformance(e){this.reverb.updateImpulse(e)}getConnectionNodes(){return{dryGain:this.nodes.input,convolver:this.reverb.getConvolverNode(),delay:this.delay.getDelayNode(),sidechain:this.sidechain.getSidechainNode()}}getInputNode(){return this.nodes.input}setCompressorThreshold(e){this.compressor.setThreshold(e)}setCompressorRatio(e){this.compressor.setRatio(e)}setCompressorAttack(e){this.compressor.setAttack(e)}setCompressorRelease(e){this.compressor.setRelease(e)}setCompressorMakeup(e){this.compressor.setMakeupGain(e)}setEQHighpass(e){this.eq.setHighpass(e)}setEQLowShelf(e){this.eq.setLowShelfGain(e)}setEQMidGain(e){this.eq.setMidGain(e)}setEQHighShelf(e){this.eq.setHighShelfGain(e)}setEQPreset(e){this.eq.applyPreset(e)}setDistortionType(e){this.distortion.setDistortionType(e)}setDistortionDrive(e){this.distortion.setDrive(e)}setDistortionTone(e){this.distortion.setTone(e)}setDistortionMix(e){this.distortion.setMix(e)}setChorusMode(e){this.chorus.setMode(e)}setChorusRate(e){this.chorus.setRate(e)}setChorusDepth(e){this.chorus.setModDepth(e)}setChorusMix(e){this.chorus.setMix(e)}setSidechainThreshold(e){this.sidechain.setThreshold(e)}setSidechainRatio(e){this.sidechain.setRatio(e)}setSidechainPumpMode(e,t){this.sidechain.setLFOMode(e),e&&t&&this.sidechain.setPumpPattern(t)}disconnect(){this.reverb.disconnect(),this.delay.disconnect(),this.compressor.disconnect(),this.eq.disconnect(),this.distortion.disconnect(),this.chorus.disconnect(),this.sidechain.disconnect(),Object.values(this.nodes).forEach(e=>{if(e&&e.disconnect)try{e.disconnect()}catch{}})}}class D{constructor(e,t,s=100){this.audioContext=e,this.createNodeFn=t,this.maxSize=s,this.available=[],this.active=new Map,this.totalCreated=0}acquire(e){let t=this.available.pop();return t||(t=this.createNodeFn(this.audioContext),this.totalCreated++),this.active.set(t,{id:e,acquiredAt:Date.now()}),t}release(e){if(!this.active.has(e)){console.warn("Attempting to release untracked node");return}try{if(e.disconnect(),e.frequency&&e.frequency.cancelScheduledValues(0),e.gain&&e.gain.cancelScheduledValues(0),e.detune&&e.detune.cancelScheduledValues(0),e.stop&&typeof e.stop=="function")try{e.stop()}catch{}}catch(t){console.warn("Error cleaning up node:",t)}this.active.delete(e),this.available.length<this.maxSize&&this.available.push(e)}releaseById(e){const t=[];this.active.forEach((s,i)=>{s.id===e&&t.push(i)}),t.forEach(s=>this.release(s))}cleanupOld(e=3e4){const t=Date.now(),s=[];this.active.forEach((i,a)=>{t-i.acquiredAt>e&&s.push(a)}),s.forEach(i=>this.release(i))}getStats(){return{available:this.available.length,active:this.active.size,totalCreated:this.totalCreated,poolEfficiency:this.totalCreated>0?((this.totalCreated-this.active.size)/this.totalCreated*100).toFixed(1)+"%":"0%"}}clear(){Array.from(this.active.keys()).forEach(t=>this.release(t)),this.available=[]}}class de extends D{constructor(e,t=50){super(e,s=>s.createOscillator(),t)}acquireOscillator(e,t={}){const s=this.acquire(e);t.type&&(s.type=t.type),t.frequency!==void 0&&(s.frequency.value=t.frequency),t.detune!==void 0&&(s.detune.value=t.detune);try{s.start()}catch{}return s}}class ue extends D{constructor(e,t=100){super(e,s=>s.createGain(),t)}acquireGain(e,t=1){const s=this.acquire(e);return s.gain.value=t,s}}class me extends D{constructor(e,t=30){super(e,s=>s.createBufferSource(),t)}acquireBufferSource(e,t,s={}){const i=this.acquire(e);return i.buffer=t,s.loop!==void 0&&(i.loop=s.loop),s.playbackRate!==void 0&&(i.playbackRate.value=s.playbackRate),s.loopStart!==void 0&&(i.loopStart=s.loopStart),s.loopEnd!==void 0&&(i.loopEnd=s.loopEnd),i}}class pe{constructor(e){this.audioContext=e,this.pools={oscillator:new de(e),gain:new ue(e),bufferSource:new me(e)},this.cleanupInterval=setInterval(()=>{Object.values(this.pools).forEach(t=>{t.cleanupOld(3e4)})},1e4)}getAllStats(){const e={};return Object.entries(this.pools).forEach(([t,s])=>{e[t]=s.getStats()}),e}destroy(){this.cleanupInterval&&clearInterval(this.cleanupInterval),Object.values(this.pools).forEach(e=>{e.clear()})}}class S{constructor(e){this.audioContext=e,this.attack=.01,this.decay=.1,this.sustain=.7,this.release=.3,this.peakLevel=1}setADSR(e,t,s,i){this.attack=Math.max(.001,e),this.decay=Math.max(.001,t),this.sustain=Math.max(0,Math.min(1,s)),this.release=Math.max(.001,i)}setPeakLevel(e){this.peakLevel=Math.max(0,Math.min(1,e))}applyTo(e,t,s,i=0){const a=t||this.audioContext.currentTime,n=i+this.peakLevel,r=i+this.peakLevel*this.sustain;return e.cancelScheduledValues(a),e.setValueAtTime(i,a),e.linearRampToValueAtTime(n,a+this.attack),e.exponentialRampToValueAtTime(Math.max(.001,r),a+this.attack+this.decay),s!=null&&(e.setValueAtTime(r,s),e.exponentialRampToValueAtTime(Math.max(.001,i),s+this.release)),a+this.attack+this.decay}getTotalDuration(){return this.attack+this.decay+this.release}applyWithCurve(e,t,s,i=0,a="linear",n="exponential"){const r=t||this.audioContext.currentTime,o=i+this.peakLevel,l=i+this.peakLevel*this.sustain;e.cancelScheduledValues(r),e.setValueAtTime(i,r),a==="exponential"&&i>0?e.exponentialRampToValueAtTime(o,r+this.attack):e.linearRampToValueAtTime(o,r+this.attack),e.exponentialRampToValueAtTime(Math.max(.001,l),r+this.attack+this.decay),s!=null&&(e.setValueAtTime(l,s),n==="linear"?e.linearRampToValueAtTime(i,s+this.release):e.exponentialRampToValueAtTime(Math.max(.001,i),s+this.release))}applyOneShot(e,t,s=0){const i=t||this.audioContext.currentTime,a=s+this.peakLevel;return e.cancelScheduledValues(i),e.setValueAtTime(s,i),e.linearRampToValueAtTime(a,i+this.attack),e.exponentialRampToValueAtTime(Math.max(.001,s),i+this.attack+this.release),i+this.attack+this.release}clone(){const e=new S(this.audioContext);return e.attack=this.attack,e.decay=this.decay,e.sustain=this.sustain,e.release=this.release,e.peakLevel=this.peakLevel,e}getParameters(){return{attack:this.attack,decay:this.decay,sustain:this.sustain,release:this.release,peakLevel:this.peakLevel}}setParameters(e){e.attack!==void 0&&(this.attack=Math.max(.001,e.attack)),e.decay!==void 0&&(this.decay=Math.max(.001,e.decay)),e.sustain!==void 0&&(this.sustain=Math.max(0,Math.min(1,e.sustain))),e.release!==void 0&&(this.release=Math.max(.001,e.release)),e.peakLevel!==void 0&&(this.peakLevel=Math.max(0,Math.min(1,e.peakLevel)))}}class ge{constructor(e){this.audioContext=e,this.isRecording=!1,this.isPlaying=!1,this.recordings=new Map,this.startTime=0,this.playbackStartTime=0,this.playbackScheduler=null,this.loopEnabled=!0,this.recordedDuration=0}startRecording(){this.isRecording=!0,this.recordings.clear(),this.startTime=this.audioContext.currentTime,this.recordedDuration=0}stopRecording(){return this.isRecording=!1,this.recordedDuration=this.audioContext.currentTime-this.startTime,this.recordings}recordValue(e,t){if(!this.isRecording)return;this.recordings.has(e)||this.recordings.set(e,[]);const s=this.audioContext.currentTime-this.startTime;this.recordings.get(e).push({time:s,value:t})}startPlayback(e){this.recordings.size!==0&&(this.isPlaying=!0,this.playbackStartTime=this.audioContext.currentTime,this.schedulePlayback(e))}stopPlayback(){this.isPlaying=!1,this.playbackScheduler&&(clearInterval(this.playbackScheduler),this.playbackScheduler=null)}schedulePlayback(e){let s=0;this.playbackScheduler=setInterval(()=>{if(!this.isPlaying){clearInterval(this.playbackScheduler);return}const i=(this.audioContext.currentTime-this.playbackStartTime)%this.recordedDuration;this.recordings.forEach((a,n)=>{a.forEach(r=>{r.time>s&&r.time<=i&&e(n,r.value)})}),s=i,i<s&&this.loopEnabled&&(s=0,this.playbackStartTime=this.audioContext.currentTime)},10)}setLoop(e){this.loopEnabled=e}clearRecordings(){this.recordings.clear(),this.recordedDuration=0}exportRecordings(){const e={duration:this.recordedDuration,recordings:{}};return this.recordings.forEach((t,s)=>{e.recordings[s]=t}),JSON.stringify(e)}importRecordings(e){try{const t=JSON.parse(e);return this.recordedDuration=t.duration||0,this.recordings.clear(),Object.entries(t.recordings).forEach(([s,i])=>{this.recordings.set(s,i)}),!0}catch(t){return console.error("Failed to import recordings:",t),!1}}createAutomationCurve(e,t,s){const i=[];for(let n=0;n<s*100;n++){const r=n/100,o=r/s;let l={time:0,value:t[0].value},c=t[t.length-1];for(let f=0;f<t.length-1;f++)if(t[f].time<=o&&t[f+1].time>o){l=t[f],c=t[f+1];break}const h=(o-l.time)/(c.time-l.time),d=l.value+(c.value-l.value)*h;i.push({time:r,value:d})}this.recordings.set(e,i),this.recordedDuration=s}createLFOAutomation(e,t,s,i,a){const n=[];for(let o=0;o<a*100;o++){const l=o/100,c=t+(s-t)*(Math.sin(2*Math.PI*i*l)+1)/2;n.push({time:l,value:c})}this.recordings.set(e,n),this.recordedDuration=a}createRandomAutomation(e,t,s,i,a){const n=[];for(let r=0;r<a;r+=1/i){const o=t+Math.random()*(s-t);n.push({time:r,value:o})}this.recordings.set(e,n),this.recordedDuration=a}}class q{constructor(){this.audioContext=null,this.isPlaying=!1,this.isRecording=!1,this.mediaRecorder=null,this.recordedChunks=[],this.activeVoices=0,this.maxVoices=100,this.performanceThrottle=1,this.performanceMonitor=null,this.masterBus=null,this.poolManager=null,this.generators={},this.groupEnabled={drone:!0,glitch:!0,drums:!0,bleeps:!0,burst:!0,fm:!0,noise:!0,acid:!0,granular:!0,spaceMelody:!0,ambientPad:!0,arpeggiator:!0,chord:!0,vocal:!0,karplus:!0,additive:!0,sample:!0},this.animatedParams=new Map,this.morphState=null,this.morphStartParams=null,this.morphTargetParams=null,this.morphStartTime=null,this.morphing=!1,this.morphTargets=new Map,this.morphStartValues=new Map,this.morphDuration=5e3,this.modulationModes=new Map,this.randomIntervals=new Map,this.lfoControllers=new Map,this.autoModeInterval=null,this.liteMode=!1,this.globalEnvelope=null,this.adsrMode="global",this.groupEnvelopes=new Map,this.automationRecorder=null,this.initializeUI(),this.initializeKeyboardShortcuts();const e=document.getElementById("stopButton");e&&(e.disabled=!0),this.loadSettingsFromURL()}initializeKeyboardShortcuts(){document.addEventListener("keydown",e=>{if(e.target.tagName!=="INPUT")switch(e.key.toLowerCase()){case" ":e.preventDefault(),this.isPlaying?this.stop():this.start();break;case"r":!e.ctrlKey&&!e.metaKey&&(e.preventDefault(),this.randomize());break;case"m":e.preventDefault(),this.startMorph();break;case"a":e.preventDefault(),this.toggleAutoMode();break;case"l":e.preventDefault(),this.toggleLiteMode();break;case"escape":e.preventDefault(),this.isPlaying&&this.stop();break;case"?":case"h":e.preventDefault(),this.showKeyboardHelp();break}})}initializeUI(){const e=(t,s,i)=>{const a=document.getElementById(t);a?a.addEventListener(s,i):console.warn(`Element with id '${t}' not found`)};e("playButton","click",()=>this.start()),e("stopButton","click",()=>this.stop()),e("randomizeButton","click",()=>this.randomize()),e("morphButton","click",()=>this.startMorph()),e("morphTime","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value)}),e("autoChangeTime","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.autoModeInterval&&this.updateAutoModeInterval()}),e("minGroups","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value);const i=document.getElementById("maxGroups");i&&parseInt(i.value)<parseInt(t.target.value)&&(i.value=t.target.value,i.dispatchEvent(new Event("input")))}),e("maxGroups","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value);const i=document.getElementById("minGroups");i&&parseInt(i.value)>parseInt(t.target.value)&&(i.value=t.target.value,i.dispatchEvent(new Event("input")))}),e("recordButton","click",()=>this.toggleRecording()),e("autoButton","click",()=>this.toggleAutoMode()),e("liteButton","click",()=>this.toggleLiteMode()),e("shareButton","click",()=>this.shareSettings()),e("helpButton","click",()=>this.showKeyboardHelp()),document.querySelectorAll(".lfo-button").forEach(t=>{t.addEventListener("click",s=>{const i=s.target.dataset.param;this.toggleLFO(i,s.target)})}),e("masterVolume","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setMasterVolume(parseFloat(t.target.value)/100)}),e("reverb","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setReverbMix(parseFloat(t.target.value)/100)}),e("delayTime","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=parseFloat(t.target.value).toFixed(1)),this.masterBus&&this.masterBus.setDelayTime(parseFloat(t.target.value))}),e("delay","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setDelayMix(parseFloat(t.target.value)/100)}),e("compressorMix","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.compressor.setMix(parseFloat(t.target.value))}),e("compThreshold","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setCompressorThreshold(parseFloat(t.target.value))}),e("compRatio","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setCompressorRatio(parseFloat(t.target.value))}),e("eqPreset","change",t=>{this.masterBus&&this.masterBus.setEQPreset(t.target.value)}),e("eqLow","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setEQLowShelf(parseFloat(t.target.value))}),e("eqMid","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setEQMidGain(parseFloat(t.target.value))}),e("eqHigh","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setEQHighShelf(parseFloat(t.target.value))}),e("distortionMix","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setDistortionMix(parseFloat(t.target.value))}),e("distType","change",t=>{this.masterBus&&this.masterBus.setDistortionType(t.target.value)}),e("distDrive","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setDistortionDrive(parseFloat(t.target.value))}),e("chorusMix","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setChorusMix(parseFloat(t.target.value))}),e("chorusMode","change",t=>{this.masterBus&&this.masterBus.setChorusMode(t.target.value)}),e("chorusRate","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.setChorusRate(parseFloat(t.target.value))}),e("sidechainEnable","change",t=>{var s;if(this.masterBus){const i=((s=document.getElementById("sidechainPattern"))==null?void 0:s.value)||"quarter";this.masterBus.setSidechainPumpMode(t.target.checked,i)}}),e("sidechainPattern","change",t=>{var s;this.masterBus&&((s=document.getElementById("sidechainEnable"))!=null&&s.checked)&&this.masterBus.setSidechainPumpMode(!0,t.target.value)}),e("sidechainAmount","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value),this.masterBus&&this.masterBus.sidechain.setLFODepth(parseFloat(t.target.value))}),e("globalAttack","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=parseFloat(t.target.value).toFixed(3)),this.globalEnvelope&&(this.globalEnvelope.attack=parseFloat(t.target.value))}),e("globalDecay","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=parseFloat(t.target.value).toFixed(3)),this.globalEnvelope&&(this.globalEnvelope.decay=parseFloat(t.target.value))}),e("globalSustain","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=parseFloat(t.target.value).toFixed(2)),this.globalEnvelope&&(this.globalEnvelope.sustain=parseFloat(t.target.value))}),e("globalRelease","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=parseFloat(t.target.value).toFixed(3)),this.globalEnvelope&&(this.globalEnvelope.release=parseFloat(t.target.value))}),e("adsrMode","change",t=>{this.adsrMode=t.target.value,this.isPlaying&&Object.keys(this.groupEnabled).forEach(s=>{this.groupEnabled[s]&&(this.updateGroupState(s,!1),this.updateGroupState(s,!0))})}),e("drumPatternMode","change",t=>{this.isPlaying&&this.groupEnabled.drums&&(this.updateGroupState("drums",!1),this.updateGroupState("drums",!0))}),e("automationRecord","click",()=>{if(!this.automationRecorder)return;const t=document.getElementById("automationRecord");this.automationRecorder.isRecording?(this.automationRecorder.stopRecording(),t.classList.remove("recording"),t.textContent="REC"):(this.automationRecorder.startRecording(),t.classList.add("recording"),t.textContent="STOP REC")}),e("automationPlay","click",()=>{if(!this.automationRecorder)return;const t=document.getElementById("automationPlay");this.automationRecorder.isPlaying?(this.automationRecorder.stopPlayback(),t.classList.remove("active")):(this.automationRecorder.startPlayback((s,i)=>{const a=document.getElementById(s);a&&(a.value=i,a.dispatchEvent(new Event("input")))}),t.classList.add("active"))}),e("automationStop","click",()=>{this.automationRecorder&&(this.automationRecorder.stopPlayback(),this.automationRecorder.stopRecording(),document.getElementById("automationRecord").classList.remove("recording"),document.getElementById("automationRecord").textContent="REC",document.getElementById("automationPlay").classList.remove("active"))}),e("automationClear","click",()=>{this.automationRecorder&&this.automationRecorder.clearRecordings()}),e("automationLoop","change",t=>{this.automationRecorder&&this.automationRecorder.setLoop(t.target.checked)}),e("automationDuration","input",t=>{const s=t.target.nextElementSibling;s&&s.classList.contains("value")&&(s.textContent=t.target.value)}),document.querySelectorAll(".group-enable").forEach(t=>{t.addEventListener("change",s=>{let i=s.target.id.replace("Enable","");i!=="arp"&&this.groupEnabled.hasOwnProperty(i)&&this.updateGroupState(i,s.target.checked)})}),document.querySelectorAll('input[type="range"], select').forEach(t=>{t.classList.contains("group-enable")||["masterVolume","reverb","delay","delayTime"].includes(t.id)||t.addEventListener("input",s=>{if(t.type==="range"){const i=t.nextElementSibling;if(i&&i.classList.contains("value")){const a=s.target.value;i.textContent=t.step&&parseFloat(t.step)<1?parseFloat(a).toFixed(1):a}}if(this.isPlaying){const i=this.getGroupForParameter(t.id);i&&this.groupEnabled[i]?["bleeps","burst","acid","granular","spaceMelody","ambientPad","arpeggiator","chord","vocal","karplus","additive","sample"].includes(i)?(this.updateGroupState(i,!1),this.updateGroupState(i,!0)):this.updateParameter(t.id,parseFloat(t.value)):this.updateParameter(t.id,parseFloat(t.value))}this.automationRecorder&&this.automationRecorder.isRecording&&t.type==="range"&&this.automationRecorder.recordValue(t.id,parseFloat(t.value))})}),document.querySelectorAll('input[type="range"]').forEach(t=>{const s=t.nextElementSibling;if(s&&s.classList.contains("value")){const i=t.value;s.textContent=t.step&&parseFloat(t.step)<1?parseFloat(i).toFixed(1):i}})}async start(){var s,i,a,n;this.audioContext||(this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.poolManager=new pe(this.audioContext),this.globalEnvelope=new S(this.audioContext),this.globalEnvelope.setADSR(parseFloat(((s=document.getElementById("globalAttack"))==null?void 0:s.value)||.01),parseFloat(((i=document.getElementById("globalDecay"))==null?void 0:i.value)||.1),parseFloat(((a=document.getElementById("globalSustain"))==null?void 0:a.value)||.7),parseFloat(((n=document.getElementById("globalRelease"))==null?void 0:n.value)||.3)),this.automationRecorder=new ge(this.audioContext)),this.isPlaying=!0;const e=document.getElementById("playButton"),t=document.getElementById("stopButton");e&&(e.disabled=!0),t&&(t.disabled=!1),this.setupAudioGraph(),this.initializeGenerators(),this.startGenerators(),this.startAnimations(),this.startPerformanceMonitoring()}stop(){this.isPlaying=!1;const e=document.getElementById("playButton"),t=document.getElementById("stopButton");if(e&&(e.disabled=!1),t&&(t.disabled=!0),this.autoModeInterval){clearInterval(this.autoModeInterval),this.autoModeInterval=null;const i=document.getElementById("autoButton");i&&(i.classList.remove("active"),i.textContent="AUTO")}this.morphing=!1;const s=document.getElementById("morphButton");s&&(s.textContent="MORPH"),Object.values(this.generators).forEach(i=>{i&&i.stop&&i.stop()}),this.animatedParams.forEach((i,a)=>{i.interval&&clearInterval(i.interval),i.frameId&&cancelAnimationFrame(i.frameId)}),this.animatedParams.clear(),this.randomIntervals.forEach(i=>{clearInterval(i)}),this.randomIntervals.clear(),this.modulationModes.clear(),document.querySelectorAll('input[type="range"]').forEach(i=>{i.classList.remove("animated","random-jump","other-mod")}),document.querySelectorAll(".lfo-button").forEach(i=>{i.textContent="MOD",i.classList.remove("active","random","other")}),this.performanceMonitor&&(clearInterval(this.performanceMonitor),this.performanceMonitor=null),this.activityMonitor&&(clearInterval(this.activityMonitor),this.activityMonitor=null),document.querySelectorAll(".activity-indicator").forEach(i=>{i.classList.remove("active")}),document.querySelectorAll(".section").forEach(i=>{i.classList.remove("active")}),this.disconnectAll(),this.poolManager&&console.log("Voice Pool Stats:",this.poolManager.getAllStats())}setupAudioGraph(){var n,r,o,l;this.masterBus=new he(this.audioContext),this.masterBus.initialize(this.performanceThrottle);const e=parseFloat(((n=document.getElementById("masterVolume"))==null?void 0:n.value)||70)/100,t=parseFloat(((r=document.getElementById("reverb"))==null?void 0:r.value)||20)/100,s=parseFloat(((o=document.getElementById("delayTime"))==null?void 0:o.value)||.3),i=.4,a=parseFloat(((l=document.getElementById("delay"))==null?void 0:l.value)||0)/100;this.masterBus.setMasterVolume(e),this.masterBus.setReverbMix(t),this.masterBus.setDelayTime(s),this.masterBus.setDelayFeedback(i),this.masterBus.setDelayMix(a)}initializeGenerators(){var t;this.generators.drone=new O(this.audioContext,this.poolManager);const e=((t=document.getElementById("drumPatternMode"))==null?void 0:t.value)!=="traditional";this.generators.drums=e?new A(this.audioContext,this.poolManager):new L(this.audioContext,this.poolManager),this.generators.glitch=new j(this.audioContext,this.poolManager),this.generators.bleeps=new $(this.audioContext,this.poolManager),this.generators.burst=new H(this.audioContext,this.poolManager),this.generators.fm=new Q(this.audioContext,this.poolManager),this.generators.noise=new W(this.audioContext,this.poolManager),this.generators.acid=new _(this.audioContext,this.poolManager),this.generators.granular=new U(this.audioContext,this.poolManager),this.generators.spaceMelody=new K(this.audioContext,this.poolManager),this.generators.ambientPad=new J(this.audioContext,this.poolManager),this.generators.arpeggiator=new X(this.audioContext,this.poolManager),this.generators.chord=new Y(this.audioContext,this.poolManager),this.generators.vocal=new Z(this.audioContext,this.poolManager),this.generators.karplus=new ee(this.audioContext,this.poolManager),this.generators.additive=new te(this.audioContext,this.poolManager),this.generators.sample=new se(this.audioContext,this.poolManager)}startGenerators(){var e,t,s,i,a,n,r;if(this.groupEnabled.drone){const o={frequency:parseFloat(document.getElementById("droneFreq").value),detune:parseFloat(document.getElementById("droneDetune").value),voices:parseInt(document.getElementById("droneVoices").value),filterFreq:parseFloat(document.getElementById("droneFilter").value)};this.generators.drone.start(o);const l=this.generators.drone.getOutputNode();l&&this.connectToMaster(l)}if(this.groupEnabled.drums){const o={pattern:document.getElementById("drumPattern").value,tempo:parseInt(document.getElementById("drumTempo").value),density:parseFloat(document.getElementById("drumDensity").value)/100,variation:parseFloat(document.getElementById("drumVariation").value)/100,swing:parseFloat(document.getElementById("drumSwing").value)/100,snareRush:parseFloat(document.getElementById("snareRush").value)/100,ghostNotes:parseFloat(document.getElementById("ghostNotes").value)/100,hihatSpeed:parseInt(document.getElementById("hihatSpeed").value),patternMode:((e=document.getElementById("drumPatternMode"))==null?void 0:e.value)||"traditional",euclideanSteps:parseInt(((t=document.getElementById("euclideanSteps"))==null?void 0:t.value)||16),kickPulses:parseInt(((s=document.getElementById("kickPulses"))==null?void 0:s.value)||4),snarePulses:parseInt(((i=document.getElementById("snarePulses"))==null?void 0:i.value)||2),hihatPulses:parseInt(((a=document.getElementById("hihatPulses"))==null?void 0:a.value)||8),probability:(n=document.getElementById("drumProbability"))==null?void 0:n.checked,humanize:parseFloat(((r=document.getElementById("drumHumanize"))==null?void 0:r.value)||20)/100};this.generators.drums.start(o,this.masterBus.getConnectionNodes())}if(this.groupEnabled.glitch){const o={intensity:parseFloat(document.getElementById("glitchIntensity").value)/100,rate:parseFloat(document.getElementById("glitchRate").value),bitCrush:parseInt(document.getElementById("bitCrush").value)};this.generators.glitch.start(o);const l=this.generators.glitch.getOutputNode();l&&this.connectToMaster(l)}if(this.groupEnabled.bleeps){const o={density:parseFloat(document.getElementById("bleepDensity").value)/100,range:parseFloat(document.getElementById("bleepRange").value),duration:parseFloat(document.getElementById("bleepDuration").value)};this.generators.bleeps.start(o,l=>this.connectToMaster(l),this.getEnvelopeForGroup("bleeps"))}if(this.groupEnabled.burst){const o={activity:parseFloat(document.getElementById("burstActivity").value)/100,complexity:parseInt(document.getElementById("burstComplexity").value),speed:parseFloat(document.getElementById("burstSpeed").value)};this.generators.burst.start(o,l=>this.connectToMaster(l))}if(this.groupEnabled.fm){const o={carrierFreq:parseFloat(document.getElementById("fmCarrier").value),modIndex:parseFloat(document.getElementById("fmIndex").value)/100,ratio:parseFloat(document.getElementById("fmRatio").value),lfoSpeed:parseFloat(document.getElementById("fmLFO").value)};this.generators.fm.start(o);const l=this.generators.fm.getOutputNode();l&&this.connectToMaster(l)}if(this.groupEnabled.noise){const o={type:document.getElementById("noiseType").value,level:parseFloat(document.getElementById("noiseLevel").value)/100,filterFreq:parseFloat(document.getElementById("noiseFilter").value)};this.generators.noise.start(o);const l=this.generators.noise.getOutputNode();l&&this.connectToMaster(l)}if(this.groupEnabled.acid){const o={level:parseFloat(document.getElementById("acidLevel").value)/100,baseFreq:parseFloat(document.getElementById("acidFreq").value),resonance:parseFloat(document.getElementById("acidResonance").value)/100,decay:parseFloat(document.getElementById("acidDecay").value),speed:parseFloat(document.getElementById("acidSpeed").value),tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.acid.start(o,l=>this.connectToMaster(l))}if(this.groupEnabled.granular){const o={density:parseFloat(document.getElementById("grainDensity").value)/100,grainSize:parseFloat(document.getElementById("grainSize").value),pitchSpread:parseFloat(document.getElementById("grainPitch").value)/100,panSpread:parseFloat(document.getElementById("grainPan").value)/100};this.generators.granular.start(o,this.masterBus.getConnectionNodes())}if(this.groupEnabled.spaceMelody){const o={density:parseFloat(document.getElementById("spaceMelodyDensity").value)/100,range:parseInt(document.getElementById("spaceMelodyRange").value),speed:parseFloat(document.getElementById("spaceMelodySpeed").value),echo:parseFloat(document.getElementById("spaceMelodyEcho").value)/100,portamento:parseFloat(document.getElementById("spaceMelodyPortamento").value)};this.generators.spaceMelody.start(o,this.masterBus.getConnectionNodes())}if(this.groupEnabled.ambientPad){const o={density:parseFloat(document.getElementById("padDensity").value)/100,attack:parseFloat(document.getElementById("padAttack").value),release:parseFloat(document.getElementById("padRelease").value),filterSweep:parseFloat(document.getElementById("padFilterSweep").value)/100,shimmer:parseFloat(document.getElementById("padShimmer").value)/100};this.generators.ambientPad.start(o,this.masterBus.getConnectionNodes())}if(this.groupEnabled.arpeggiator){const o={enable:parseFloat(document.getElementById("arpEnable").value)/100,pattern:document.getElementById("arpPattern").value,speed:parseInt(document.getElementById("arpSpeed").value),octaves:parseInt(document.getElementById("arpOctaves").value),gate:parseFloat(document.getElementById("arpGate").value)/100,tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.arpeggiator.start(o,this.masterBus.getConnectionNodes())}if(this.groupEnabled.chord){const o={density:parseFloat(document.getElementById("chordDensity").value)/100,progression:document.getElementById("chordProgression").value,voicing:document.getElementById("chordVoicing").value,brightness:parseFloat(document.getElementById("chordBrightness").value),spread:parseFloat(document.getElementById("chordSpread").value)};this.generators.chord.start(o,l=>this.connectToMaster(l))}if(this.groupEnabled.vocal){const o={density:parseFloat(document.getElementById("vocalDensity").value)/100,vowel:document.getElementById("vocalVowel").value,pitch:parseFloat(document.getElementById("vocalPitch").value),vibrato:parseFloat(document.getElementById("vocalVibrato").value)/100,whisper:parseFloat(document.getElementById("vocalWhisper").value)/100};this.generators.vocal.start(o,l=>this.connectToMaster(l))}if(this.groupEnabled.karplus){const o={density:parseFloat(document.getElementById("karplusDensity").value)/100,pitch:parseFloat(document.getElementById("karplusPitch").value),damping:parseFloat(document.getElementById("karplusDamping").value),brightness:parseFloat(document.getElementById("karplusBrightness").value),pluckHardness:parseFloat(document.getElementById("karplusPluck").value)/100};this.generators.karplus.start(o,l=>this.connectToMaster(l))}if(this.groupEnabled.additive){const o={density:parseFloat(document.getElementById("additiveDensity").value)/100,fundamental:parseFloat(document.getElementById("additiveFundamental").value),harmonics:parseInt(document.getElementById("additiveHarmonics").value),harmonicDecay:parseFloat(document.getElementById("additiveDecay").value),inharmonicity:parseFloat(document.getElementById("additiveInharmonicity").value),brightness:parseFloat(document.getElementById("additiveBrightness").value)};this.generators.additive.start(o,l=>this.connectToMaster(l))}if(this.groupEnabled.sample){const o={density:parseFloat(document.getElementById("sampleDensity").value)/100,sample:document.getElementById("sampleSelect").value,pitch:parseFloat(document.getElementById("samplePitch").value),reverse:parseFloat(document.getElementById("sampleReverse").value)/100>.5,chop:parseFloat(document.getElementById("sampleChop").value)/100,scatter:parseFloat(document.getElementById("sampleScatter").value)/100};this.generators.sample.start(o,l=>this.connectToMaster(l))}}connectToMaster(e){if(e&&this.masterBus){const t=this.masterBus.getConnectionNodes();e.connect(t.dryGain),e.connect(t.convolver),e.connect(t.delay)}}updateGroupState(e,t){var s,i,a,n,r,o,l;if(this.groupEnabled[e]=t,!!this.isPlaying&&(this.generators[e]&&this.generators[e].stop&&this.generators[e].stop(),t))switch(e){case"drone":const c={frequency:parseFloat(document.getElementById("droneFreq").value),detune:parseFloat(document.getElementById("droneDetune").value),voices:parseInt(document.getElementById("droneVoices").value),filterFreq:parseFloat(document.getElementById("droneFilter").value)};this.generators.drone.start(c);const h=this.generators.drone.getOutputNode();h&&this.connectToMaster(h);break;case"drums":const d=((s=document.getElementById("drumPatternMode"))==null?void 0:s.value)||"traditional",f=d!=="traditional",m=this.generators.drums instanceof A;f!==m&&(this.generators.drums=f?new A(this.audioContext,this.poolManager):new L(this.audioContext,this.poolManager));const g={pattern:document.getElementById("drumPattern").value,tempo:parseInt(document.getElementById("drumTempo").value),density:parseFloat(document.getElementById("drumDensity").value)/100,variation:parseFloat(document.getElementById("drumVariation").value)/100,swing:parseFloat(document.getElementById("drumSwing").value)/100,snareRush:parseFloat(document.getElementById("snareRush").value)/100,ghostNotes:parseFloat(document.getElementById("ghostNotes").value)/100,hihatSpeed:parseInt(document.getElementById("hihatSpeed").value),patternMode:d,euclideanSteps:parseInt(((i=document.getElementById("euclideanSteps"))==null?void 0:i.value)||16),kickPulses:parseInt(((a=document.getElementById("kickPulses"))==null?void 0:a.value)||4),snarePulses:parseInt(((n=document.getElementById("snarePulses"))==null?void 0:n.value)||2),hihatPulses:parseInt(((r=document.getElementById("hihatPulses"))==null?void 0:r.value)||8),probability:(o=document.getElementById("drumProbability"))==null?void 0:o.checked,humanize:parseFloat(((l=document.getElementById("drumHumanize"))==null?void 0:l.value)||20)/100};this.generators.drums.start(g,this.masterBus.getConnectionNodes());break;case"glitch":const p={intensity:parseFloat(document.getElementById("glitchIntensity").value)/100,rate:parseFloat(document.getElementById("glitchRate").value),bitCrush:parseInt(document.getElementById("bitCrush").value)};this.generators.glitch.start(p);const u=this.generators.glitch.getOutputNode();u&&this.connectToMaster(u);break;case"bleeps":const y={density:parseFloat(document.getElementById("bleepDensity").value)/100,range:parseFloat(document.getElementById("bleepRange").value),duration:parseFloat(document.getElementById("bleepDuration").value)};this.generators.bleeps.start(y,B=>this.connectToMaster(B),this.getEnvelopeForGroup("bleeps"));break;case"burst":const M={activity:parseFloat(document.getElementById("burstActivity").value)/100,complexity:parseInt(document.getElementById("burstComplexity").value),speed:parseFloat(document.getElementById("burstSpeed").value)};this.generators.burst.start(M,B=>this.connectToMaster(B));break;case"fm":const T={carrierFreq:parseFloat(document.getElementById("fmCarrier").value),modIndex:parseFloat(document.getElementById("fmIndex").value)/100,ratio:parseFloat(document.getElementById("fmRatio").value),lfoSpeed:parseFloat(document.getElementById("fmLFO").value)};this.generators.fm.start(T);const E=this.generators.fm.getOutputNode();E&&this.connectToMaster(E);break;case"noise":const C={type:document.getElementById("noiseType").value,level:parseFloat(document.getElementById("noiseLevel").value)/100,filterFreq:parseFloat(document.getElementById("noiseFilter").value)};this.generators.noise.start(C);const b=this.generators.noise.getOutputNode();b&&this.connectToMaster(b);break;case"acid":const P={level:parseFloat(document.getElementById("acidLevel").value)/100,baseFreq:parseFloat(document.getElementById("acidFreq").value),resonance:parseFloat(document.getElementById("acidResonance").value)/100,decay:parseFloat(document.getElementById("acidDecay").value),speed:parseFloat(document.getElementById("acidSpeed").value),tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.acid.start(P,B=>this.connectToMaster(B));break;case"granular":const v={density:parseFloat(document.getElementById("grainDensity").value)/100,grainSize:parseFloat(document.getElementById("grainSize").value),pitchSpread:parseFloat(document.getElementById("grainPitch").value)/100,panSpread:parseFloat(document.getElementById("grainPan").value)/100};this.generators.granular.start(v,this.masterBus.getConnectionNodes());break;case"spaceMelody":const k={density:parseFloat(document.getElementById("spaceMelodyDensity").value)/100,range:parseInt(document.getElementById("spaceMelodyRange").value),speed:parseFloat(document.getElementById("spaceMelodySpeed").value),echo:parseFloat(document.getElementById("spaceMelodyEcho").value)/100,portamento:parseFloat(document.getElementById("spaceMelodyPortamento").value)};this.generators.spaceMelody.start(k,this.masterBus.getConnectionNodes());break;case"ambientPad":const w={density:parseFloat(document.getElementById("padDensity").value)/100,attack:parseFloat(document.getElementById("padAttack").value),release:parseFloat(document.getElementById("padRelease").value),filterSweep:parseFloat(document.getElementById("padFilterSweep").value)/100,shimmer:parseFloat(document.getElementById("padShimmer").value)/100};this.generators.ambientPad.start(w,this.masterBus.getConnectionNodes());break;case"arpeggiator":const I={enable:parseFloat(document.getElementById("arpEnable").value)/100,pattern:document.getElementById("arpPattern").value,speed:parseInt(document.getElementById("arpSpeed").value),octaves:parseInt(document.getElementById("arpOctaves").value),gate:parseFloat(document.getElementById("arpGate").value)/100,tempo:parseInt(document.getElementById("drumTempo").value)};this.generators.arpeggiator.start(I,this.masterBus.getConnectionNodes());break;case"chord":const fe={density:parseFloat(document.getElementById("chordDensity").value)/100,progression:document.getElementById("chordProgression").value,voicing:document.getElementById("chordVoicing").value,brightness:parseFloat(document.getElementById("chordBrightness").value),spread:parseFloat(document.getElementById("chordSpread").value)};this.generators.chord.start(fe,B=>this.connectToMaster(B));break;case"vocal":const ye={density:parseFloat(document.getElementById("vocalDensity").value)/100,vowel:document.getElementById("vocalVowel").value,pitch:parseFloat(document.getElementById("vocalPitch").value),vibrato:parseFloat(document.getElementById("vocalVibrato").value)/100,whisper:parseFloat(document.getElementById("vocalWhisper").value)/100};this.generators.vocal.start(ye,B=>this.connectToMaster(B));break;case"karplus":const ve={density:parseFloat(document.getElementById("karplusDensity").value)/100,pitch:parseFloat(document.getElementById("karplusPitch").value),damping:parseFloat(document.getElementById("karplusDamping").value),brightness:parseFloat(document.getElementById("karplusBrightness").value),pluckHardness:parseFloat(document.getElementById("karplusPluck").value)/100};this.generators.karplus.start(ve,B=>this.connectToMaster(B));break;case"additive":const xe={density:parseFloat(document.getElementById("additiveDensity").value)/100,fundamental:parseFloat(document.getElementById("additiveFundamental").value),harmonics:parseInt(document.getElementById("additiveHarmonics").value),harmonicDecay:parseFloat(document.getElementById("additiveDecay").value),inharmonicity:parseFloat(document.getElementById("additiveInharmonicity").value),brightness:parseFloat(document.getElementById("additiveBrightness").value)};this.generators.additive.start(xe,B=>this.connectToMaster(B));break;case"sample":const Me={density:parseFloat(document.getElementById("sampleDensity").value)/100,sample:document.getElementById("sampleSelect").value,pitch:parseFloat(document.getElementById("samplePitch").value),reverse:parseFloat(document.getElementById("sampleReverse").value)/100>.5,chop:parseFloat(document.getElementById("sampleChop").value)/100,scatter:parseFloat(document.getElementById("sampleScatter").value)/100};this.generators.sample.start(Me,B=>this.connectToMaster(B));break}}updateParameter(e,t){if(e.startsWith("drone")){if(this.generators.drone&&this.generators.drone.updateParameter){const s=e.replace("drone","").toLowerCase();this.generators.drone.updateParameter(s,t)}}else if(e==="bitCrush")this.generators.glitch&&this.generators.glitch.updateParameter&&this.generators.glitch.updateParameter("bitcrush",t);else if(e==="glitchIntensity")this.generators.glitch&&this.generators.glitch.updateParameter&&this.generators.glitch.updateParameter("intensity",t);else if(e.startsWith("fm")){if(this.generators.fm&&this.generators.fm.updateParameter){const s=e.replace("fm","").toLowerCase();this.generators.fm.updateParameter(s,t)}}else if(e.startsWith("noise")){if(this.generators.noise&&this.generators.noise.updateParameter){const s=e.replace("noise","").toLowerCase();this.generators.noise.updateParameter(s,t)}}else e==="spaceMelodyEcho"&&this.generators.spaceMelody&&this.generators.spaceMelody.updateParameter&&this.generators.spaceMelody.updateParameter("echo",t/100)}disconnectAll(){this.masterBus&&this.masterBus.disconnect()}startAnimations(){this.animatedParams.forEach((e,t)=>{this.animateParameter(t,e)})}setParameterAnimation(e,t){if(t==="none"){const s=this.animatedParams.get(e);s&&s.interval&&clearInterval(s.interval),this.animatedParams.delete(e)}else this.animatedParams.set(e,{mode:t,phase:0}),this.isPlaying&&this.animateParameter(e,this.animatedParams.get(e))}animateParameter(e,t){const s=document.getElementById(e);if(!s)return;const i=parseFloat(s.min),n=parseFloat(s.max)-i;t.interval&&clearInterval(t.interval),t.interval=setInterval(()=>{let r;switch(t.mode){case"lfo":t.phase+=.02,r=i+(Math.sin(t.phase)*.5+.5)*n;break;case"random":if(Math.random()<.1)r=i+Math.random()*n;else return;break;case"drift":const o=i+Math.random()*n,l=parseFloat(s.value);r=l+(o-l)*.05;break}r!==void 0&&(s.value=r,s.dispatchEvent(new Event("input")))},50)}getGroupForParameter(e){return e.startsWith("drone")?"drone":e.startsWith("glitch")||e==="bitCrush"?"glitch":e.startsWith("drum")||e.includes("snare")||e.includes("ghost")||e.includes("hihat")?"drums":e.startsWith("bleep")?"bleeps":e.startsWith("burst")?"burst":e.startsWith("fm")?"fm":e.startsWith("noise")?"noise":e.startsWith("acid")?"acid":e.startsWith("grain")?"granular":e.startsWith("spaceMelody")?"spaceMelody":e.startsWith("pad")?"ambientPad":e.startsWith("arp")&&e!=="arpEnable"?"arpeggiator":e.startsWith("chord")?"chord":e.startsWith("vocal")?"vocal":e.startsWith("karplus")?"karplus":e.startsWith("additive")?"additive":e.startsWith("sample")?"sample":null}randomize(){var b,P;[{id:"reverb",min:0,max:100},{id:"delay",min:0,max:100},{id:"delayTime",min:.1,max:1},{id:"droneFreq",min:50,max:500},{id:"droneDetune",min:0,max:50},{id:"droneVoices",min:1,max:8},{id:"droneFilter",min:100,max:5e3},{id:"droneLFO",min:0,max:10},{id:"glitchIntensity",min:0,max:30},{id:"glitchRate",min:.1,max:10},{id:"bitCrush",min:4,max:16},{id:"drumTempo",min:80,max:140},{id:"drumDensity",min:20,max:80},{id:"drumVariation",min:0,max:50},{id:"drumSwing",min:0,max:50},{id:"snareRush",min:0,max:30},{id:"ghostNotes",min:0,max:30},{id:"hihatSpeed",min:1,max:4},{id:"bleepDensity",min:0,max:20},{id:"bleepRange",min:500,max:5e3},{id:"bleepDuration",min:.01,max:.2},{id:"burstActivity",min:0,max:30},{id:"burstComplexity",min:1,max:5},{id:"burstSpeed",min:.5,max:5},{id:"fmCarrier",min:100,max:500},{id:"fmIndex",min:0,max:30},{id:"fmRatio",min:.5,max:5},{id:"fmLFO",min:0,max:10},{id:"noiseLevel",min:0,max:20},{id:"noiseFilter",min:500,max:5e3},{id:"acidLevel",min:0,max:50},{id:"acidFreq",min:80,max:300},{id:"acidResonance",min:20,max:80},{id:"acidDecay",min:.2,max:1},{id:"acidSpeed",min:.5,max:2},{id:"grainDensity",min:0,max:30},{id:"grainSize",min:20,max:200},{id:"grainPitch",min:0,max:50},{id:"grainPan",min:0,max:50},{id:"spaceMelodyDensity",min:0,max:30},{id:"spaceMelodyRange",min:1,max:3},{id:"spaceMelodySpeed",min:.5,max:2},{id:"spaceMelodyEcho",min:0,max:50},{id:"spaceMelodyPortamento",min:0,max:200},{id:"padDensity",min:0,max:30},{id:"padAttack",min:1,max:5},{id:"padRelease",min:1,max:5},{id:"padFilterSweep",min:0,max:50},{id:"padShimmer",min:0,max:50},{id:"arpEnable",min:0,max:30},{id:"arpSpeed",min:2,max:12},{id:"arpOctaves",min:1,max:3},{id:"arpGate",min:30,max:70},{id:"chordDensity",min:0,max:30},{id:"chordRoot",min:140,max:280},{id:"chordTempo",min:40,max:100},{id:"chordBrightness",min:500,max:3e3},{id:"chordSpread",min:0,max:30},{id:"vocalDensity",min:0,max:20},{id:"vocalPitch",min:150,max:300},{id:"vocalVibrato",min:0,max:50},{id:"vocalWhisper",min:0,max:50},{id:"karplusDensity",min:0,max:25},{id:"karplusPitch",min:150,max:500},{id:"karplusDamping",min:.9,max:.99},{id:"karplusBrightness",min:2e3,max:8e3},{id:"karplusPluck",min:20,max:80},{id:"euclideanSteps",min:8,max:32},{id:"kickPulses",min:1,max:12},{id:"snarePulses",min:1,max:8},{id:"hihatPulses",min:1,max:16},{id:"drumHumanize",min:0,max:50},{id:"additiveDensity",min:0,max:25},{id:"additiveFundamental",min:100,max:400},{id:"additiveHarmonics",min:3,max:12},{id:"additiveDecay",min:1,max:2},{id:"additiveInharmonicity",min:0,max:5},{id:"additiveBrightness",min:1e3,max:5e3},{id:"sampleDensity",min:0,max:30},{id:"samplePitch",min:.5,max:2},{id:"sampleReverse",min:0,max:50},{id:"sampleChop",min:0,max:50},{id:"sampleScatter",min:0,max:50},{id:"compressorMix",min:50,max:100},{id:"compThreshold",min:20,max:60},{id:"compRatio",min:30,max:80},{id:"eqLow",min:-6,max:6},{id:"eqMid",min:-6,max:6},{id:"eqHigh",min:-6,max:6},{id:"distortionMix",min:0,max:30},{id:"distDrive",min:10,max:70},{id:"chorusMix",min:0,max:40},{id:"chorusRate",min:10,max:50},{id:"sidechainAmount",min:20,max:80}].forEach(v=>{const k=document.getElementById(v.id);if(k){const w=this.getGroupForParameter(v.id);let I;w&&!this.groupEnabled[w]?v.id.includes("Density")||v.id.includes("Level")||v.id.includes("Activity")||v.id==="arpEnable"?I=v.min+(v.max-v.min)*.3:I=Math.random()*(v.max-v.min)+v.min:v.id==="drumDensity"?I=v.min+Math.pow(Math.random(),.7)*(v.max-v.min):v.id.includes("Density")||v.id.includes("Intensity")||v.id.includes("Level")||v.id.includes("Enable")||v.id.includes("Activity")||v.id.includes("Rush")||v.id.includes("Ghost")?I=v.min+(1-Math.pow(Math.random(),3))*(v.max-v.min):I=Math.random()*(v.max-v.min)+v.min,k.value=I,k.dispatchEvent(new Event("input"))}});const t=["techno","breakbeat","jungle","idm","gabber","trap"],s=document.getElementById("drumPattern");s&&(s.value=t[Math.floor(Math.random()*t.length)],s.dispatchEvent(new Event("change")));const i=["traditional","euclidean","markov","polyrhythm"],a=document.getElementById("drumPatternMode");a&&(a.value=i[Math.floor(Math.random()*i.length)],a.dispatchEvent(new Event("change")));const n=document.getElementById("drumProbability");n&&(n.checked=Math.random()>.3,n.dispatchEvent(new Event("change")));const r=["white","pink","brown","crackle"],o=document.getElementById("noiseType");o&&(o.value=r[Math.floor(Math.random()*r.length)],o.dispatchEvent(new Event("change")));const l=["up","down","updown","random"],c=document.getElementById("arpPattern");c&&(c.value=l[Math.floor(Math.random()*l.length)],c.dispatchEvent(new Event("change")));const h=["major","minor","jazz","suspended"],d=document.getElementById("chordProgression");d&&(d.value=h[Math.floor(Math.random()*h.length)],d.dispatchEvent(new Event("change")));const f=["close","open","drop2","spread"],m=document.getElementById("chordVoicing");m&&(m.value=f[Math.floor(Math.random()*f.length)],m.dispatchEvent(new Event("change")));const g=["a","e","i","o","u","ah","oo"],p=document.getElementById("vocalVowel");p&&(p.value=g[Math.floor(Math.random()*g.length)],p.dispatchEvent(new Event("change")));const u=document.getElementById("sampleSelect");if(u&&u.options.length>0){const v=Math.floor(Math.random()*u.options.length);u.selectedIndex=v,u.dispatchEvent(new Event("change"))}document.querySelectorAll(".lfo-button").forEach(v=>{(Math.random()<.2&&!v.classList.contains("active")||Math.random()<.8&&v.classList.contains("active"))&&v.click()});const y=parseInt(((b=document.getElementById("minGroups"))==null?void 0:b.value)||3),M=parseInt(((P=document.getElementById("maxGroups"))==null?void 0:P.value)||8),T=y+Math.floor(Math.random()*(M-y+1));[...Array.from(document.querySelectorAll(".group-enable")).filter(v=>v.id!=="arpEnable"&&v.id!=="sidechainEnable")].sort(()=>Math.random()-.5).forEach((v,k)=>{const w=k<T;v.checked!==w&&(v.checked=w,v.dispatchEvent(new Event("change")))})}startMorph(){if(this.morphing){this.morphing=!1;return}this.morphStartValues=new Map,[...document.querySelectorAll('input[type="range"]')].filter(t=>t.id!=="masterVolume").forEach(t=>{this.morphStartValues.set(t.id,parseFloat(t.value))}),this.generateMorphTargets(),this.morphDuration=parseFloat(document.getElementById("morphTime").value)*1e3,this.morphing=!0,this.morphStartTime=Date.now(),document.getElementById("morphButton").textContent="STOP MORPH",this.animateMorph()}generateMorphTargets(){var o,l;if(this.morphTargets=new Map,[{id:"reverb",min:0,max:100,group:"master"},{id:"delay",min:0,max:100,group:"master"},{id:"delayTime",min:.1,max:1,group:"master"},{id:"droneFreq",min:50,max:500,group:"drone"},{id:"droneDetune",min:0,max:50,group:"drone"},{id:"droneVoices",min:1,max:4,group:"drone"},{id:"droneFilter",min:100,max:5e3,group:"drone"},{id:"droneLFO",min:0,max:10,group:"drone"},{id:"glitchIntensity",min:0,max:30,group:"glitch"},{id:"glitchRate",min:.1,max:10,group:"glitch"},{id:"bitCrush",min:4,max:16,group:"glitch"},{id:"drumTempo",min:80,max:140,group:"drums"},{id:"drumDensity",min:20,max:80,group:"drums"},{id:"drumVariation",min:0,max:50,group:"drums"},{id:"drumSwing",min:0,max:50,group:"drums"},{id:"snareRush",min:0,max:30,group:"drums"},{id:"ghostNotes",min:0,max:30,group:"drums"},{id:"hihatSpeed",min:1,max:4,group:"drums"},{id:"bleepDensity",min:0,max:20,group:"bleeps"},{id:"bleepRange",min:500,max:5e3,group:"bleeps"},{id:"bleepDuration",min:.01,max:.2,group:"bleeps"},{id:"burstActivity",min:0,max:30,group:"burst"},{id:"burstComplexity",min:1,max:5,group:"burst"},{id:"burstSpeed",min:.5,max:5,group:"burst"},{id:"fmCarrier",min:100,max:500,group:"fm"},{id:"fmIndex",min:0,max:30,group:"fm"},{id:"fmRatio",min:.5,max:5,group:"fm"},{id:"fmLFO",min:0,max:10,group:"fm"},{id:"noiseLevel",min:0,max:20,group:"noise"},{id:"noiseFilter",min:500,max:5e3,group:"noise"},{id:"acidLevel",min:0,max:50,group:"acid"},{id:"acidFreq",min:80,max:300,group:"acid"},{id:"acidResonance",min:20,max:80,group:"acid"},{id:"acidDecay",min:.2,max:1,group:"acid"},{id:"acidSpeed",min:.5,max:2,group:"acid"},{id:"grainDensity",min:0,max:30,group:"granular"},{id:"grainSize",min:20,max:200,group:"granular"},{id:"grainPitch",min:0,max:50,group:"granular"},{id:"grainPan",min:0,max:50,group:"granular"},{id:"spaceMelodyDensity",min:0,max:30,group:"spaceMelody"},{id:"spaceMelodyRange",min:1,max:3,group:"spaceMelody"},{id:"spaceMelodySpeed",min:.5,max:2,group:"spaceMelody"},{id:"spaceMelodyEcho",min:0,max:50,group:"spaceMelody"},{id:"spaceMelodyPortamento",min:0,max:200,group:"spaceMelody"},{id:"padDensity",min:0,max:30,group:"ambientPad"},{id:"padAttack",min:1,max:5,group:"ambientPad"},{id:"padRelease",min:1,max:5,group:"ambientPad"},{id:"padFilterSweep",min:0,max:50,group:"ambientPad"},{id:"padShimmer",min:0,max:50,group:"ambientPad"},{id:"arpEnable",min:0,max:30,group:"arpeggiator"},{id:"arpSpeed",min:2,max:12,group:"arpeggiator"},{id:"arpOctaves",min:1,max:3,group:"arpeggiator"},{id:"arpGate",min:30,max:70,group:"arpeggiator"},{id:"chordDensity",min:0,max:30,group:"chord"},{id:"chordRoot",min:140,max:280,group:"chord"},{id:"chordTempo",min:40,max:100,group:"chord"},{id:"chordBrightness",min:500,max:3e3,group:"chord"},{id:"chordSpread",min:0,max:30,group:"chord"},{id:"vocalDensity",min:0,max:20,group:"vocal"},{id:"vocalPitch",min:150,max:300,group:"vocal"},{id:"vocalVibrato",min:0,max:50,group:"vocal"},{id:"vocalWhisper",min:0,max:50,group:"vocal"},{id:"karplusDensity",min:0,max:25,group:"karplus"},{id:"karplusPitch",min:150,max:500,group:"karplus"},{id:"karplusDamping",min:.9,max:.99,group:"karplus"},{id:"karplusBrightness",min:2e3,max:8e3,group:"karplus"},{id:"karplusPluck",min:20,max:80,group:"karplus"},{id:"additiveDensity",min:0,max:25,group:"additive"},{id:"additiveFundamental",min:100,max:400,group:"additive"},{id:"additiveHarmonics",min:3,max:12,group:"additive"},{id:"additiveDecay",min:1,max:2,group:"additive"},{id:"additiveInharmonicity",min:0,max:5,group:"additive"},{id:"additiveBrightness",min:1e3,max:5e3,group:"additive"},{id:"sampleDensity",min:0,max:30,group:"sample"},{id:"samplePitch",min:.5,max:2,group:"sample"},{id:"sampleReverse",min:0,max:50,group:"sample"},{id:"sampleChop",min:0,max:50,group:"sample"},{id:"sampleScatter",min:0,max:50,group:"sample"}].forEach(c=>{if(c.group!=="master"&&!this.groupEnabled[c.group])return;let h;c.id==="drumDensity"?h=c.min+Math.pow(Math.random(),.7)*(c.max-c.min):c.id.includes("Density")||c.id.includes("Intensity")||c.id.includes("Level")||c.id.includes("Enable")||c.id.includes("Activity")||c.id.includes("Rush")||c.id.includes("Ghost")?h=c.min+(1-Math.pow(Math.random(),3))*(c.max-c.min):h=Math.random()*(c.max-c.min)+c.min,this.morphTargets.set(c.id,h)}),this.groupEnabled.drums){const c=["techno","breakbeat","jungle","idm","gabber","trap"];this.morphTargets.set("drumPattern",c[Math.floor(Math.random()*c.length)])}if(this.groupEnabled.noise){const c=["white","pink","brown","crackle"];this.morphTargets.set("noiseType",c[Math.floor(Math.random()*c.length)])}if(this.groupEnabled.arpeggiator){const c=["up","down","updown","random"];this.morphTargets.set("arpPattern",c[Math.floor(Math.random()*c.length)])}if(this.groupEnabled.chord){const c=["major","minor","jazz","suspended"];this.morphTargets.set("chordProgression",c[Math.floor(Math.random()*c.length)]);const h=["close","open","drop2","spread"];this.morphTargets.set("chordVoicing",h[Math.floor(Math.random()*h.length)])}if(this.groupEnabled.vocal){const c=["a","e","i","o","u","ah","oo"];this.morphTargets.set("vocalVowel",c[Math.floor(Math.random()*c.length)])}if(this.groupEnabled.sample){const c=document.getElementById("sampleSelect");if(c&&c.options.length>0){const h=Math.floor(Math.random()*c.options.length);this.morphTargets.set("sampleSelect",c.options[h].value)}}if(this.groupEnabled.drums){const c=["traditional","euclidean","markov","polyrhythm"];this.morphTargets.set("drumPatternMode",c[Math.floor(Math.random()*c.length)]),this.morphTargets.set("drumProbability",Math.random()>.3)}const t=parseInt(((o=document.getElementById("minGroups"))==null?void 0:o.value)||3),s=parseInt(((l=document.getElementById("maxGroups"))==null?void 0:l.value)||8),i=t+Math.floor(Math.random()*(s-t+1));[...Object.keys(this.groupEnabled)].sort(()=>Math.random()-.5).forEach((c,h)=>{const d=h<i;this.morphTargets.set(c+"Enable",d)}),["reverb","delay","droneFreq","droneFilter","droneDetune","glitchIntensity","glitchRate","bitCrush","drumTempo","drumDensity","drumSwing","bleepRange","bleepDuration","burstActivity","burstSpeed","fmCarrier","fmIndex","fmRatio","noiseFilter","noiseLevel","acidFreq","acidResonance","grainDensity","grainSize","grainPitch","spaceMelodyDensity","spaceMelodySpeed","spaceMelodyPortamento","spaceMelodyEcho","padFilterSweep","padShimmer","arpSpeed","arpGate","chordDensity","chordRoot","chordTempo","chordBrightness","chordSpread","vocalDensity","vocalPitch","vocalVibrato","vocalWhisper","karplusDensity","karplusPitch","karplusDamping","karplusBrightness","karplusPluck"].forEach(c=>{if(Math.random()<.2){const h=["lfo","random","other"],d=h[Math.floor(Math.random()*h.length)];this.morphTargets.set(c+"Mod",d)}else this.morphTargets.set(c+"Mod","fixed")})}animateMorph(){if(!this.morphing){document.getElementById("morphButton").textContent="MORPH";return}const e=Date.now()-this.morphStartTime,t=Math.min(e/this.morphDuration,1),s=.5-Math.cos(t*Math.PI)/2;if(this.morphStartValues.forEach((i,a)=>{const n=this.morphTargets.get(a);if(n!==void 0&&typeof n=="number"){const r=document.getElementById(a);if(r){const o=i+(n-i)*s;r.value=o,r.dispatchEvent(new Event("input"))}}}),t>=1){const i=document.getElementById("drumPattern");i&&this.morphTargets.has("drumPattern")&&(i.value=this.morphTargets.get("drumPattern"),i.dispatchEvent(new Event("change")));const a=document.getElementById("noiseType");a&&this.morphTargets.has("noiseType")&&(a.value=this.morphTargets.get("noiseType"),a.dispatchEvent(new Event("change")));const n=document.getElementById("arpPattern");n&&this.morphTargets.has("arpPattern")&&(n.value=this.morphTargets.get("arpPattern"),n.dispatchEvent(new Event("change")));const r=document.getElementById("chordProgression");r&&this.morphTargets.has("chordProgression")&&(r.value=this.morphTargets.get("chordProgression"),r.dispatchEvent(new Event("change")));const o=document.getElementById("chordVoicing");o&&this.morphTargets.has("chordVoicing")&&(o.value=this.morphTargets.get("chordVoicing"),o.dispatchEvent(new Event("change")));const l=document.getElementById("vocalVowel");l&&this.morphTargets.has("vocalVowel")&&(l.value=this.morphTargets.get("vocalVowel"),l.dispatchEvent(new Event("change")));const c=document.getElementById("sampleSelect");c&&this.morphTargets.has("sampleSelect")&&(c.value=this.morphTargets.get("sampleSelect"),c.dispatchEvent(new Event("change")));const h=document.getElementById("drumPatternMode");h&&this.morphTargets.has("drumPatternMode")&&(h.value=this.morphTargets.get("drumPatternMode"),h.dispatchEvent(new Event("change")));const d=document.getElementById("drumProbability");d&&this.morphTargets.has("drumProbability")&&(d.checked=this.morphTargets.get("drumProbability"),d.dispatchEvent(new Event("change"))),Object.keys(this.groupEnabled).forEach(m=>{const g=m+"Enable";if(this.morphTargets.has(g)){const p=document.getElementById(g);if(p){const u=this.morphTargets.get(g);p.checked!==u&&(p.checked=u,p.dispatchEvent(new Event("change")))}}}),["reverb","delay","droneFreq","droneFilter","droneDetune","glitchIntensity","glitchRate","bitCrush","drumTempo","drumDensity","drumSwing","bleepRange","bleepDuration","burstActivity","burstSpeed","fmCarrier","fmIndex","fmRatio","noiseFilter","noiseLevel","acidFreq","acidResonance","grainDensity","grainSize","grainPitch","spaceMelodyDensity","spaceMelodySpeed","spaceMelodyPortamento","spaceMelodyEcho","padFilterSweep","padShimmer","arpSpeed","arpGate"].forEach(m=>{const g=m+"Mod";if(this.morphTargets.has(g)){const p=this.morphTargets.get(g),u=document.querySelector(`.lfo-button[data-param="${m}"]`);if(u){const y=this.modulationModes.get(m)||"fixed";if(y!==p){const M=["fixed","lfo","random","other"],T=M.indexOf(y);let C=(M.indexOf(p)-T+4)%4;for(let b=0;b<C;b++)u.click()}}}}),this.morphing=!1,document.getElementById("morphButton").textContent="MORPH"}else requestAnimationFrame(()=>this.animateMorph())}toggleLFO(e,t){let s=this.modulationModes.get(e)||"fixed";this.cleanupModulation(e);const i=["fixed","lfo","random","other"],a=i.indexOf(s),n=i[(a+1)%i.length];switch(this.modulationModes.set(e,n),n){case"fixed":t.textContent="MOD",t.classList.remove("active","random","other");break;case"lfo":t.textContent="LFO",t.classList.add("active"),t.classList.remove("random","other"),this.startLFO(e);break;case"random":t.textContent="RND",t.classList.add("active","random"),t.classList.remove("other"),this.startRandomJumps(e);break;case"other":t.textContent="OTH",t.classList.add("active","other"),t.classList.remove("random"),this.startOtherModulation(e);break}}cleanupModulation(e){if(this.animatedParams.has(e)){const s=this.animatedParams.get(e);s.frameId&&cancelAnimationFrame(s.frameId),this.animatedParams.delete(e)}this.randomIntervals.has(e)&&(clearInterval(this.randomIntervals.get(e)),this.randomIntervals.delete(e));const t=document.getElementById(e);t&&t.classList.remove("animated","random-jump","other-mod")}startLFO(e){var s;const t=document.getElementById(e);if(t){t.classList.add("animated");const i=parseFloat((s=document.getElementById("droneLFO"))==null?void 0:s.value)||.5,a={min:parseFloat(t.min),max:parseFloat(t.max),speed:i,phase:0};this.animatedParams.set(e,a),this.animateLFOParameter(e,a)}}startRandomJumps(e){const t=document.getElementById(e);if(t){t.classList.add("random-jump");const s=setInterval(()=>{const i=parseFloat(t.min),a=parseFloat(t.max),n=Math.random()*(a-i)+i;t.value=n,t.dispatchEvent(new Event("input"))},500+Math.random()*1500);this.randomIntervals.set(e,s)}}startOtherModulation(e){const t=document.getElementById(e);if(t){t.classList.add("other-mod");const s=8;let i=0;const a=setInterval(()=>{const n=parseFloat(t.min),o=(parseFloat(t.max)-n)/s,l=n+i*o;t.value=l,t.dispatchEvent(new Event("input")),i=(i+1)%s},400);this.randomIntervals.set(e,a)}}animateLFOParameter(e,t){if(!this.animatedParams.has(e))return;const s=document.getElementById(e);if(!s)return;t.phase+=t.speed*.01;const i=t.min+(Math.sin(t.phase)+1)/2*(t.max-t.min);s.value=i,s.dispatchEvent(new Event("input")),t.frameId=requestAnimationFrame(()=>this.animateLFOParameter(e,t))}captureCurrentState(){const e={};return document.querySelectorAll('input[type="range"], select').forEach(t=>{t.id&&(e[t.id]=parseFloat(t.value)||0)}),e}async toggleRecording(){const e=document.getElementById("recordButton");if(this.isRecording)this.mediaRecorder.stop(),this.isRecording=!1,e.classList.remove("recording"),e.textContent="RECORD";else{const t=this.audioContext.createMediaStreamDestination();this.masterBus&&this.masterBus.nodes.output.connect(t);const s=["audio/webm;codecs=opus","audio/webm","audio/ogg;codecs=opus","audio/mp4"];let i="audio/webm";for(const a of s)if(MediaRecorder.isTypeSupported(a)){i=a;break}this.mediaRecorder=new MediaRecorder(t.stream,{mimeType:i}),this.recordedChunks=[],this.recordingMimeType=i,this.mediaRecorder.ondataavailable=a=>{a.data.size>0&&this.recordedChunks.push(a.data)},this.mediaRecorder.onstop=()=>{this.showExportDialog()},this.mediaRecorder.start(),this.isRecording=!0,e.classList.add("recording"),e.textContent="STOP REC"}}showExportDialog(){const e=document.createElement("div");e.style.position="fixed",e.style.top="0",e.style.left="0",e.style.width="100%",e.style.height="100%",e.style.backgroundColor="rgba(0, 0, 0, 0.8)",e.style.display="flex",e.style.alignItems="center",e.style.justifyContent="center",e.style.zIndex="1000";const t=document.createElement("div");t.style.backgroundColor="#000",t.style.border="1px solid #fff",t.style.padding="2rem",t.style.textAlign="center";const s=document.createElement("h3");s.textContent="Export Recording",s.style.color="#fff",s.style.marginBottom="1.5rem",s.style.textTransform="uppercase",s.style.letterSpacing="0.1em";const i=document.createElement("div");i.style.display="flex",i.style.gap="1rem",i.style.justifyContent="center",i.style.flexWrap="wrap",[{label:"WAV",format:"wav",type:"audio/wav"},{label:"WebM",format:"webm",type:this.recordingMimeType},{label:"MP3*",format:"mp3",type:"audio/mpeg",note:"Requires conversion"}].forEach(({label:r,format:o,type:l,note:c})=>{const h=document.createElement("button");h.className="control-button secondary",h.textContent=r,h.style.minWidth="100px",h.addEventListener("click",()=>{o==="wav"?this.exportAsWAV():this.exportAsFormat(o,l),e.remove()}),c&&(h.title=c),i.appendChild(h)});const n=document.createElement("button");n.className="control-button secondary",n.textContent="CANCEL",n.style.marginTop="1rem",n.addEventListener("click",()=>{e.remove()}),t.appendChild(s),t.appendChild(i),t.appendChild(n),e.appendChild(t),document.body.appendChild(e)}exportAsFormat(e,t){const s=new Blob(this.recordedChunks,{type:t}),i=URL.createObjectURL(s),a=document.createElement("a");a.href=i,a.download=`audiogen_${new Date().toISOString().replace(/[:.]/g,"-")}.${e}`,a.click(),URL.revokeObjectURL(i)}async exportAsWAV(){const e=new Blob(this.recordedChunks,{type:this.recordingMimeType});try{const t=await e.arrayBuffer(),s=await this.audioContext.decodeAudioData(t),i=this.audioBufferToWav(s),a=URL.createObjectURL(i),n=document.createElement("a");n.href=a,n.download=`audiogen_${new Date().toISOString().replace(/[:.]/g,"-")}.wav`,n.click(),URL.revokeObjectURL(a)}catch(t){console.error("Error converting to WAV:",t),this.exportAsFormat("webm",this.recordingMimeType)}}audioBufferToWav(e){const t=e.numberOfChannels,s=e.sampleRate,i=1,a=16,n=a/8,r=t*n,o=[];for(let m=0;m<e.numberOfChannels;m++)o.push(e.getChannelData(m));const l=o[0].length,c=new ArrayBuffer(44+l*r),h=new DataView(c),d=(m,g)=>{for(let p=0;p<g.length;p++)h.setUint8(m+p,g.charCodeAt(p))};d(0,"RIFF"),h.setUint32(4,36+l*r,!0),d(8,"WAVE"),d(12,"fmt "),h.setUint32(16,16,!0),h.setUint16(20,i,!0),h.setUint16(22,t,!0),h.setUint32(24,s,!0),h.setUint32(28,s*r,!0),h.setUint16(32,r,!0),h.setUint16(34,a,!0),d(36,"data"),h.setUint32(40,l*r,!0);let f=44;for(let m=0;m<l;m++)for(let g=0;g<t;g++){const p=Math.max(-1,Math.min(1,o[g][m])),u=p<0?p*32768:p*32767;h.setInt16(f,u,!0),f+=2}return new Blob([c],{type:"audio/wav"})}startPerformanceMonitoring(){this.performanceMonitor=setInterval(()=>{const e=this.activeVoices/this.maxVoices;if(e>.8?this.performanceThrottle=.5:e>.6?this.performanceThrottle=.7:this.performanceThrottle=1,this.generators.drums&&this.generators.drums.setPerformanceThrottle(this.performanceThrottle),this.generators.granular&&this.generators.granular.setPerformanceThrottle(this.performanceThrottle),this.masterBus&&this.masterBus.updatePerformance(this.performanceThrottle),this.poolManager&&window.location.hostname==="localhost"){const t=this.poolManager.getAllStats();console.log("Voice Pool Performance:",{oscillator:`${t.oscillator.active} active, ${t.oscillator.available} pooled (${t.oscillator.poolEfficiency} reuse)`,gain:`${t.gain.active} active, ${t.gain.available} pooled (${t.gain.poolEfficiency} reuse)`,buffer:`${t.bufferSource.active} active, ${t.bufferSource.available} pooled (${t.bufferSource.poolEfficiency} reuse)`})}},1e3),this.activityMonitor=setInterval(()=>{this.updateActivityIndicators()},100)}updateActivityIndicators(){Object.keys(this.groupEnabled).forEach(e=>{const t=document.getElementById(e+"Activity"),s=t==null?void 0:t.closest(".section");if(t){const i=this.groupEnabled[e],a=this.generators[e];let n=!1;if(i&&a&&a.isPlaying){const r=document.getElementById(e+"Density")||document.getElementById(e+"Level")||document.getElementById(e+"Activity")||(e==="arpeggiator"?document.getElementById("arpEnable"):null);r?n=parseFloat(r.value)>0:e==="drone"&&(n=!0)}n?(t.classList.add("active"),s==null||s.classList.add("active")):(t.classList.remove("active"),s==null||s.classList.remove("active"))}})}toggleAutoMode(){var e;if(this.autoModeInterval){clearInterval(this.autoModeInterval),this.autoModeInterval=null;const t=document.getElementById("autoButton");t&&(t.classList.remove("active"),t.textContent="AUTO")}else{const t=document.getElementById("autoButton");t&&(t.classList.add("active"),t.textContent="AUTO ON");const s=parseFloat(((e=document.getElementById("autoChangeTime"))==null?void 0:e.value)||30)*1e3;this.randomize(),this.autoModeInterval=setInterval(()=>{this.randomize()},s)}}updateAutoModeInterval(){var e;if(this.autoModeInterval){clearInterval(this.autoModeInterval);const t=parseFloat(((e=document.getElementById("autoChangeTime"))==null?void 0:e.value)||30)*1e3;this.autoModeInterval=setInterval(()=>{this.randomize()},t)}}toggleLiteMode(){var e,t,s,i,a;if(this.liteMode){this.liteMode=!1;const n=document.getElementById("liteButton");if(n&&(n.classList.remove("active"),n.textContent="LITE MODE"),this.masterBus){const r=parseFloat(((e=document.getElementById("compressorMix"))==null?void 0:e.value)||100),o=parseFloat(((t=document.getElementById("distortionMix"))==null?void 0:t.value)||0),l=parseFloat(((s=document.getElementById("chorusMix"))==null?void 0:s.value)||0),c=parseFloat(((i=document.getElementById("reverb"))==null?void 0:i.value)||20)/100,h=parseFloat(((a=document.getElementById("delay"))==null?void 0:a.value)||0)/100;this.masterBus.compressor.setMix(r),this.masterBus.setDistortionMix(o),this.masterBus.setChorusMix(l),this.masterBus.setReverbMix(c),this.masterBus.setDelayMix(h)}this.poolManager&&(this.poolManager.setMaxPoolSize("oscillator",200),this.poolManager.setMaxPoolSize("gain",200),this.poolManager.setMaxPoolSize("bufferSource",100)),this.maxVoices=100}else{this.liteMode=!0;const n=document.getElementById("liteButton");n&&(n.classList.add("active"),n.textContent="LITE ON"),this.masterBus&&(this.masterBus.setDistortionMix(0),this.masterBus.setChorusMix(0),this.masterBus.setReverbMix(0),this.masterBus.setDelayMix(0)),this.poolManager&&(this.poolManager.setMaxPoolSize("oscillator",50),this.poolManager.setMaxPoolSize("gain",50),this.poolManager.setMaxPoolSize("bufferSource",25)),this.maxVoices=50}}showKeyboardHelp(){const e=`
Keyboard Shortcuts:
    
Space    - Play/Stop
R        - Randomize
M        - Morph
A        - Toggle Auto Mode
L        - Toggle Lite Mode
Esc      - Stop
? or H   - Show this help
        
Press any key to close this help.`,t=document.createElement("div");t.style.position="fixed",t.style.top="0",t.style.left="0",t.style.width="100%",t.style.height="100%",t.style.backgroundColor="rgba(0, 0, 0, 0.8)",t.style.display="flex",t.style.alignItems="center",t.style.justifyContent="center",t.style.zIndex="1000";const s=document.createElement("pre");s.style.color="#fff",s.style.backgroundColor="#000",s.style.border="1px solid #fff",s.style.padding="2rem",s.style.fontFamily="Monaco, Courier New, monospace",s.style.fontSize="14px",s.textContent=e,t.appendChild(s),document.body.appendChild(t);const i=a=>{a.preventDefault(),t.remove(),document.removeEventListener("keydown",i)};setTimeout(()=>{document.addEventListener("keydown",i)},100)}shareSettings(){const e={groups:{},params:{},selects:{}};Object.keys(this.groupEnabled).forEach(a=>{e.groups[a]=this.groupEnabled[a]}),document.querySelectorAll('input[type="range"]').forEach(a=>{a.id&&(e.params[a.id]=parseFloat(a.value))}),document.querySelectorAll("select").forEach(a=>{a.id&&(e.selects[a.id]=a.value)}),e.checkboxes={},document.querySelectorAll('input[type="checkbox"]').forEach(a=>{a.id&&!a.classList.contains("group-enable")&&(e.checkboxes[a.id]=a.checked)});const t=JSON.stringify(e),s=btoa(t),i=new URL(window.location.href);i.searchParams.set("preset",s),navigator.clipboard.writeText(i.toString()).then(()=>{const a=document.getElementById("shareButton");if(a){const n=a.textContent;a.textContent="COPIED!",setTimeout(()=>{a.textContent=n},2e3)}}).catch(a=>{console.error("Failed to copy URL:",a),prompt("Copy this URL to share your settings:",i.toString())})}loadSettingsFromURL(){const t=new URLSearchParams(window.location.search).get("preset");if(t)try{const s=atob(t),i=JSON.parse(s);i.groups&&Object.entries(i.groups).forEach(([a,n])=>{if(this.groupEnabled.hasOwnProperty(a)){this.groupEnabled[a]=n;const r=document.getElementById(a+"Enable");r&&(r.checked=n)}}),i.params&&Object.entries(i.params).forEach(([a,n])=>{const r=document.getElementById(a);r&&(r.value=n,r.dispatchEvent(new Event("input")))}),i.selects&&Object.entries(i.selects).forEach(([a,n])=>{const r=document.getElementById(a);r&&(r.value=n,r.dispatchEvent(new Event("change")))}),i.checkboxes&&Object.entries(i.checkboxes).forEach(([a,n])=>{const r=document.getElementById(a);r&&(r.checked=n,r.dispatchEvent(new Event("change")))}),console.log("Settings loaded from URL")}catch(s){console.error("Failed to load settings from URL:",s)}}getEnvelopeForGroup(e){if(this.adsrMode==="disabled")return null;if(this.adsrMode==="perGroup"){if(!this.groupEnvelopes.has(e)){const t=new S(this.audioContext);this.globalEnvelope&&t.setParameters(this.globalEnvelope.getParameters()),this.groupEnvelopes.set(e,t)}return this.groupEnvelopes.get(e)}return this.globalEnvelope}}return document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>{window.soundscape=new q}):window.soundscape=new q,V.GenerativeSoundscape=q,Object.defineProperty(V,Symbol.toStringTag,{value:"Module"}),V}({});
